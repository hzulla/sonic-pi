# This file is distributed under the same license as the Sonic Pi package.
# Do not edit this file, use Weblate instead.
# Read TRANSLATION.md for more information.

msgid ""
msgstr ""
"Project-Id-Version: Sonic Pi\n"
"Language: nl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: 01-Welcome-to-Sonic-Pi.md:1
msgid "1 Welcome to Sonic Pi"
msgstr "1 Welkom bij Sonic Pi"

#: 01-Welcome-to-Sonic-Pi.md:3
msgid "Welcome friend :-)"
msgstr "Welkom vriend :-)"

#: 01-Welcome-to-Sonic-Pi.md:5
msgid ""
"Welcome to Sonic Pi. Hopefully you're as excited to get started making crazy "
"sounds as I am to show you. It's going to be a really *fun* ride where "
"you'll learn all about music, synthesis, programming, composition, "
"performance and more."
msgstr ""
"Welkom bij Sonic Pi. Hopelijk ben je zo enthousiast om aan de slag te gaan "
"om te gekke geluiden te gaan maken,zoals ik jou ga tonen. He gaat een echte  "
"plezier-rit worden,waar u alles over muziek, synthese, programmeren, "
"compositie, performen leert en meer..."

#: 01-Welcome-to-Sonic-Pi.md:10
msgid ""
"But wait, how rude of me! Let me introduce myself - I'm [Sam Aaron](http://"
"twitter.com/samaaron) - the chap that created Sonic Pi. You can find me at "
"[@samaaron](http://twitter.com/samaaron) on Twitter and I'd be more than "
"happy to say hello to you. You might also be interested in finding out more "
"about my [Live Coding Performances](http://facebook.com/livecodersamaaron) "
"where I code with Sonic Pi live in front of audiences."
msgstr ""

#: 01-Welcome-to-Sonic-Pi.md:18
msgid ""
"If you have any thoughts, or ideas for improving Sonic Pi - please pass them "
"on - feedback is so helpful. You never know, your idea might be the next big "
"feature!"
msgstr ""

#: 01-Welcome-to-Sonic-Pi.md:22
msgid ""
"This tutorial is divided up into sections grouped by category. Whilst I've "
"written it to have an easy learning progression from start to finish, feel "
"very free just to dip in and out of sections as you see fit. If you feel "
"that there's something missing, do let me know and I'll consider it for a "
"future version."
msgstr ""

#: 01-Welcome-to-Sonic-Pi.md:28
msgid ""
"Finally, watching others live code is a really great way to learn. I "
"regularly stream live on [livecoding.tv/samaaron](http://livecoding.tv/"
"samaaron) so please do drop by, say hi and ask me lots of questions :-)"
msgstr ""

#: 01-Welcome-to-Sonic-Pi.md:33
msgid "OK, let's get started..."
msgstr ""

#: 01.1-Live-Coding.md:1
msgid "1.1 Live Coding"
msgstr ""

#: 01.1-Live-Coding.md:3 09-Live-Coding.md:3 09.1-Live-Coding-Fundamentals.md:3
#: A.02-live-coding.md:3
msgid "Live Coding"
msgstr ""

#: 01.1-Live-Coding.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write "
"and *modify code live* to make music, just like you might perform live with "
"a guitar. This means that given some practice you can take Sonic Pi on stage "
"and gig with it."
msgstr ""

#: 01.1-Live-Coding.md:10
msgid "Free your mind"
msgstr ""

#: 01.1-Live-Coding.md:12
msgid ""
"Before we get into the real details of how Sonic Pi works in the rest of "
"this tutorial, I'd like to give you an experience of what it's like to live "
"code. Don't worry if you don't understand much (or any) of this. Just try to "
"hold onto your seats and enjoy..."
msgstr ""

#: 01.1-Live-Coding.md:17
msgid "A live loop"
msgstr ""

#: 01.1-Live-Coding.md:19
msgid "Let's get started, copy the following code into an empty buffer above:"
msgstr ""

#: 01.1-Live-Coding.md:21
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: 01.1-Live-Coding.md:28
msgid ""
"Now, press the `Run` button and you'll hear a nice fast bass drum beating "
"away. If at any time you wish to stop the sound just hit the `Stop` button. "
"Although don't hit it just yet... Instead, follow these steps:"
msgstr ""

#: 01.1-Live-Coding.md:32
msgid "Make sure the bass drum sound is still running"
msgstr ""

#: 01.1-Live-Coding.md:33
msgid "Change the `sleep` value from `0.5` to something higher like `1`."
msgstr ""

#: 01.1-Live-Coding.md:34
msgid "Press the `Run` button again"
msgstr ""

#: 01.1-Live-Coding.md:35
msgid "Notice how the drum speed has changed."
msgstr ""

#: 01.1-Live-Coding.md:36
msgid ""
"Finally, *remember this moment*, this is the first time you've live coded "
"with Sonic Pi and it's unlikely to be your last..."
msgstr ""

#: 01.1-Live-Coding.md:39
msgid ""
"Ok, that was simple enough. Let's add something else into the mix. Above "
"`sample :bd_haus` add the line `sample :ambi_choir, rate: 0.3`. Your code "
"should look like this:"
msgstr ""

#: 01.1-Live-Coding.md:43
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""

#: 01.1-Live-Coding.md:51
msgid ""
"Now, play around. Change the rates - what happens when you use high values, "
"or small values or negative values? See what happens when you change the "
"`rate:` value for the `:ambi_choir` sample just slightly (say to 0.29). What "
"happens if you choose a really small `sleep` value? See if you can make it "
"go so fast your computer will stop with an error because it can't keep up "
"(if that happens, just choose a bigger `sleep` time and hit `Run` again)."
msgstr ""

#: 01.1-Live-Coding.md:59
msgid ""
"Try commenting one of the `sample` lines out by adding a `#` to the "
"beginning:"
msgstr ""

#: 01.1-Live-Coding.md:62
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"#  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""

#: 01.1-Live-Coding.md:70
msgid ""
"Notice how it tells the computer to ignore it, so we don't hear it. This is "
"called a comment. In Sonic Pi we can use comments to remove and add things "
"into the mix."
msgstr ""

#: 01.1-Live-Coding.md:74
msgid ""
"Finally, let me leave you something fun to play with. Take the code below, "
"and copy it into a spare buffer. Now, don't try to understand it too much "
"other than see that there are two loops - so two things going round at the "
"same time. Now, do what you do best - experiment and play around. Here are "
"some suggestions:"
msgstr ""

#: 01.1-Live-Coding.md:80
msgid "Try changing the blue `rate:` values to hear the sample sound change."
msgstr ""

#: 01.1-Live-Coding.md:81
msgid ""
"Try changing the `sleep` times and hear that both loops can spin round at "
"different rates."
msgstr ""

#: 01.1-Live-Coding.md:83
msgid ""
"Try uncommenting the sample line (remove the `#`) and enjoy the sound of the "
"guitar played backwards."
msgstr ""

#: 01.1-Live-Coding.md:85
msgid ""
"Try changing any of the blue `mix:` values to numbers between `0` (not in "
"the mix) and `1` (fully in the mix)."
msgstr ""

#: 01.1-Live-Coding.md:88
msgid ""
"Remember to press `Run` and you'll hear the change next time the loop goes "
"round. If you end up in a pickle, don't worry - hit `Stop`, delete the code "
"in the buffer and paste a fresh copy in and you're ready to jam again. "
"Making mistakes is how you'll learn the quickest..."
msgstr ""

#: 01.1-Live-Coding.md:94
#, no-wrap
msgid ""
"live_loop :guit do\n"
"  with_fx :echo, mix: 0.3, phase: 0.25 do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"#  sample :guit_em9, rate: -0.5\n"
"  sleep 8\n"
"end\n"
"live_loop :boom do\n"
"  with_fx :reverb, room: 1 do\n"
"    sample :bd_boom, amp: 10, rate: 1\n"
"  end\n"
"  sleep 8\n"
"end"
msgstr ""

#: 01.1-Live-Coding.md:111
msgid ""
"Now, keep playing and experimenting until your curiosity about how this all "
"actually works kicks in and you start wondering what else you can do with "
"this. You're now ready to read the rest of the tutorial."
msgstr ""

#: 01.1-Live-Coding.md:115
msgid "So what are you waiting for..."
msgstr ""

#: 01.2-Exploring-the-Interface.md:1
msgid "1.2 Exploring the Interface"
msgstr ""

#: 01.2-Exploring-the-Interface.md:3
msgid "The Sonic Pi Interface"
msgstr ""

#: 01.2-Exploring-the-Interface.md:5
msgid ""
"Sonic Pi has a very simple interface for coding music. Let's spend a little "
"time exploring it."
msgstr ""

#: 01.2-Exploring-the-Interface.md:8
msgid "![Sonic Pi Interface](../images/tutorial/GUI.png)"
msgstr ""

#: 01.2-Exploring-the-Interface.md:11
msgid "*A* - Play Controls"
msgstr ""

#: 01.2-Exploring-the-Interface.md:12
msgid "*B* - Editor Controls"
msgstr ""

#: 01.2-Exploring-the-Interface.md:13
msgid "*C* - Info and Help"
msgstr ""

#: 01.2-Exploring-the-Interface.md:14
msgid "*D* - Code Editor"
msgstr ""

#: 01.2-Exploring-the-Interface.md:15
msgid "*E* - Prefs Panel"
msgstr ""

#: 01.2-Exploring-the-Interface.md:16
msgid "*F* - Log Viewer"
msgstr ""

#: 01.2-Exploring-the-Interface.md:17
msgid "*G* - Help System"
msgstr ""

#: 01.2-Exploring-the-Interface.md:20
msgid "A. Play Controls"
msgstr ""

#: 01.2-Exploring-the-Interface.md:22
msgid ""
"These pink buttons are the main controls for starting and stopping sounds. "
"There's the *Run* button for running the code in the editor, *Stop* for "
"stopping all running code, *Save* for saving the code to an external file "
"and *Record* to create a recording (a WAV file) of the sound playing."
msgstr ""

#: 01.2-Exploring-the-Interface.md:28
msgid "B. Editor Controls"
msgstr ""

#: 01.2-Exploring-the-Interface.md:30
msgid ""
"These orange buttons allow you to manipulate the code editor. The *Size +* "
"and *Size -* buttons allow you to make the text bigger and smaller. The "
"*Align* button will neaten the code for you to make it look more "
"professional."
msgstr ""

#: 01.2-Exploring-the-Interface.md:35
msgid "C. Info and Help"
msgstr ""

#: 01.2-Exploring-the-Interface.md:37
msgid ""
"These blue buttons give you access to information, help and preferences. The "
"*Info* button will open up the information window which contains information "
"about Sonic Pi itself - the core team, history, contributors and community. "
"The *Help* button toggles the help system (*G*) and the *Prefs* button "
"toggles the preferences window which allows you to control some basic system "
"parameters."
msgstr ""

#: 01.2-Exploring-the-Interface.md:44
msgid "D. Code Editor"
msgstr ""

#: 01.2-Exploring-the-Interface.md:46
msgid ""
"This is the area where you'll write your code and compose/perform music. "
"It's a simple text editor where you can write code, delete it, cut and "
"paste, etc. Think of it like a very basic version of Word or Google Docs. "
"The editor will automatically colour words based on their meaning in the "
"code. This may seem strange at first, but you'll soon find it very useful. "
"For example, you'll know something is a number because it is blue."
msgstr ""

#: 01.2-Exploring-the-Interface.md:54
msgid "E. Prefs Panel"
msgstr ""

#: 01.2-Exploring-the-Interface.md:56
msgid ""
"Sonic Pi supports a number of tweakable preferences which can be accessed by "
"toggling the *prefs* button in the Info and Help button set. This will "
"toggle the visibility of the Prefs Panel which includes a number of options "
"to be changed. Examples are forcing mono mode, inverting stereo, Toggling "
"log output verbosity and also a volume slider and audio selector on the "
"Raspberry Pi."
msgstr ""

#: 01.2-Exploring-the-Interface.md:63
msgid "F. Log Viewer"
msgstr ""

#: 01.2-Exploring-the-Interface.md:65
msgid ""
"When you run your code, information about what the program is doing will be "
"displayed in the log viewer. By default, you'll see a message for every "
"sound you create with the exact time the sound was triggered. This is very "
"useful for debugging your code and understanding what your code is doing."
msgstr ""

#: 01.2-Exploring-the-Interface.md:71
msgid "G. Help System"
msgstr ""

#: 01.2-Exploring-the-Interface.md:73
msgid ""
"Finally, one of the most important parts of the Sonic Pi interface is the "
"help system which appears at the bottom of the window. This can be toggled "
"on and off by clicking on the blue *Help* button. The help system contains "
"help and information about all aspects of Sonic Pi including this tutorial, "
"a list of available synths, samples, examples, FX and a full list of all the "
"functions Sonic Pi provides for coding music."
msgstr ""

#: 01.3-Learning-through-Play.md:1
msgid "1.3 Learning through Play"
msgstr ""

#: 01.3-Learning-through-Play.md:3
msgid "Learning through Play"
msgstr ""

#: 01.3-Learning-through-Play.md:5
msgid ""
"Sonic Pi encourages you to learn about both computing and music through play "
"and experimentation. The most important thing is that you're having fun, and "
"before you know it you'll have accidentally learned how to code, compose and "
"perform."
msgstr ""

#: 01.3-Learning-through-Play.md:10
msgid "There are no mistakes"
msgstr ""

#: 01.3-Learning-through-Play.md:12
msgid ""
"Whilst we're on this subject, let me just give you one piece of advice I've "
"learned over my years of live coding with music - *there are no mistakes, "
"only opportunities*. This is something I've often heard in relation to jazz "
"but it works equally well with live coding. No matter how experienced you "
"are - from a complete beginner to a seasoned Algoraver, you'll run some code "
"that has a completely unexpected outcome. It might sound insanely cool - in "
"which case run with it. However, it might sound totally jarring and out of "
"place. It doesn't matter that it happened - what matters is what you do next "
"with it. Take the sound, manipulate it and morph it into something awesome. "
"The crowd will go *wild*."
msgstr ""

#: 01.3-Learning-through-Play.md:24
msgid "Start Simple"
msgstr ""

#: 01.3-Learning-through-Play.md:26
msgid ""
"When you're learning, it's tempting to want to do amazing things *now*. "
"However, just hold that thought and see it as a distant goal to reach "
"*later*. For now, instead think of the *simplest* thing you could write "
"which would be fun and rewarding that's a small step towards the amazing "
"thing you have in your head. Once you have an idea about that simple step, "
"then try and build it, play with it and then see what new ideas it gives "
"you. Before long you'll be too busy having fun and making real progress."
msgstr ""

#: 01.3-Learning-through-Play.md:35
msgid "Just make sure to share your work with others!"
msgstr ""

#: 02-Synths.md:1
msgid "2 Synths"
msgstr ""

#: 02-Synths.md:3 02.3-Switching-Synths.md:11
msgid "Synths"
msgstr ""

#: 02-Synths.md:5
msgid "OK, enough of the intros - let's get into some sound."
msgstr ""

#: 02-Synths.md:7
msgid ""
"In this section we'll cover the basics of triggering and manipulating "
"synths. Synth is short for synthesiser which is a fancy word for something "
"which creates sounds. Typically synths are quite complicated to use - "
"especially analog synths with many patch wires and modules. However, Sonic "
"Pi gives you much of that power in a very simple and approachable manner."
msgstr ""

#: 02-Synths.md:14
msgid ""
"Don't be fooled by the immediate simplicity of Sonic Pi's interface. You can "
"get very deep into very sophisticated sound manipulation if that's your "
"thing. Hold on to your hats..."
msgstr ""

#: 02.1-Your-First-Beeps.md:1
msgid "2.1 Your First Beeps"
msgstr ""

#: 02.1-Your-First-Beeps.md:3
msgid "Your First Beeps"
msgstr ""

#: 02.1-Your-First-Beeps.md:5
msgid "Take a look at the following code:"
msgstr ""

#: 02.1-Your-First-Beeps.md:7 02.4-Durations-with-Envelopes.md:49
#, no-wrap
msgid "play 70"
msgstr ""

#: 02.1-Your-First-Beeps.md:11
msgid ""
"This is where it all starts. Go ahead, copy and paste it into the code "
"window at the top of the app (the big white space under the Run button). "
"Now, press Run..."
msgstr ""

#: 02.1-Your-First-Beeps.md:15
msgid "Beep!"
msgstr ""

#: 02.1-Your-First-Beeps.md:17
msgid "Intense. Press it again. And again. *And again...*"
msgstr ""

#: 02.1-Your-First-Beeps.md:19
msgid ""
"Woah, crazy, I'm sure you could keep doing that all day. But wait, before "
"you lose yourself in an infinite stream of beeps, try changing the number:"
msgstr ""

#: 02.1-Your-First-Beeps.md:23
#, no-wrap
msgid "play 75"
msgstr ""

#: 02.1-Your-First-Beeps.md:27
msgid "Can you hear the difference? Try a lower number:"
msgstr ""

#: 02.1-Your-First-Beeps.md:29
#, no-wrap
msgid "play 60"
msgstr ""

#: 02.1-Your-First-Beeps.md:33
msgid ""
"So, lower numbers make lower pitched beeps and higher numbers make higher "
"pitched beeps. Just like on a piano, the keys at the lower part of the piano "
"(the left hand side) play lower notes and the keys on the higher part of the "
"piano (the right hand side) play higher notes. In fact, the numbers actually "
"relate to notes on the piano. `play 47` actually means play the 47th note on "
"the piano. Which means that `play 48` is one note up (the next note to the "
"right). It just so happens that the 4th octave C is number 60. Go ahead and "
"play it: `play 60`."
msgstr ""

#: 02.1-Your-First-Beeps.md:42
msgid ""
"*Don't worry* if this means nothing to you - it didn't to me when I first "
"started. All that matters right now is that you know that *low numbers make "
"lower beeps* and *high numbers make higher beeps*."
msgstr ""

#: 02.1-Your-First-Beeps.md:46 08.2-Chords.md:3
msgid "Chords"
msgstr ""

#: 02.1-Your-First-Beeps.md:48
msgid ""
"Playing a note is quite fun, but playing many at the same time can be even "
"better. Try it:"
msgstr ""

#: 02.1-Your-First-Beeps.md:51
#, no-wrap
msgid ""
"play 72\n"
"play 75\n"
"play 79"
msgstr ""

#: 02.1-Your-First-Beeps.md:57
msgid ""
"Jazzy! So, when you write multiple `play`s, they all play at the same time. "
"Try it for yourself - which numbers sound good together? Which sound "
"terrible? Experiment, explore and find out for yourself."
msgstr ""

#: 02.1-Your-First-Beeps.md:61
msgid "Melody"
msgstr ""

#: 02.1-Your-First-Beeps.md:63
msgid ""
"So, playing notes and chords is fun - but how about a melody? What if you "
"wanted to play one note after another and not at the same time? Well, that's "
"easy, you just need to `sleep` between the notes:"
msgstr ""

#: 02.1-Your-First-Beeps.md:67
#, no-wrap
msgid ""
"play 72\n"
"sleep 1\n"
"play 75\n"
"sleep 1\n"
"play 79"
msgstr ""

#: 02.1-Your-First-Beeps.md:75
msgid ""
"How lovely, a little arpeggio. So what does the `1` mean in `sleep 1`? Well "
"it means the *duration of the sleep*. It actually means sleep for one beat, "
"but for now we can think about it as sleeping for 1 second. So, what if we "
"wanted to make our arpeggio a little faster? Well, we need to use shorter "
"sleep values. What about a half i.e. `0.5`:"
msgstr ""

#: 02.1-Your-First-Beeps.md:81
#, no-wrap
msgid ""
"play 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"
msgstr ""

#: 02.1-Your-First-Beeps.md:89
msgid ""
"Notice how it plays faster. Now, try for yourself, change the times - use "
"different times and notes."
msgstr ""

#: 02.1-Your-First-Beeps.md:92
msgid ""
"One thing to try is in-between notes such as `play 52.3` and `play 52.63`. "
"There's absolutely no need to stick to standard whole notes. Play around and "
"have fun."
msgstr ""

#: 02.1-Your-First-Beeps.md:97
msgid "Traditional Note Names"
msgstr ""

#: 02.1-Your-First-Beeps.md:99
msgid ""
"For those of you that already know some musical notation (don't worry if you "
"don't - you don't need it to have fun) you might want to write a melody "
"using note names such as C and F# rather than numbers. Sonic Pi has you "
"covered. You can do the following:"
msgstr ""

#: 02.1-Your-First-Beeps.md:104
#, no-wrap
msgid ""
"play :C\n"
"sleep 0.5\n"
"play :D\n"
"sleep 0.5\n"
"play :E"
msgstr ""

#: 02.1-Your-First-Beeps.md:112
msgid ""
"Remember to put the colon `:` in front of your note name so that it goes "
"pink. Also, you can specify the octave by adding a number after the note "
"name:"
msgstr ""

#: 02.1-Your-First-Beeps.md:116
#, no-wrap
msgid ""
"play :C3\n"
"sleep 0.5\n"
"play :D3\n"
"sleep 0.5\n"
"play :E4"
msgstr ""

#: 02.1-Your-First-Beeps.md:124
msgid ""
"If you want to make a note sharp, add an `s` after the note name such as "
"`play :Fs3` and if you want to make a note flat, add a `b` such as `play :"
"Eb3`."
msgstr ""

#: 02.1-Your-First-Beeps.md:127
msgid "Now go *crazy* and have fun making your own tunes."
msgstr ""

#: 02.2-Synth-Params.md:1
msgid "2.2 Synth Options"
msgstr ""

#: 02.2-Synth-Params.md:3
msgid "Synth Options: Amp and Pan"
msgstr ""

#: 02.2-Synth-Params.md:5
msgid ""
"As well as allowing you to control which note to play or which sample to "
"trigger, Sonic Pi provides a whole range of options to craft and control the "
"sounds. We'll be covering many of these in this tutorial and there's "
"extensive documentation for each in the help system. However, for now we'll "
"introduce two of the most useful: *amplitude* and *pan*. First, let's look "
"at what options actually are."
msgstr ""

#: 02.2-Synth-Params.md:13
msgid "Options"
msgstr ""

#: 02.2-Synth-Params.md:15
msgid ""
"Sonic Pi supports the notion of options (or opts for short) for its synths. "
"Opts are controls you pass to `play` which modify and control aspects of the "
"sound you hear. Each synth has its own set of opts for finely tuning its "
"sound. However, there are common sets of opts shared by many sounds such as "
"`amp:` and envelope opts (covered in another section)."
msgstr ""

#: 02.2-Synth-Params.md:22
msgid ""
"Opts have two major parts, their name (the name of the control) and their "
"value (the value you want to set the control at). For example, you might "
"have a opt called `cheese:` and want to set it with a value of `1`."
msgstr ""

#: 02.2-Synth-Params.md:27
msgid ""
"Opts are passed to calls to `play` by using a comma `,` and then the name of "
"the opt such as `amp:` (don't forget the colon `:`) and then a space and the "
"value of the opt. For example:"
msgstr ""

#: 02.2-Synth-Params.md:31
#, no-wrap
msgid "play 50, cheese: 1"
msgstr ""

#: 02.2-Synth-Params.md:35
msgid ""
"(Note that `cheese:` isn't a valid opt, we're just using it as an example)."
msgstr ""

#: 02.2-Synth-Params.md:37
msgid "You can pass multiple opts by separating them with a comma:"
msgstr ""

#: 02.2-Synth-Params.md:39
#, no-wrap
msgid "play 50, cheese: 1, beans: 0.5"
msgstr ""

#: 02.2-Synth-Params.md:43
msgid "The order of the opts doesn't matter, so the following is identical:"
msgstr ""

#: 02.2-Synth-Params.md:45
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 1"
msgstr ""

#: 02.2-Synth-Params.md:49
msgid ""
"Opts that aren't recognised by the synth are just ignored (like `cheese` and "
"`beans` which are clearly ridiculous opt names!)"
msgstr ""

#: 02.2-Synth-Params.md:52
msgid ""
"If you accidentally use the same opt twice with different values, the last "
"one wins. For example, `beans:` here will have the value 2 rather than 0.5:"
msgstr ""

#: 02.2-Synth-Params.md:56
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 3, eggs: 0.1, beans: 2"
msgstr ""

#: 02.2-Synth-Params.md:60
msgid ""
"Many things in Sonic Pi accept opts, so just spend a little time learning "
"how to use them and you'll be set! Let's play with our first opt: `amp:`."
msgstr ""

#: 02.2-Synth-Params.md:64 02.4-Durations-with-Envelopes.md:25
msgid "Amplitude"
msgstr ""

#: 02.2-Synth-Params.md:66
msgid ""
"Amplitude is a computer representation of the loudness of a sound. A *high "
"amplitude produces a loud sound* and a *low amplitude produces a quiet "
"sound*. Just as Sonic Pi uses numbers to represent time and notes, it uses "
"numbers to represent amplitude. An amplitude of 0 is silent (you'll hear "
"nothing) whereas an amplitude of 1 is normal volume. You can even crank up "
"the amplitude higher to 2, 10, 100. However, you should note that when the "
"overall amplitude of all the sounds gets too high, Sonic Pi uses what's "
"called a compressor to squash them all to make sure things aren't too loud "
"for your ears. This can often make the sound muddy and strange. So try to "
"use low amplitudes, i.e. in the range 0 to 0.5 to avoid compression."
msgstr ""

#: 02.2-Synth-Params.md:79
msgid "Amp it up"
msgstr ""

#: 02.2-Synth-Params.md:81
msgid ""
"To change the amplitude of a sound, you can use the `amp:` opt. For example, "
"to play at half amplitude pass 0.5:"
msgstr ""

#: 02.2-Synth-Params.md:84
#, no-wrap
msgid "play 60, amp: 0.5"
msgstr ""

#: 02.2-Synth-Params.md:88
msgid "To play at double amplitude pass 2:"
msgstr ""

#: 02.2-Synth-Params.md:90
#, no-wrap
msgid "play 60, amp: 2"
msgstr ""

#: 02.2-Synth-Params.md:94
msgid ""
"The `amp:` opt only modifies the call to `play` it's associated with. So, in "
"this example, the first call to play is at half volume and the second is "
"back to the default (1):"
msgstr ""

#: 02.2-Synth-Params.md:98
#, no-wrap
msgid ""
"play 60, amp: 0.5\n"
"sleep 0.5\n"
"play 65"
msgstr ""

#: 02.2-Synth-Params.md:104
msgid "Of course, you can use different `amp:` values for each call to play:"
msgstr ""

#: 02.2-Synth-Params.md:106
#, no-wrap
msgid ""
"play 50, amp: 0.1\n"
"sleep 0.25\n"
"play 55, amp: 0.2\n"
"sleep 0.25\n"
"play 57, amp: 0.4\n"
"sleep 0.25\n"
"play 62, amp: 1"
msgstr ""

#: 02.2-Synth-Params.md:116
msgid "Panning"
msgstr ""

#: 02.2-Synth-Params.md:118
msgid ""
"Another fun opt to use is `pan:` which controls the panning of a sound in "
"stereo. Panning a sound to the left means that you hear it out of the left "
"speaker, and panning it to the right means you hear it out of your right "
"speaker. For our values, we use a -1 to represent fully left, 0 to represent "
"center and 1 to represent fully right in the stereo field. Of course, we're "
"free to use any value between -1 and 1 to control the exact positioning of "
"our sound."
msgstr ""

#: 02.2-Synth-Params.md:126
msgid "Let's play a beep out of the left speaker:"
msgstr ""

#: 02.2-Synth-Params.md:128
#, no-wrap
msgid "play 60, pan: -1"
msgstr ""

#: 02.2-Synth-Params.md:132
msgid "Now, let's play it out of the right speaker:"
msgstr ""

#: 02.2-Synth-Params.md:134
#, no-wrap
msgid "play 60, pan: 1"
msgstr ""

#: 02.2-Synth-Params.md:138
msgid ""
"Finally let's play it back out of the center of both (the default position):"
msgstr ""

#: 02.2-Synth-Params.md:141
#, no-wrap
msgid "play 60, pan: 0"
msgstr ""

#: 02.2-Synth-Params.md:145
msgid "Now, go and have fun changing the amplitude and panning of your sounds!"
msgstr ""

#: 02.3-Switching-Synths.md:1
msgid "2.3 Switching Synths"
msgstr ""

#: 02.3-Switching-Synths.md:3
msgid "Switching Synths"
msgstr ""

#: 02.3-Switching-Synths.md:5
msgid ""
"So far we've had quite a lot of fun making beeps. However, you're probably "
"starting to get bored of the basic beep noise. Is that all Sonic Pi has to "
"offer? Surely there's more to live coding than just playing beeps? Yes there "
"is, and in this section we'll explore the exciting range of sounds that "
"Sonic Pi has to offer."
msgstr ""

#: 02.3-Switching-Synths.md:13
msgid ""
"Sonic Pi has a range of instruments it calls synths which is *short for "
"synthesisers*. Whereas samples represent pre-recorded sounds, synths are "
"capable of generating new sounds depending on how you control them (which "
"we'll explore later in this tutorial). Sonic Pi's synths are very powerful "
"and expressive and you'll have a lot of fun exploring and playing with them. "
"First, let's learn how to select the current synth to use."
msgstr ""

#: 02.3-Switching-Synths.md:21
msgid "Buzzy saws and prophets"
msgstr ""

#: 02.3-Switching-Synths.md:23
msgid "A fun sound is the *saw wave* - let's give it a try:"
msgstr ""

#: 02.3-Switching-Synths.md:25
#, no-wrap
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"
msgstr ""

#: 02.3-Switching-Synths.md:35
msgid "Let's try another sound - the *prophet*:"
msgstr ""

#: 02.3-Switching-Synths.md:37
#, no-wrap
msgid ""
"use_synth :prophet\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"
msgstr ""

#: 02.3-Switching-Synths.md:47
msgid "How about combining two sounds. First one after another:"
msgstr ""

#: 02.3-Switching-Synths.md:49
#, no-wrap
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"
msgstr ""

#: 02.3-Switching-Synths.md:60
msgid "Now at the same time:"
msgstr ""

#: 02.3-Switching-Synths.md:62
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play 38\n"
"sleep 0.25\n"
"use_synth :dsaw\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"
msgstr ""

#: 02.3-Switching-Synths.md:74
msgid ""
"Notice that the `use_synth` command only affects the following calls to "
"`play`. Think of it like a *big switch* - new calls to `play` will play "
"whatever synth it's currently pointing to. You can move the switch to a new "
"synth with `use_synth`."
msgstr ""

#: 02.3-Switching-Synths.md:80
msgid "Discovering Synths"
msgstr ""

#: 02.3-Switching-Synths.md:82
msgid ""
"To see which synths Sonic Pi has for you to play with take a look at the "
"Synths option in the far left vertical menu (above Fx). There are over 20 to "
"choose from. Here are a few of my favourites:"
msgstr ""

#: 02.3-Switching-Synths.md:86
msgid "`:prophet`"
msgstr ""

#: 02.3-Switching-Synths.md:87
msgid "`:dsaw`"
msgstr ""

#: 02.3-Switching-Synths.md:88
msgid "`:fm`"
msgstr ""

#: 02.3-Switching-Synths.md:89
msgid "`:tb303`"
msgstr ""

#: 02.3-Switching-Synths.md:90
msgid "`:pulse`"
msgstr ""

#: 02.3-Switching-Synths.md:92
msgid ""
"Now play around with *switching synths during your music*. Have fun "
"combining synths to make new sounds as well as using different synths for "
"different sections of your music."
msgstr ""

#: 02.4-Durations-with-Envelopes.md:1
msgid "2.4 Duration with Envelopes"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:3
msgid "Duration with Envelopes"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:5
msgid ""
"In an earlier section, we looked at how we can use the `sleep` command to "
"control when to trigger our sounds. However, we haven't yet been able to "
"control the duration of our sounds."
msgstr ""

#: 02.4-Durations-with-Envelopes.md:9
msgid ""
"In order to give us a simple, yet powerful means of *controlling the "
"duration* of our sounds, Sonic Pi provides the notion of an *ADSR amplitude "
"envelope* (we'll cover what ADSR means later in this section). An amplitude "
"envelope offers two useful aspects of control:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:14
msgid "control over the duration of a sound"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:15
msgid "control over the amplitude of a sound"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:17
msgid "Duration"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:19
msgid ""
"The duration is the length the sound lasts for. A longer duration means that "
"you hear the sound for longer. Sonic Pi's sounds all have a controllable "
"amplitude envelope, and the total duration of that envelope is the duration "
"of the sound. Therefore, by controlling the envelope you control the "
"duration."
msgstr ""

#: 02.4-Durations-with-Envelopes.md:27
msgid ""
"The ADSR envelope not only controls duration, it also gives you *fine "
"control over the amplitude of the sound*. All audible sounds start and end "
"silent and contain some non-silent part in-between. Envelopes allow you to "
"slide and hold the amplitude of non-silent parts of the sound. It's like "
"giving someone instructions on how to turn up and down the volume of a "
"guitar amplifier. For example you might ask someone to \"start at silence, "
"slowly move up to full volume, hold it for a bit, then quickly fall back to "
"silence.\" Sonic Pi allows you to program exactly this behaviour with "
"envelopes."
msgstr ""

#: 02.4-Durations-with-Envelopes.md:37
msgid ""
"Just to recap, as we have seen before, an amplitude of 0 is silence and an "
"amplitude of 1 is normal volume."
msgstr ""

#: 02.4-Durations-with-Envelopes.md:40
msgid "Now, let us look at each of the parts of the envelopes in turn."
msgstr ""

#: 02.4-Durations-with-Envelopes.md:42
msgid "Release Phase"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:44
msgid ""
"The only part of the envelope that's used by default is the release time. "
"This is the time it takes for the synth's sound to fade out. All synths have "
"a release time of 1 which means that by default they have a duration of 1 "
"beat (which at the default BPM of 60 is 1 second):"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:53
msgid ""
"The note will be audible for 1 second. Go ahead and time it :-) This is "
"short hand for the longer more explicit version:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:56
#, no-wrap
msgid "play 70, release: 1"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:60
msgid ""
"Notice how this sounds exactly the same (the sound lasts for one second). "
"However, it's now very easy to change the duration by modifying the value of "
"the `release:` opt:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:64
#, no-wrap
msgid "play 60, release: 2"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:68
msgid ""
"We can make the synth sound for a very short amount of time by using a very "
"small release time:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:71
#, no-wrap
msgid "play 60, release: 0.2"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:75
msgid ""
"The duration of the release of the sound is called the *release phase* and "
"by default is a linear transition (i.e. a straight line). The following "
"diagram illustrates this transition:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:79
msgid "![release envelope](../images/tutorial/env-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:81
msgid ""
"The vertical line at the far left of the diagram shows that the sound starts "
"at 0 amplitude, but goes up to full amplitude immediately (this is the "
"attack phase which we'll cover next). Once at full amplitude it then moves "
"in a straight line down to zero taking the amount of time specified by "
"`release:`. *Longer release times produce longer synth fade outs.*"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:88
msgid ""
"You can therefore change the duration of your sound by changing the release "
"time. Have a play adding release times to your music."
msgstr ""

#: 02.4-Durations-with-Envelopes.md:91
msgid "Attack Phase"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:93
msgid ""
"By default, the *attack phase* is 0 for all synths which means they move "
"from 0 amplitude to 1 immediately. This gives the synth an initial "
"percussive sound. However, you may wish to fade your sound in. This can be "
"achieved with the `attack:` opt. Try fading in some sounds:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:98
#, no-wrap
msgid ""
"play 60, attack: 2\n"
"sleep 3\n"
"play 65, attack: 0.5"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:104
msgid ""
"You may use multiple opts at the same time. For example for a short attack "
"and a long release try:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:107
#, no-wrap
msgid "play 60, attack: 0.7, release: 4"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:111
msgid ""
"This short attack and long release envelope is illustrated in the following "
"diagram:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:114
msgid "![attack release envelope](../images/tutorial/env-attack-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:116
msgid ""
"Of course, you may switch things around. Try a long attack and a short "
"release:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:119
#, no-wrap
msgid "play 60, attack: 4, release: 0.7"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:123
msgid ""
"![long attack short release envelope](../images/tutorial/env-long-attack-"
"short-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:125
msgid ""
"Finally, you can also have both short attack and release times for shorter "
"sounds."
msgstr ""

#: 02.4-Durations-with-Envelopes.md:128
#, no-wrap
msgid "play 60, attack: 0.5, release: 0.5"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:132
msgid ""
"![short attack short release envelope](../images/tutorial/env-short-attack-"
"short-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:134
msgid "Sustain Phase"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:136
msgid ""
"In addition to specifying attack and release times, you may also specify a "
"sustain time to control the *sustain phase*. This is the time for which the "
"sound is maintained at full amplitude between the attack and release phases."
msgstr ""

#: 02.4-Durations-with-Envelopes.md:141
#, no-wrap
msgid "play 60, attack: 0.3, sustain: 1, release: 1"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:145
msgid "![ASR envelope](../images/tutorial/env-attack-sustain-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:147
msgid ""
"The sustain time is useful for important sounds you wish to give full "
"presence in the mix before entering an optional release phase. Of course, "
"it's totally valid to set both the `attack:` and `release:` opts to 0 and "
"just use the sustain to have absolutely no fade in or fade out to the sound. "
"However, be warned, a release of 0 can produce clicks in the audio and it's "
"often better to use a very small value such as 0.2."
msgstr ""

#: 02.4-Durations-with-Envelopes.md:154
msgid "Decay Phase"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:156
msgid ""
"For an extra level of control, you can also specify a decay time. This is a "
"phase of the envelope that fits between the attack and sustain phases and "
"specifies a time where the amplitude will drop from the `attack_level:` to "
"the `decay_level:` (which unless you explicitly set it will be set to the "
"`sustain_level:`). By default, the `decay:` opt is 0 and both the attack and "
"sustain levels are 1 so you'll need to specify them for the decay time to "
"have any effect:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:164
#, no-wrap
msgid "play 60, attack: 0.1, attack_level: 1, decay: 0.2, sustain_level: 0.4, sustain: 1, release: 0.5"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:168
msgid ""
"![ADSR envelope](../images/tutorial/env-attack-decay-sustain-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:170
msgid "Decay Level"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:172
msgid ""
"One last trick is that although the `decay_level:` opt defaults to be the "
"same value as `sustain_level:` you can explicitly set them to different "
"values for full control over the envelope. This allows you to to create "
"envelopes such as the following:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:177
#, no-wrap
msgid "play 60, attack: 0.1, attack_level: 1, decay: 0.2, decay_level: 0.3, sustain: 1, sustain_level: 0.4, release: 0.5"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:181
msgid "![ASR envelope](../images/tutorial/env-decay-level.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:183
msgid ""
"It's also possible to set the `decay_level:` to be higher than "
"`sustain_level:`:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:185
#, no-wrap
msgid "play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1, sustain: 0.5, sustain_level: 0.8, release: 1.5"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:189
msgid "![ASR envelope](../images/tutorial/env-decay-level-2.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:191
msgid "ADSR Envelopes"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:193
msgid "So to summarise, Sonic Pi's ADSR envelopes have the following phases:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:195
msgid "*attack* - time from 0 amplitude to the `attack_level`,"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:196
msgid "*decay* - time to move amplitude from `attack_level` to `decay_level`,"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:197
msgid ""
"*sustain* - time to move the amplitude from `decay_level` to `sustain_level`,"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:198
msgid "*release* - time to move amplitude from `sustain_level` to 0"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:200
msgid ""
"It's important to note that the duration of a sound is the summation of the "
"times of each of these phases. Therefore the following sound will have a "
"duration of 0.5 + 1 + 2 + 0.5 = 4 beats:"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:204
#, no-wrap
msgid "play 60, attack: 0.5, attack_level: 1, decay: 1, sustain_level: 0.4, sustain: 2, release: 0.5"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:208
msgid "Now go and have a play adding envelopes to your sounds..."
msgstr ""

#: 03-Samples.md:1
msgid "3 Samples"
msgstr ""

#: 03-Samples.md:3
msgid "Samples"
msgstr ""

#: 03-Samples.md:5
msgid ""
"Another great way to develop your music is to use pre-recorded sounds. In "
"great hip-hop tradition, we call these pre-recorded sounds *samples*. So, if "
"you take a microphone outside, go and record the gentle sound of rain "
"hitting canvas, you've just created a sample."
msgstr ""

#: 03-Samples.md:10
msgid ""
"Sonic Pi lets you do lots of fun things with samples. Not only does it ship "
"with over 90 public domain samples ready for you to jam with, it lets you "
"play and manipulate your own. Let's get to it..."
msgstr ""

#: 03.1-Triggering-Samples.md:1
msgid "3.1 Triggering Samples"
msgstr ""

#: 03.1-Triggering-Samples.md:3
msgid "Triggering Samples"
msgstr ""

#: 03.1-Triggering-Samples.md:5
msgid ""
"Playing beeps is only the beginning. Something that's a lot of fun is "
"triggering pre-recorded samples. Try it:"
msgstr ""

#: 03.1-Triggering-Samples.md:8
#, no-wrap
msgid "sample :ambi_lunar_land"
msgstr ""

#: 03.1-Triggering-Samples.md:12
msgid ""
"Sonic Pi includes many samples for you to play with. You can use them just "
"like you use the `play` command. To play multiple samples and notes just "
"write them one after another:"
msgstr ""

#: 03.1-Triggering-Samples.md:16
#, no-wrap
msgid ""
"play 36\n"
"play 48\n"
"sample :ambi_lunar_land\n"
"sample :ambi_drone"
msgstr ""

#: 03.1-Triggering-Samples.md:23
msgid "If you want to space them out in time, use the `sleep` command:"
msgstr ""

#: 03.1-Triggering-Samples.md:25
#, no-wrap
msgid ""
"sample :ambi_lunar_land\n"
"sleep 1\n"
"play 48\n"
"sleep 0.5\n"
"play 36\n"
"sample :ambi_drone\n"
"sleep 1\n"
"play 36"
msgstr ""

#: 03.1-Triggering-Samples.md:36
msgid ""
"Notice how Sonic Pi doesn't wait for a sound to finish before starting the "
"next sound. The `sleep` command only describes the separation of the "
"*triggering* of the sounds. This allows you to easily layer sounds together "
"creating interesting overlap effects. Later in this tutorial we'll take a "
"look at controlling the *duration* of sounds with envelopes."
msgstr ""

#: 03.1-Triggering-Samples.md:44
msgid "Discovering Samples"
msgstr ""

#: 03.1-Triggering-Samples.md:46
msgid ""
"There are two ways to discover the range of samples provided in Sonic Pi. "
"First, you can use this help system. Click on Samples in the far left "
"vertical menu, choose your category and then you'll see a list of available "
"sounds."
msgstr ""

#: 03.1-Triggering-Samples.md:51
msgid ""
"Alternatively you can use the *auto-completion system*. Simply type the "
"start of a sample group such as: `sample :ambi_` and you'll see a drop-down "
"of sample names appear for you to select. Try the following category "
"prefixes:"
msgstr ""

#: 03.1-Triggering-Samples.md:56
msgid "`:ambi_`"
msgstr ""

#: 03.1-Triggering-Samples.md:57
msgid "`:bass_`"
msgstr ""

#: 03.1-Triggering-Samples.md:58
msgid "`:elec_`"
msgstr ""

#: 03.1-Triggering-Samples.md:59
msgid "`:perc_`"
msgstr ""

#: 03.1-Triggering-Samples.md:60
msgid "`:guit_`"
msgstr ""

#: 03.1-Triggering-Samples.md:61
msgid "`:drum_`"
msgstr ""

#: 03.1-Triggering-Samples.md:62
msgid "`:misc_`"
msgstr ""

#: 03.1-Triggering-Samples.md:63
msgid "`:bd_`"
msgstr ""

#: 03.1-Triggering-Samples.md:65
msgid "Now start mixing samples into your compositions!"
msgstr ""

#: 03.2-Sample-Params.md:1
msgid "3.2 Sample Parameters"
msgstr ""

#: 03.2-Sample-Params.md:3
msgid "Sample Parameters: Amp and Pan"
msgstr ""

#: 03.2-Sample-Params.md:5
msgid ""
"As we saw with synths, we can easily control our sounds with parameters. "
"Samples support exactly the same parameterisation mechanism. Let's revisit "
"our friends `amp:` and `pan:`."
msgstr ""

#: 03.2-Sample-Params.md:9
msgid "Amping samples"
msgstr ""

#: 03.2-Sample-Params.md:11
msgid ""
"You can change the amplitude of samples with exactly the same approach you "
"used for synths:"
msgstr ""

#: 03.2-Sample-Params.md:14
#, no-wrap
msgid "sample :ambi_lunar_land, amp: 0.5"
msgstr ""

#: 03.2-Sample-Params.md:18
msgid "Panning samples"
msgstr ""

#: 03.2-Sample-Params.md:20
msgid ""
"We're also able to use the `pan:` parameter on samples. For example, here's "
"how we'd play the amen break in the left ear and then half way through play "
"it again through the right ear:"
msgstr ""

#: 03.2-Sample-Params.md:24
#, no-wrap
msgid ""
"sample :loop_amen, pan: -1\n"
"sleep 0.877\n"
"sample :loop_amen, pan: 1"
msgstr ""

#: 03.2-Sample-Params.md:30
msgid ""
"Note that 0.877 is half the duration of the `:loop_amen` sample in seconds."
msgstr ""

#: 03.2-Sample-Params.md:33
msgid ""
"Finally, note that if you set some synth defaults with `use_synth_defaults` "
"(which we will discuss later), these will be ignored by `sample`."
msgstr ""

#: 03.3-Stretching-Samples.md:1
msgid "3.3 Stretching Samples"
msgstr ""

#: 03.3-Stretching-Samples.md:3
msgid "Stretching Samples"
msgstr ""

#: 03.3-Stretching-Samples.md:5
msgid ""
"Now that we can play a variety of synths and samples to create some music, "
"it's time to learn how to modify both the synths and samples to make the "
"music even more unique and interesting. First, let's explore the ability to "
"*stretch* and *squash* samples."
msgstr ""

#: 03.3-Stretching-Samples.md:10
msgid "Sample Representation"
msgstr ""

#: 03.3-Stretching-Samples.md:12
msgid ""
"Samples are pre-recorded sounds stored as numbers which represent how to "
"move the speaker cone to reproduce the sound. The speaker cone can move in "
"and out, and so the numbers just need to represent how far in and out the "
"cone needs to be for each moment in time. To be able to faithfully reproduce "
"a recorded sound the sample typically needs to store many thousands of "
"numbers per second! Sonic Pi takes this list of numbers and feeds them at "
"the right speed to move your computer's speaker in and out in just the right "
"way to reproduce the sound. However, it's also fun to change the speed with "
"which the numbers are fed to the speaker to change the sound."
msgstr ""

#: 03.3-Stretching-Samples.md:23
msgid "Changing Rate"
msgstr ""

#: 03.3-Stretching-Samples.md:25
msgid ""
"Let's play with one of the ambient sounds: `:ambi_choir`. To play it with "
"the default rate, you can pass a `rate:` opt to `sample`:"
msgstr ""

#: 03.3-Stretching-Samples.md:28
#, no-wrap
msgid "sample :ambi_choir, rate: 1"
msgstr ""

#: 03.3-Stretching-Samples.md:32
msgid ""
"This plays it at normal rate (1), so nothing special yet. However, we're "
"free to change that number to something else. How about `0.5`:"
msgstr ""

#: 03.3-Stretching-Samples.md:35
#, no-wrap
msgid "sample :ambi_choir, rate: 0.5"
msgstr ""

#: 03.3-Stretching-Samples.md:39
msgid ""
"Woah! What's going on here? Well, two things. Firstly, the sample takes "
"twice as long to play, secondly the sound is an octave lower. Let's explore "
"these things in a little more detail."
msgstr ""

#: 03.3-Stretching-Samples.md:43
msgid "Let's stretch"
msgstr ""

#: 03.3-Stretching-Samples.md:45
msgid ""
"A sample that's fun to stretch and compress is the Amen Break. At normal "
"rate, we might imagine throwing it into a *drum 'n' bass* track:"
msgstr ""

#: 03.3-Stretching-Samples.md:48 03.4-Enveloped-Samples.md:17
#: 03.5-Partial-Samples.md:9 A.03-coded-beats.md:33 A.12-sample-slicing.md:22
#, no-wrap
msgid "sample :loop_amen"
msgstr ""

#: 03.3-Stretching-Samples.md:52
msgid ""
"However by changing the rate we can switch up genres. Try half speed for "
"*old school hip-hop*:"
msgstr ""

#: 03.3-Stretching-Samples.md:55 03.5-Partial-Samples.md:16
#, no-wrap
msgid "sample :loop_amen, rate: 0.5"
msgstr ""

#: 03.3-Stretching-Samples.md:59
msgid "If we speed it up, we enter *jungle* territory:"
msgstr ""

#: 03.3-Stretching-Samples.md:61
#, no-wrap
msgid "sample :loop_amen, rate: 1.5"
msgstr ""

#: 03.3-Stretching-Samples.md:65
msgid ""
"Now for our final party trick - let's see what happens if we use a negative "
"rate:"
msgstr ""

#: 03.3-Stretching-Samples.md:68
#, no-wrap
msgid "sample :loop_amen, rate: -1"
msgstr ""

#: 03.3-Stretching-Samples.md:72
msgid ""
"Woah! It plays it *backwards*! Now try playing with lots of different "
"samples at different rates. Try very fast rates. Try crazy slow rates. See "
"what interesting sounds you can produce."
msgstr ""

#: 03.3-Stretching-Samples.md:76
msgid "A Simple Explanation of Sample Rate"
msgstr ""

#: 03.3-Stretching-Samples.md:78
msgid ""
"A useful way to think of samples is as springs. Playback rate is like "
"squashing and stretching the spring. If you play the sample at rate 2, "
"you're *squashing the spring* to half its normal length. The sample "
"therefore takes half the amount of time to play as it's shorter. If you play "
"the sample at half rate, you're *stretching the spring* to double its "
"length. The sample therefore takes twice the amount of time to play as it's "
"longer. The more you squash (higher rate), the shorter it gets, the more you "
"stretch (lower rate), the longer it gets."
msgstr ""

#: 03.3-Stretching-Samples.md:87
msgid ""
"Compressing a spring increases its density (the number of coils per cm) - "
"this is similar to the sample sounding *higher pitched*. Stretching the "
"spring decreases its density and is similar to the sound having a *lower "
"pitch*."
msgstr ""

#: 03.3-Stretching-Samples.md:93
msgid "The Maths Behind Sample Rate"
msgstr ""

#: 03.3-Stretching-Samples.md:95
msgid ""
"(This section is provided for those that are interested in the details. "
"Please feel free to skip it...)"
msgstr ""

#: 03.3-Stretching-Samples.md:98
msgid ""
"As we saw above, a sample is represented by a big long list of numbers "
"representing where the speaker should be through time. We can take this list "
"of numbers and use it to draw a graph which would look similar to this:"
msgstr ""

#: 03.3-Stretching-Samples.md:103
msgid "![sample graph](../images/tutorial/sample.png)"
msgstr ""

#: 03.3-Stretching-Samples.md:105
msgid ""
"You might have seen pictures like this before. It's called the *waveform* of "
"a sample. It's just a graph of numbers. Typically a waveform like this will "
"have 44100 points of data per second (this is due to the Nyquist-Shannon "
"sampling theorem). So, if the sample lasts for 2 seconds, the waveform will "
"be represented by 88200 numbers which we would feed to the speaker at a rate "
"of 44100 points per second. Of course, we could feed it at double rate which "
"would be 88200 points per second. This would therefore take only 1 second to "
"play back. We could also play it back at half rate which would be 22050 "
"points per second taking 4 seconds to play back."
msgstr ""

#: 03.3-Stretching-Samples.md:116
msgid "The duration of the sample is affected by the playback rate:"
msgstr ""

#: 03.3-Stretching-Samples.md:118
msgid "Doubling the playback rate halves the playback time,"
msgstr ""

#: 03.3-Stretching-Samples.md:119
msgid "Halving the playback rate doubles the playback time,"
msgstr ""

#: 03.3-Stretching-Samples.md:120
msgid "Using a playback rate of one fourth quadruples the playback time,"
msgstr ""

#: 03.3-Stretching-Samples.md:121
msgid "Using a playback rate of 1/10 makes playback last 10 times longer."
msgstr ""

#: 03.3-Stretching-Samples.md:123
msgid "We can represent this with the formula:"
msgstr ""

#: 03.3-Stretching-Samples.md:125
#, no-wrap
msgid "new_sample_duration = (1 / rate) * sample_duration "
msgstr ""

#: 03.3-Stretching-Samples.md:129
msgid ""
"Changing the playback rate also affects the pitch of the sample. The "
"frequency or pitch of a waveform is determined by how fast it moves up and "
"down. Our brains somehow turn fast movement of speakers into high notes and "
"slow movement of speakers into low notes. This is why you can sometimes even "
"see a big bass speaker move as it pumps out super low bass - it's actually "
"moving a lot slower in and out than a speaker producing higher notes."
msgstr ""

#: 03.3-Stretching-Samples.md:137
msgid ""
"If you take a waveform and squash it it will move up and down more times per "
"second. This will make it sound higher pitched. It turns out that doubling "
"the amount of up and down movements (oscillations) doubles the frequency. "
"So, *playing your sample at double rate will double the frequency you hear "
"it*. Also, *halving the rate will halve the frequency*. Other rates will "
"affect the frequency accordingly."
msgstr ""

#: 03.4-Enveloped-Samples.md:1
msgid "3.4 Enveloped Samples"
msgstr ""

#: 03.4-Enveloped-Samples.md:3
msgid "Enveloped Samples"
msgstr ""

#: 03.4-Enveloped-Samples.md:5
msgid ""
"It is also possible to modify the *duration* and *amplitude* of a sample "
"using an ADSR envelope. However, this works slightly differently to the ADSR "
"envelope available on synths. Sample envelopes only allow you to reduce the "
"amplitude and duration of a sample - and never to increase it. The sample "
"will stop when either the sample has finished playing or the envelope has "
"completed - whichever is first. So, if you use a very long `release:`, it "
"won't extend the duration of the sample."
msgstr ""

#: 03.4-Enveloped-Samples.md:13
msgid "Amen Envelopes"
msgstr ""

#: 03.4-Enveloped-Samples.md:15
msgid "Let's return to our trusty friend the Amen Break:"
msgstr ""

#: 03.4-Enveloped-Samples.md:21
msgid ""
"With no opts, we hear the full sample at full amplitude. If we want to fade "
"this in over 1 second we can use the `attack:` param:"
msgstr ""

#: 03.4-Enveloped-Samples.md:24
#, no-wrap
msgid "sample :loop_amen, attack: 1"
msgstr ""

#: 03.4-Enveloped-Samples.md:28
msgid "For a shorter fade in, choose a shorter attack value:"
msgstr ""

#: 03.4-Enveloped-Samples.md:30
#, no-wrap
msgid "sample :loop_amen, attack: 0.3"
msgstr ""

#: 03.4-Enveloped-Samples.md:34
msgid "Auto Sustain"
msgstr ""

#: 03.4-Enveloped-Samples.md:36
msgid ""
"Where the ADSR envelope's behaviour differs from the standard synth envelope "
"is in the *sustain* value. In the standard synth envelope, the sustain "
"defaulted to 0 unless you set it manually. With samples, the sustain value "
"defaults to an *automagical* value - the time left to play the rest of the "
"sample. This is why we hear the full sample when we pass no defaults. If the "
"attack, decay, sustain and release values were all 0 we'd never hear a peep. "
"Sonic Pi therefore calculates how long the sample is, deducts any attack, "
"decay and release times and uses the result as your sustain time. If the "
"attack, decay and release values add up to more than the duration of the "
"sample, the sustain is simply set to 0."
msgstr ""

#: 03.4-Enveloped-Samples.md:48
msgid "Fade Outs"
msgstr ""

#: 03.4-Enveloped-Samples.md:50
msgid ""
"To explore this, let's consider our Amen break in more detail. If we ask "
"Sonic Pi how long the sample is:"
msgstr ""

#: 03.4-Enveloped-Samples.md:53
#, no-wrap
msgid "print sample_duration :loop_amen"
msgstr ""

#: 03.4-Enveloped-Samples.md:57
msgid ""
"It will print out `1.753310657596372` which is the length of the sample in "
"seconds. Let's just round that to `1.75` for convenience here. Now, if we "
"set the release to `0.75`, something surprising will happen:"
msgstr ""

#: 03.4-Enveloped-Samples.md:61
#, no-wrap
msgid "sample :loop_amen, release: 0.75"
msgstr ""

#: 03.4-Enveloped-Samples.md:65
msgid ""
"It will play the first second of the sample at full amplitude before then "
"fading out over a period of 0.75 seconds. This is the *auto sustain* in "
"action. By default, the release always works from the end of the sample. If "
"our sample was 10.75 seconds long, it would play the first 10 seconds at "
"full amplitude before fading out over 0.75s."
msgstr ""

#: 03.4-Enveloped-Samples.md:71
msgid "Remember: by default, `release:` fades out at the end of a sample."
msgstr ""

#: 03.4-Enveloped-Samples.md:73
msgid "Fade In and Out"
msgstr ""

#: 03.4-Enveloped-Samples.md:75
msgid ""
"We can use both `attack:` and `release:` together with the auto sustain "
"behaviour to fade both in and out over the duration of the sample:"
msgstr ""

#: 03.4-Enveloped-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, attack: 0.75, release: 0.75"
msgstr ""

#: 03.4-Enveloped-Samples.md:82
msgid ""
"As the full duration of the sample is 1.75s and our attack and release "
"phases add up to 1.5s, the sustain is automatically set to 0.25s. This "
"allows us to easily fade the sample in and out."
msgstr ""

#: 03.4-Enveloped-Samples.md:86
msgid "Explicit sustain"
msgstr ""

#: 03.4-Enveloped-Samples.md:88
msgid ""
"We can easily get back to our normal synth ADSR behaviour by manually "
"setting `sustain:` to a value such as 0:"
msgstr ""

#: 03.4-Enveloped-Samples.md:91
#, no-wrap
msgid "sample :loop_amen, sustain: 0, release: 0.75"
msgstr ""

#: 03.4-Enveloped-Samples.md:95
msgid ""
"Now, our sample only plays for 0.75 seconds in total. With the default for "
"`attack:` and `decay:` at 0, the sample jumps straight to full amplitude, "
"sustains there for 0s then releases back down to 0 amplitude over the "
"release period - 0.75s."
msgstr ""

#: 03.4-Enveloped-Samples.md:100
msgid "Percussive cymbals"
msgstr ""

#: 03.4-Enveloped-Samples.md:102
msgid ""
"We can use this behaviour to good effect to turn longer sounding samples "
"into shorter, more percussive versions. Consider the sample `:"
"drum_cymbal_open`:"
msgstr ""

#: 03.4-Enveloped-Samples.md:106
#, no-wrap
msgid "sample :drum_cymbal_open"
msgstr ""

#: 03.4-Enveloped-Samples.md:110
msgid ""
"You can hear the cymbal sound ringing out over a period of time. However, we "
"can use our envelope to make it more percussive:"
msgstr ""

#: 03.4-Enveloped-Samples.md:113
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0, release: 0.1"
msgstr ""

#: 03.4-Enveloped-Samples.md:117
msgid ""
"You can then emulate hitting the cymbal and then dampening it by increasing "
"the sustain period:"
msgstr ""

#: 03.4-Enveloped-Samples.md:120
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1"
msgstr ""

#: 03.4-Enveloped-Samples.md:124
msgid ""
"Now go and have fun putting envelopes over the samples. Try changing the "
"rate too for really interesting results."
msgstr ""

#: 03.5-Partial-Samples.md:1
msgid "3.5 Partial Samples"
msgstr ""

#: 03.5-Partial-Samples.md:3
msgid "Partial Samples"
msgstr ""

#: 03.5-Partial-Samples.md:5
msgid ""
"This section will conclude our exploration of Sonic Pi's sample player. "
"Let's do a quick recap. So far we've looked at how we can trigger samples:"
msgstr ""

#: 03.5-Partial-Samples.md:13
msgid ""
"We then looked at how we can change the rate of samples such as playing them "
"at half speed:"
msgstr ""

#: 03.5-Partial-Samples.md:20
msgid ""
"Next, we looked at how we could fade a sample in (let's do it at half speed):"
msgstr ""

#: 03.5-Partial-Samples.md:23
#, no-wrap
msgid "sample :loop_amen, rate: 0.5, attack: 1"
msgstr ""

#: 03.5-Partial-Samples.md:27
msgid ""
"We also looked at how we could use the start of a sample percussively by "
"giving `sustain:` an explicit value and setting both the attack and release "
"to be short values:"
msgstr ""

#: 03.5-Partial-Samples.md:31
#, no-wrap
msgid "sample :loop_amen, rate: 2, attack: 0.01, sustain: 0, release: 0.35"
msgstr ""

#: 03.5-Partial-Samples.md:35
msgid ""
"However, wouldn't it be nice if we didn't have to always start at the "
"beginning of the sample? Wouldn't it also be nice if we didn't have to "
"always finish at the end of the sample?"
msgstr ""

#: 03.5-Partial-Samples.md:39
msgid "Choosing a starting point"
msgstr ""

#: 03.5-Partial-Samples.md:41
msgid ""
"It is possible to choose an arbitrary starting point in the sample as a "
"value between 0 and 1 where 0 is the start of the sample, 1 is the end and "
"0.5 is half way through the sample. Let's try playing only the last half of "
"the amen break:"
msgstr ""

#: 03.5-Partial-Samples.md:46
#, no-wrap
msgid "sample :loop_amen, start: 0.5"
msgstr ""

#: 03.5-Partial-Samples.md:50
msgid "How about the last quarter of the sample:"
msgstr ""

#: 03.5-Partial-Samples.md:52
#, no-wrap
msgid "sample :loop_amen, start: 0.75"
msgstr ""

#: 03.5-Partial-Samples.md:56
msgid "Choosing a finish point"
msgstr ""

#: 03.5-Partial-Samples.md:58
msgid ""
"Similarly, it is possible to choose an arbitrary finish point in the sample "
"as a value between 0 and 1. Let's finish the amen break half way through:"
msgstr ""

#: 03.5-Partial-Samples.md:62 A.12-sample-slicing.md:62
#, no-wrap
msgid "sample :loop_amen, finish: 0.5"
msgstr ""

#: 03.5-Partial-Samples.md:66
msgid "Specifying start and finish"
msgstr ""

#: 03.5-Partial-Samples.md:68
msgid ""
"Of course, we can combine these two to play arbitrary segments of the audio "
"file. How about only a small section in the middle:"
msgstr ""

#: 03.5-Partial-Samples.md:71
#, no-wrap
msgid "sample :loop_amen, start: 0.4, finish: 0.6"
msgstr ""

#: 03.5-Partial-Samples.md:75
msgid "What happens if we choose a start position after the finish position?"
msgstr ""

#: 03.5-Partial-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, start: 0.6, finish: 0.4"
msgstr ""

#: 03.5-Partial-Samples.md:82
msgid "Cool! It plays it backwards!"
msgstr ""

#: 03.5-Partial-Samples.md:84
msgid "Combining with rate"
msgstr ""

#: 03.5-Partial-Samples.md:86
msgid ""
"We can combine this new ability to play arbitrary segments of audio with our "
"friend `rate:`. For example, we can play a very small section of the middle "
"of the amen break very slowly:"
msgstr ""

#: 03.5-Partial-Samples.md:90
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2"
msgstr ""

#: 03.5-Partial-Samples.md:94
msgid "Combining with envelopes"
msgstr ""

#: 03.5-Partial-Samples.md:96
msgid ""
"Finally, we can combine all of this with our ADSR envelopes to produce "
"interesting results:"
msgstr ""

#: 03.5-Partial-Samples.md:99
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: 1"
msgstr ""

#: 03.5-Partial-Samples.md:103
msgid "Now go and have a play mashing up samples with all of this fun stuff..."
msgstr ""

#: 03.6-External-Samples.md:1
msgid "3.6 External Samples"
msgstr ""

#: 03.6-External-Samples.md:3
msgid "External Samples"
msgstr ""

#: 03.6-External-Samples.md:5
msgid ""
"Whilst the built-in samples can get you up and started quickly, you might "
"wish to experiment with other recorded sounds in your music. Sonic Pi "
"totally supports this. First though, let's have a quick discussion on the "
"portability of your piece."
msgstr ""

#: 03.6-External-Samples.md:10
msgid "Portability"
msgstr ""

#: 03.6-External-Samples.md:12
msgid ""
"When you compose your piece purely with built-in synths and samples, the "
"code is all you need to faithfully reproduce your music. Think about that "
"for a moment - that's amazing! A simple piece of text you can email around "
"or stick in a [Gist](https://gist.github.com) represents everything you need "
"to reproduce your sounds. That makes it *really easy to share* with your "
"friends as they just need to get hold of the code."
msgstr ""

#: 03.6-External-Samples.md:19
msgid ""
"However, if you start using your own pre-recorded samples, you lose this "
"portability. This is because to reproduce your music other people not only "
"need your code, they need your samples too. This limits the ability for "
"others to manipulate, mash-up and experiment with your work. Of course this "
"shouldn't stop you from using your own samples, it's just something to "
"consider."
msgstr ""

#: 03.6-External-Samples.md:26
msgid "Local Samples"
msgstr ""

#: 03.6-External-Samples.md:28
msgid ""
"So how do you play any arbitrary WAV, AIFF or FLAC file on your computer? "
"All you need to do is pass the path of that file to `sample`:"
msgstr ""

#: 03.6-External-Samples.md:31
#, no-wrap
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""
msgstr ""

#: 03.6-External-Samples.md:38
msgid ""
"Sonic Pi will automatically load and play the sample. You can also pass all "
"the standard params you're used to passing `sample`:"
msgstr ""

#: 03.6-External-Samples.md:41
#, no-wrap
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3"
msgstr ""

#: 03.7-Sample-Packs.md:1
msgid "3.7 Sample Packs"
msgstr ""

#: 03.7-Sample-Packs.md:3
msgid "Sample Packs"
msgstr ""

#: 03.7-Sample-Packs.md:5
msgid ""
"**Note: this section of the tutorial covers the advanced topic of working "
"with large directories of your own samples. This will be the case if you've "
"downloaded or bought your own sample packs and wish to use them within Sonic "
"Pi.**"
msgstr ""

#: 03.7-Sample-Packs.md:10
msgid ""
"**Feel free to skip this if you're happy working with the built-in samples.**"
msgstr ""

#: 03.7-Sample-Packs.md:13
msgid ""
"When working with large folders of external samples it can be cumbersome to "
"have to type the whole path every time to trigger an individual sample."
msgstr ""

#: 03.7-Sample-Packs.md:17
msgid "For example, say you have the following folder on your machine:"
msgstr ""

#: 03.7-Sample-Packs.md:19
#, no-wrap
msgid "/path/to/my/samples/"
msgstr ""

#: 03.7-Sample-Packs.md:23
msgid "When we look inside that folder we find the following samples:"
msgstr ""

#: 03.7-Sample-Packs.md:25 03.7-Sample-Packs.md:86
msgid "`100_A#_melody1.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:26 03.7-Sample-Packs.md:87
msgid "`100_A#_melody2.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:27 03.7-Sample-Packs.md:88
msgid "`100_A#_melody3.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:28 03.7-Sample-Packs.md:89
msgid "`120_A#_melody4.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:29 03.7-Sample-Packs.md:90
msgid "`120_Bb_guit1.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:30 03.7-Sample-Packs.md:91
msgid "`120_Bb_piano1.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:32
msgid "Typically in order to play the piano sample we can use the full path:"
msgstr ""

#: 03.7-Sample-Packs.md:34
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_piano1.wav\""
msgstr ""

#: 03.7-Sample-Packs.md:38
msgid "If we want to then play the guitar sample we can use its full path too:"
msgstr ""

#: 03.7-Sample-Packs.md:40
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_guit.wav\""
msgstr ""

#: 03.7-Sample-Packs.md:44
msgid ""
"However, both of these calls to sample requires us to *know* the names of "
"the samples within our directory. What if we just want to listen to each "
"sample in turn quickly?"
msgstr ""

#: 03.7-Sample-Packs.md:48
msgid "Indexing Sample Packs"
msgstr ""

#: 03.7-Sample-Packs.md:50
msgid ""
"If we want to play the first sample in a directory we just need to pass the "
"directory's name to `sample` and the index `0` as follows:"
msgstr ""

#: 03.7-Sample-Packs.md:53
#, no-wrap
msgid "sample \"/path/to/my/samples/\", 0"
msgstr ""

#: 03.7-Sample-Packs.md:57
msgid "We can even make a shortcut to our directory path using a variable:"
msgstr ""

#: 03.7-Sample-Packs.md:59
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 0"
msgstr ""

#: 03.7-Sample-Packs.md:64
msgid ""
"Now, if we want to play the second sample in our directory, we just need to "
"add 1 to our index:"
msgstr ""

#: 03.7-Sample-Packs.md:67
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 1"
msgstr ""

#: 03.7-Sample-Packs.md:72
msgid ""
"Notice that we no longer need to know the names of the samples in the "
"directory - we just need to know the directory itself (or have a shortcut to "
"it). If we ask for an index which is larger than the number of samples, it "
"simply wraps round just like Rings. Therefore, whatever number we use we're "
"guaranteed to get one of the samples in that directory."
msgstr ""

#: 03.7-Sample-Packs.md:79
msgid "Filtering Sample Packs"
msgstr ""

#: 03.7-Sample-Packs.md:81
msgid ""
"Usually indexing is enough, but sometimes we need more power to sort and "
"organise our samples. Luckily many sample packs add useful information in "
"the filenames. Let's take another look at the sample file names in our "
"directory:"
msgstr ""

#: 03.7-Sample-Packs.md:93
msgid ""
"Notice that in these filenames we have quite a bit of information. Firstly, "
"we have the BPM of the sample (beats per minute) at the start. So, the piano "
"sample is at 120 BPM and our first three melodies are at 100 BPM. Also, our "
"sample names contain the key. So the guitar sample is in Bb and the melodies "
"are in A#. This information is very useful for mixing in these samples with "
"our other code. For example, we know we can only play the piano sample with "
"code that's in 120 BPM and in the key of Bb."
msgstr ""

#: 03.7-Sample-Packs.md:102
msgid ""
"It turns out that we can use this particular naming convention of our sample "
"sets in the code to help us filter out the ones we want. For example, if "
"we're working at 120 BPM, we can filter down to all the samples that contain "
"the string `\"120\"` with the following:"
msgstr ""

#: 03.7-Sample-Packs.md:107
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\""
msgstr ""

#: 03.7-Sample-Packs.md:112
msgid ""
"This will play us the first match. If we want the second match we just need "
"to use the index:"
msgstr ""

#: 03.7-Sample-Packs.md:115
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", 1"
msgstr ""

#: 03.7-Sample-Packs.md:120
msgid ""
"We can even use multiple filters at the same time. For example, if we want a "
"sample whose filename contains both the substrings \"120\" and \"A#\" we can "
"find it easily with the following code:"
msgstr ""

#: 03.7-Sample-Packs.md:124
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"A#\""
msgstr ""

#: 03.7-Sample-Packs.md:129
msgid ""
"Finally, we're still free to add our usual opts to the call to `sample`:"
msgstr ""

#: 03.7-Sample-Packs.md:131
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"Bb\", 1, lpf: 70, amp: 2"
msgstr ""

#: 03.7-Sample-Packs.md:136
msgid "Sources"
msgstr ""

#: 03.7-Sample-Packs.md:138
msgid ""
"The sample filter pre-arg system understands two types of information: "
"sources and filters. Sources are information used to create the list of "
"potential candidates. A source can take two forms:"
msgstr ""

#: 03.7-Sample-Packs.md:142
msgid ""
"\"/path/to/samples\" - a string representing a valid path to a directory"
msgstr ""

#: 03.7-Sample-Packs.md:143
msgid ""
"\"/path/to/samples/foo.wav\" - a string representing a valid path to a sample"
msgstr ""

#: 03.7-Sample-Packs.md:145
msgid ""
"The `sample` fn will first gather all sources and use them to create a large "
"list of candidates. This list is constructed by first adding all valid paths "
"and then by adding all the valid `.flac`, `.aif`, `.aiff`, `.wav`, `.wave` "
"files contained within the directories."
msgstr ""

#: 03.7-Sample-Packs.md:150
msgid "For example, take a look at the following code:"
msgstr ""

#: 03.7-Sample-Packs.md:152
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"samps2 = \"/path/to/my/samples2/\"\n"
"path = \"/path/to/my/samples3/foo.wav\"\n"
"sample samps, samps2, path, 0"
msgstr ""

#: 03.7-Sample-Packs.md:160
msgid ""
"Here, we're combining the contents of the samples within two directories and "
"adding a specific sample. If `\"/path/to/my/samples/\"` contained 3 samples "
"and `\"/path/to/my/samples2/\"` contained 12, we'd have 16 potential samples "
"to index and filter (3 + 12 + 1)."
msgstr ""

#: 03.7-Sample-Packs.md:165
msgid ""
"By default, only the sample files within a directory are gathered into the "
"candidate list. Sometimes you might have a number of nested folders of "
"samples you wish to search and filter within. You can therefore do a "
"recursive search for all samples within all subfolders of a particular "
"folder by adding `**` to the end of the path:"
msgstr ""

#: 03.7-Sample-Packs.md:171
#, no-wrap
msgid ""
"samps = \"/path/to/nested/samples/**\"\n"
"sample samps, 0"
msgstr ""

#: 03.7-Sample-Packs.md:176
msgid ""
"Take care though as searching through a very large set of folders may take a "
"long time. However, the contents of all folder sources are cached, so the "
"delay will only happen the first time."
msgstr ""

#: 03.7-Sample-Packs.md:180
msgid ""
"Finally, note that the sources *must go first*. If no source is given, then "
"the set of built-in samples will be selected as the default list of "
"candidates to work with."
msgstr ""

#: 03.7-Sample-Packs.md:184
msgid "Filters"
msgstr ""

#: 03.7-Sample-Packs.md:186
msgid ""
"Once you have a list of candidates you may use the following filtering types "
"to further reduce the selection:"
msgstr ""

#: 03.7-Sample-Packs.md:189
msgid ""
"`\"foo\"` Strings will filter on substring occurrence within file name "
"(minus directory path and extension)."
msgstr ""

#: 03.7-Sample-Packs.md:190
msgid ""
"`/fo[oO]/` Regular Expressions will filter on pattern matching of file name "
"(minus directory path and extension)."
msgstr ""

#: 03.7-Sample-Packs.md:191
msgid ""
"`:foo` - Keywords will filter candidates on whether the keyword is a direct "
"match of the filename (minus directory path and extension)."
msgstr ""

#: 03.7-Sample-Packs.md:192
msgid ""
"`lambda{|a| ... }` - Procs with one argument will be treated as a candidate "
"filter or generator function. It will be passed the list of current "
"candidates and must return a new list of candidates (a list of valid paths "
"to sample files)."
msgstr ""

#: 03.7-Sample-Packs.md:193
msgid ""
"`1` - Numbers will select the candidate with that index (wrapping round like "
"a ring if necessary)."
msgstr ""

#: 03.7-Sample-Packs.md:195
msgid ""
"For example, we can filter over all the samples in a directory containing "
"the string `\"foo\"` and play the first matching sample at half speed:"
msgstr ""

#: 03.7-Sample-Packs.md:199
#, no-wrap
msgid "sample \"/path/to/samples\", \"foo\", rate: 0.5"
msgstr ""

#: 03.7-Sample-Packs.md:203
msgid ""
"See the help for `sample` for many detailed usage examples. Note that the "
"ordering of the filters is honoured."
msgstr ""

#: 03.7-Sample-Packs.md:206
msgid "Composites"
msgstr ""

#: 03.7-Sample-Packs.md:208
msgid ""
"Finally, you may use lists wherever you may place a source or filter. The "
"list will be automatically flattened and the contents will be treated as "
"regular sources and filters. Therefore the following calls to `sample` are "
"semantically equivalent:"
msgstr ""

#: 03.7-Sample-Packs.md:213
#, no-wrap
msgid ""
"sample \"/path/to/dir\", \"100\", \"C#\"\n"
"sample [\"/path/to/dir\", \"100\", \"C#\"]\n"
"sample \"/path/to/dir\", [\"100\", \"C#\"]\n"
"sample [\"/path/to/dir\", [\"100\", [\"C#\"]]]"
msgstr ""

#: 03.7-Sample-Packs.md:220
msgid "Wrapping Up"
msgstr ""

#: 03.7-Sample-Packs.md:222
msgid ""
"This was an advanced section for people that need real power to manipulate "
"and use sample packs. If most of this section didn't make too much sense, "
"don't worry. It's likely you don't need any of this functionality just yet. "
"However, you'll know when you do need it and you can come back and re-read "
"this when you start working with large directories of samples."
msgstr ""

#: 04-Randomisation.md:1
msgid "4 Randomisation"
msgstr ""

#: 04-Randomisation.md:3
msgid "Randomisation"
msgstr ""

#: 04-Randomisation.md:5
msgid ""
"A great way to add some interest into your music is using some random "
"numbers. Sonic Pi has some great functionality for adding randomness to your "
"music, but before we start we need to learn a shocking truth: in Sonic Pi "
"*random is not truly random*. What on earth does this mean? Well, let's see."
msgstr ""

#: 04-Randomisation.md:11
msgid "Repeatability"
msgstr ""

#: 04-Randomisation.md:13
msgid ""
"A really useful random function is `rrand` which will give you a random "
"value between two numbers - a *min* and a *max*. (`rrand` is short for "
"ranged random). Let's try playing a random note:"
msgstr ""

#: 04-Randomisation.md:17
#, no-wrap
msgid "play rrand(50, 95)"
msgstr ""

#: 04-Randomisation.md:21
msgid ""
"Ooh, it played a random note. It played note `83.7527`. A nice random note "
"between 50 and 95. Woah, wait, did I just predict the exact random note you "
"got too? Something fishy is going on here. Try running the code again. What? "
"It chose `83.7527` again? That can't be random!"
msgstr ""

#: 04-Randomisation.md:26
msgid ""
"The answer is that it is not truly random, it's pseudo-random. Sonic Pi will "
"give you random-like numbers in a repeatable manner. This is very useful for "
"ensuring that the music you create on your machine sounds identical on "
"everybody else's machine - even if you use some randomness in your "
"composition."
msgstr ""

#: 04-Randomisation.md:32
msgid ""
"Of course, in a given piece of music, if it 'randomly' chose `83.7527` every "
"time, then it wouldn't be very interesting. However, it doesn't. Try the "
"following:"
msgstr ""

#: 04-Randomisation.md:36
#, no-wrap
msgid ""
"loop do\n"
"  play rrand(50, 95)\n"
"  sleep 0.5\n"
"end "
msgstr ""

#: 04-Randomisation.md:43
msgid ""
"Yes! It finally sounds random. Within a given *run* subsequent calls to "
"random functions will return random values. However, the next run will "
"produce exactly the same sequence of random values and sound exactly the "
"same. It's as if all Sonic Pi code went back in time to exactly the same "
"point every time the Run button was pressed. It's the Groundhog Day of music "
"synthesis!"
msgstr ""

#: 04-Randomisation.md:50
msgid "Haunted Bells"
msgstr ""

#: 04-Randomisation.md:52
msgid ""
"A lovely illustration of randomisation in action is the haunted bells "
"example which loops the `:perc_bell` sample with a random rate and sleep "
"time between bell sounds:"
msgstr ""

#: 04-Randomisation.md:56
#, no-wrap
msgid ""
"loop do\n"
"  sample :perc_bell, rate: (rrand 0.125, 1.5)\n"
"  sleep rrand(0.2, 2)\n"
"end"
msgstr ""

#: 04-Randomisation.md:63
msgid "Random cutoff"
msgstr ""

#: 04-Randomisation.md:65
msgid ""
"Another fun example of randomisation is to modify the cutoff of a synth "
"randomly. A great synth to try this out on is the `:tb303` emulator:"
msgstr ""

#: 04-Randomisation.md:69
#, no-wrap
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play 50, release: 0.1, cutoff: rrand(60, 120)\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: 04-Randomisation.md:78
msgid "Random seeds"
msgstr ""

#: 04-Randomisation.md:80
msgid ""
"So, what if you don't like this particular sequence of random numbers Sonic "
"Pi provides? Well it's totally possible to choose a different starting point "
"via `use_random_seed`. The default seed happens to be 0, so choose a "
"different seed for a different random experience!"
msgstr ""

#: 04-Randomisation.md:85
msgid "Consider the following:"
msgstr ""

#: 04-Randomisation.md:87
#, no-wrap
msgid ""
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: 04-Randomisation.md:94
msgid ""
"Every time you run this code, you'll hear the same sequence of 5 notes. To "
"get a different sequence simply change the seed:"
msgstr ""

#: 04-Randomisation.md:97
#, no-wrap
msgid ""
"use_random_seed 40\n"
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: 04-Randomisation.md:105
msgid ""
"This will produce a different sequence of 5 notes. By changing the seed and "
"listening to the results you can find something that you like - and when you "
"share it with others, they will hear exactly what you heard too."
msgstr ""

#: 04-Randomisation.md:110
msgid "Let's have a look at some other useful random functions."
msgstr ""

#: 04-Randomisation.md:113
msgid "choose"
msgstr ""

#: 04-Randomisation.md:115
msgid ""
"A very common thing to do is to choose an item randomly from a list of known "
"items. For example, I may want to play one note from the following: 60, 65 "
"or 72. I can achieve this with `choose` which lets me choose an item from a "
"list. First, I need to put my numbers in a list which is done by wrapping "
"them in square brackets and separating them with commas: `[60, 65, 72]`. "
"Next I just need to pass them to `choose`:"
msgstr ""

#: 04-Randomisation.md:122
#, no-wrap
msgid "choose([60, 65, 72])"
msgstr ""

#: 04-Randomisation.md:126
msgid "Let's hear what that sounds like:"
msgstr ""

#: 04-Randomisation.md:128
#, no-wrap
msgid ""
"loop do\n"
"  play choose([60, 65, 72])\n"
"  sleep 1\n"
"end"
msgstr ""

#: 04-Randomisation.md:135
msgid "rrand"
msgstr ""

#: 04-Randomisation.md:137
msgid ""
"We've already seen `rrand`, but let's run over it again. It returns a random "
"number between two values exclusively. That means it will never return "
"either the top or bottom number - always something in between the two. The "
"number will always be a float - meaning it's not a whole number but a "
"fraction of a number. Examples of floats returned by `rrand(20, 110)`:"
msgstr ""

#: 04-Randomisation.md:148
msgid "rrand_i"
msgstr ""

#: 04-Randomisation.md:150
msgid ""
"Occasionally you'll want a whole random number, not a float. This is where "
"`rrand_i` comes to the rescue. It works similarly to `rrand` except it may "
"return the min and max values as potential random values (which means it's "
"inclusive rather than exclusive of the range). Examples of numbers returned "
"by `rrand_i(20, 110)` are:"
msgstr ""

#: 04-Randomisation.md:160
msgid "rand"
msgstr ""

#: 04-Randomisation.md:162
msgid ""
"This will return a random float between 0 (inclusive) and the max value you "
"specify (exclusive). By default it will return a value between 0 and one. "
"It's therefore useful for choosing random `amp:` values:"
msgstr ""

#: 04-Randomisation.md:167
#, no-wrap
msgid ""
"loop do\n"
"  play 60, amp: rand\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: 04-Randomisation.md:174
msgid "rand_i"
msgstr ""

#: 04-Randomisation.md:176
msgid ""
"Similar to the relationship between `rrand_i` and `rrand`, `rand_i` will "
"return a random whole number between 0 and the max value you specify."
msgstr ""

#: 04-Randomisation.md:179
msgid "dice"
msgstr ""

#: 04-Randomisation.md:181
msgid ""
"Sometimes you want to emulate a dice throw - this is a special case of "
"`rrand_i` where the lower value is always 1. A call to `dice` requires you "
"to specify the number of sides on the dice. A standard dice has 6 sides, so "
"`dice(6)` will act very similarly - returning values of either 1, 2, 3, 4, "
"5, or 6. However, just like fantasy role-play games, you might find value in "
"a 4 sided dice, or a 12 sided dice, or a 20 sided dice - perhaps even a 120 "
"sided dice!"
msgstr ""

#: 04-Randomisation.md:189
msgid "one_in"
msgstr ""

#: 04-Randomisation.md:191
msgid ""
"Finally you may wish to emulate throwing the top score of a dice such as a 6 "
"in a standard dice. `one_in` therefore returns true with a probability of "
"one in the number of sides on the dice. Therefore `one_in(6)` will return "
"true with a probability of 1 in 6 or false otherwise. True and false values "
"are very useful for `if` statements which we will cover in a subsequent "
"section of this tutorial."
msgstr ""

#: 04-Randomisation.md:198
msgid "Now, go and jumble up your code with some randomness!"
msgstr ""

#: 05-Programming-Structures.md:1
msgid "5 Programming Structures"
msgstr ""

#: 05-Programming-Structures.md:3
msgid "Programming Structures"
msgstr ""

#: 05-Programming-Structures.md:5
msgid ""
"Now that you've learned the basics of creating sounds with `play` and "
"`sample` and creating simple melodies and rhythms by `sleep`ing between "
"sounds, you might be wondering what else the world of code can offer you..."
msgstr ""

#: 05-Programming-Structures.md:10
msgid ""
"Well, you're in for an exciting treat! It turns out that basic programming "
"structures such as looping, conditionals, functions and threads give you "
"amazingly powerful tools to express your musical ideas."
msgstr ""

#: 05-Programming-Structures.md:14
msgid "Let's get stuck in with the basics..."
msgstr ""

#: 05.1-Blocks.md:1
msgid "5.1 Blocks"
msgstr ""

#: 05.1-Blocks.md:3
msgid "Blocks"
msgstr ""

#: 05.1-Blocks.md:5
msgid ""
"A structure you'll see a lot in Sonic Pi is the block. Blocks allow us to do "
"useful things with large chunks of code. For example, with synth and sample "
"parameters we were able to change something that happened on a single line. "
"However, sometimes we want to do something meaningful to a number of lines "
"of code. For example, we may wish to loop it, to add reverb to it, to only "
"run it 1 time out of 5, etc. Consider the following code:"
msgstr ""

#: 05.1-Blocks.md:13
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_plip\n"
"sleep 0.5\n"
"play 62"
msgstr ""

#: 05.1-Blocks.md:21
msgid ""
"To do something with a chunk of code, we need to tell Sonic Pi where the "
"code block *starts* and where it *ends*. We use `do` for start and `end` for "
"end. For example:"
msgstr ""

#: 05.1-Blocks.md:25
#, no-wrap
msgid ""
"do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""

#: 05.1-Blocks.md:35
msgid ""
"However, this isn't yet complete and won't work (try it and you'll get an "
"error) as we haven't told Sonic Pi what we want to do with this *do/end "
"block*. We tell Sonic Pi this by writing some special code before the `do`. "
"We'll see a number of these special pieces of code later on in this "
"tutorial. For now, it's important to know that wrapping your code within "
"`do` and `end` tells Sonic Pi you wish to do something special with that "
"chunk of code."
msgstr ""

#: 05.2-Iteration-and-Loops.md:1
msgid "5.2 Iteration and Loops"
msgstr ""

#: 05.2-Iteration-and-Loops.md:3
msgid "Iteration and Loops"
msgstr ""

#: 05.2-Iteration-and-Loops.md:5
msgid ""
"So far we've spent a lot of time looking at the different sounds you can "
"make with `play` and `sample` blocks. We've also learned how to trigger "
"these sounds through time using `sleep`."
msgstr ""

#: 05.2-Iteration-and-Loops.md:9
msgid ""
"As you've probably found out, there's a *lot* of fun you can have with these "
"basic building blocks. However, a whole new dimension of fun opens up when "
"you start using the power of code to structure your music and compositions. "
"In the next few sections we'll explore some of these powerful new tools. "
"First up is iteration and loops."
msgstr ""

#: 05.2-Iteration-and-Loops.md:15
msgid "Repetition"
msgstr ""

#: 05.2-Iteration-and-Loops.md:17
msgid ""
"Have you written some code you'd like to repeat a few times? For example, "
"you might have something like this:"
msgstr ""

#: 05.2-Iteration-and-Loops.md:20
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""

#: 05.2-Iteration-and-Loops.md:29
msgid ""
"What if we wished to repeat this 3 times? Well, we could do something simple "
"and just copy and paste it three times:"
msgstr ""

#: 05.2-Iteration-and-Loops.md:32
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""

#: 05.2-Iteration-and-Loops.md:55
msgid ""
"Now that's a lot of code! What happens if you want to change the sample to `:"
"elec_plip`? You're going to have to find all the places with the original `:"
"elec_blup` and switch them over. More importantly, what if you wanted to "
"repeat the original piece of code 50 times or 1000? Now that would be a lot "
"of code, and a lot of lines of code to alter if you wanted to make a change."
msgstr ""

#: 05.2-Iteration-and-Loops.md:62
msgid "Iteration"
msgstr ""

#: 05.2-Iteration-and-Loops.md:64
msgid ""
"In fact, repeating the code should be as easy as saying *do this three "
"times*. Well, it pretty much is. Remember our old friend the code block? We "
"can use it to mark the start and end of the code we'd like to repeat three "
"times. We then use the special code `3.times`. So, instead of writing *do "
"this three times*, we write `3.times do` - that's not too hard. Just "
"remember to write `end` at the end of the code you'd like to repeat:"
msgstr ""

#: 05.2-Iteration-and-Loops.md:72
#, no-wrap
msgid ""
"3.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_blup\n"
"  sleep 0.5\n"
"  play 62\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: 05.2-Iteration-and-Loops.md:83
msgid ""
"Now isn't that much neater than cutting and pasting! We can use this to "
"create lots of nice repeating structures:"
msgstr ""

#: 05.2-Iteration-and-Loops.md:86
#, no-wrap
msgid ""
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end\n"
"8.times do\n"
"  play 55, release: 0.2\n"
"  sleep 0.25\n"
"end\n"
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: 05.2-Iteration-and-Loops.md:103
msgid "Nesting Iterations"
msgstr ""

#: 05.2-Iteration-and-Loops.md:105
msgid ""
"We can put iterations inside other iterations to create interesting "
"patterns. For example:"
msgstr ""

#: 05.2-Iteration-and-Loops.md:108
#, no-wrap
msgid ""
"4.times do\n"
"  sample :drum_heavy_kick\n"
"  2.times do\n"
"    sample :elec_blip2, rate: 2\n"
"    sleep 0.25\n"
"  end\n"
"  sample :elec_snare\n"
"  4.times do\n"
"    sample :drum_tom_mid_soft\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: 05.2-Iteration-and-Loops.md:123
msgid "Looping"
msgstr ""

#: 05.2-Iteration-and-Loops.md:125
msgid ""
"If you want something to repeat a lot of times, you might find yourself "
"using really large numbers such as `1000.times do`. In this case, you're "
"probably better off asking Sonic Pi to repeat forever (at least until you "
"press the stop button!). Let's loop the amen break forever:"
msgstr ""

#: 05.2-Iteration-and-Loops.md:130
#, no-wrap
msgid ""
"loop do\n"
"  sample :loop_amen\n"
"  sleep sample_duration :loop_amen\n"
"end"
msgstr ""

#: 05.2-Iteration-and-Loops.md:137
msgid ""
"The important thing to know about loops is that they act like black holes "
"for code. Once the code enters a loop it can never leave until you press "
"stop - it will just go round and round the loop forever. This means if you "
"have code after the loop you will *never* hear it. For example, the cymbal "
"after this loop will never play:"
msgstr ""

#: 05.2-Iteration-and-Loops.md:143
#, no-wrap
msgid ""
"loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"sample :drum_cymbal_open"
msgstr ""

#: 05.2-Iteration-and-Loops.md:152
msgid "Now, get structuring your code with iteration and loops!"
msgstr ""

#: 05.3-Conditionals.md:1
msgid "5.3 Conditionals"
msgstr ""

#: 05.3-Conditionals.md:3
msgid "Conditionals"
msgstr ""

#: 05.3-Conditionals.md:5
msgid ""
"A common thing you'll likely find yourself wanting to do is to not only play "
"a random note (see the previous section on randomness) but also make a "
"random decision and based on the outcome run some code or some other code. "
"For example, you might want to randomly play a drum or a cymbal. We can "
"achieve this with an `if` statement."
msgstr ""

#: 05.3-Conditionals.md:11
msgid "Flipping a Coin"
msgstr ""

#: 05.3-Conditionals.md:13
msgid ""
"So, let's flip a coin: if it's heads, play a drum, if it's tails, play a "
"cymbal. Easy. We can emulate a coin flip with our `one_in` function "
"(introduced in the section on randomness) specifying a probability of 1 in "
"2: `one_in(2)`. We can then use the result of this to decide between two "
"pieces of code, the code to play the drum and the code to play the cymbal:"
msgstr ""

#: 05.3-Conditionals.md:20
#, no-wrap
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"  end\n"
"  \n"
"  sleep 0.5\n"
"  \n"
"end"
msgstr ""

#: 05.3-Conditionals.md:34
msgid "Notice that `if` statements have three parts:"
msgstr ""

#: 05.3-Conditionals.md:36
msgid "The question to ask"
msgstr ""

#: 05.3-Conditionals.md:37
msgid "The first choice of code to run (if the answer to the question is yes)"
msgstr ""

#: 05.3-Conditionals.md:38
msgid "The second choice of code to run (if the answer to the question is no)"
msgstr ""

#: 05.3-Conditionals.md:40
msgid ""
"Typically in programming languages, the notion of yes is represented by the "
"term `true` and the notion of no is represented by the term `false`. So we "
"need to find a question that will give us a `true` or `false` answer which "
"is exactly what `one_in` does."
msgstr ""

#: 05.3-Conditionals.md:45
msgid ""
"Notice how the first choice is wrapped between the `if` and the `else` and "
"the second choice is wrapped between the `else` and the `end`. Just like do/"
"end blocks you can put multiple lines of code in either place. For example:"
msgstr ""

#: 05.3-Conditionals.md:50
#, no-wrap
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"    sleep 0.5\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"    sleep 0.25\n"
"  end\n"
"  \n"
"end"
msgstr ""

#: 05.3-Conditionals.md:64
msgid ""
"This time we're sleeping for a different amount of time depending on which "
"choice we make."
msgstr ""

#: 05.3-Conditionals.md:68
msgid "Simple if"
msgstr ""

#: 05.3-Conditionals.md:70
msgid ""
"Sometimes you want to optionally execute just one line of code. This is "
"possible by placing `if` and then the question at the end. For example:"
msgstr ""

#: 05.3-Conditionals.md:73
#, no-wrap
msgid ""
"use_synth :dsaw\n"
"loop do\n"
"  play 50, amp: 0.3, release: 2\n"
"  play 53, amp: 0.3, release: 2 if one_in(2)\n"
"  play 57, amp: 0.3, release: 2 if one_in(3)\n"
"  play 60, amp: 0.3, release: 2 if one_in(4)\n"
"  sleep 1.5\n"
"end"
msgstr ""

#: 05.3-Conditionals.md:85
msgid ""
"This will play chords of different numbers with the chance of each note "
"playing having a different probability."
msgstr ""

#: 05.4-Threads.md:1
msgid "5.4 Threads"
msgstr ""

#: 05.4-Threads.md:3
msgid "Threads"
msgstr ""

#: 05.4-Threads.md:5
msgid ""
"So you've made your killer bassline and a phat beat. How do you play them at "
"the same time? One solution is to weave them together manually - play some "
"bass, then a bit of drums, then more bass... However, the timing soon gets "
"hard to think about, especially when you start weaving in more elements."
msgstr ""

#: 05.4-Threads.md:11
msgid ""
"What if Sonic Pi could weave things for you automatically? Well, it can, and "
"you do it with a special thing called a *thread*."
msgstr ""

#: 05.4-Threads.md:14
msgid "Infinite Loops"
msgstr ""

#: 05.4-Threads.md:16
msgid ""
"To keep this example simple, you'll have to imagine that this is a phat beat "
"and a killer bassline:"
msgstr ""

#: 05.4-Threads.md:19
#, no-wrap
msgid ""
"loop do\n"
"  sample :drum_heavy_kick\n"
"  sleep 1\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: 05.4-Threads.md:32
msgid ""
"As we've discussed previously, loops are like *black holes* for the program. "
"Once you enter a loop you can never exit from it until you hit stop. How do "
"we play both loops at the same time? We have to tell Sonic Pi that we want "
"to start something at the same time as the rest of the code. This is where "
"threads come to the rescue."
msgstr ""

#: 05.4-Threads.md:38
msgid "Threads to the Rescue"
msgstr ""

#: 05.4-Threads.md:40
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: 05.4-Threads.md:55
msgid ""
"By wrapping the first loop in an `in_thread` do/end block we tell Sonic Pi "
"to run the contents of the do/end block at *exactly* the same time as the "
"next statement after the do/end block (which happens to be the second loop). "
"Try it and you'll hear both the drums and the bassline weaved together!"
msgstr ""

#: 05.4-Threads.md:61
msgid "Now, what if we wanted to add a synth on top. Something like:"
msgstr ""

#: 05.4-Threads.md:63
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""

#: 05.4-Threads.md:84
msgid ""
"Now we have the same problem as before. The first loop is played at the same "
"time as the second loop due to the `in_thread`. However, *the third loop is "
"never reached*. We therefore need another thread:"
msgstr ""

#: 05.4-Threads.md:88
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    use_synth :fm\n"
"    play 40, release: 0.2\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""

#: 05.4-Threads.md:111
msgid "Runs as threads"
msgstr ""

#: 05.4-Threads.md:113
msgid ""
"What may surprise you is that when you press the Run button, you're actually "
"creating a new thread for the code to run. This is why pressing it multiple "
"times will layer sounds over each other. As the runs themselves are threads, "
"they will automatically weave the sounds together for you."
msgstr ""

#: 05.4-Threads.md:119
msgid "Scope"
msgstr ""

#: 05.4-Threads.md:121
msgid ""
"As you learn how to master Sonic Pi, you'll learn that threads are the most "
"important building blocks for your music. One of the important jobs they "
"have is to isolate the notion of *current settings* from other threads. What "
"does this mean? Well, when you switch synths using `use_synth` you're "
"actually just switching the synth in the *current thread* - no other thread "
"will have their synth switched. Let's see this in action:"
msgstr ""

#: 05.4-Threads.md:129
#, no-wrap
msgid ""
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  use_synth :tb303\n"
"  play 50\n"
"end\n"
"sleep 1\n"
"play 50"
msgstr ""

#: 05.4-Threads.md:142
msgid ""
"Notice how the middle sound was different to the others? The `use_synth` "
"statement only affected the thread it was in and not the outer main run "
"thread."
msgstr ""

#: 05.4-Threads.md:146
msgid "Inheritance"
msgstr ""

#: 05.4-Threads.md:148
msgid ""
"When you create a new thread with `in_thread`, the new thread will "
"automatically inherit all of the current settings from the current thread. "
"Let's see that:"
msgstr ""

#: 05.4-Threads.md:152
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  play 55\n"
"end"
msgstr ""

#: 05.4-Threads.md:162
msgid ""
"Notice how the second note is played with the `:tb303` synth even though it "
"was played from a separate thread? Any of the settings modified with the "
"various `use_*` functions will behave in the same way."
msgstr ""

#: 05.4-Threads.md:166
msgid ""
"When threads are created, they inherit all the settings from their parent "
"but they don't share any changes back."
msgstr ""

#: 05.4-Threads.md:169
msgid "Naming Threads"
msgstr ""

#: 05.4-Threads.md:171
msgid "Finally, we can give our threads names:"
msgstr ""

#: 05.4-Threads.md:173
#, no-wrap
msgid ""
"in_thread(name: :bass) do\n"
"  loop do\n"
"    use_synth :prophet\n"
"    play chord(:e2, :m7).choose, release: 0.6\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread(name: :drums) do\n"
"  loop do\n"
"    sample :elec_snare\n"
"    sleep 1\n"
"  end\n"
"end"
msgstr ""

#: 05.4-Threads.md:190
msgid ""
"Look at the log pane when you run this code. See how the log reports the "
"name of the thread with the message?"
msgstr ""

#: 05.4-Threads.md:193
#, no-wrap
msgid ""
"[Run 36, Time 4.0, Thread :bass]\n"
" |- synth :prophet, {release: 0.6, note: 47}"
msgstr ""

#: 05.4-Threads.md:198
msgid "Only One Thread per Name Allowed"
msgstr ""

#: 05.4-Threads.md:200
msgid ""
"One last thing to know about named threads is that only one thread of a "
"given name may be running at the same time. Let's explore this. Consider the "
"following code:"
msgstr ""

#: 05.4-Threads.md:204
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""

#: 05.4-Threads.md:213
msgid ""
"Go ahead and paste that into a buffer and press the Run button. Press it "
"again a couple of times. Listen to the cacophony of multiple amen breaks "
"looping out of time with each other. Ok, you can press Stop now."
msgstr ""

#: 05.4-Threads.md:217
msgid ""
"This is the behaviour we've seen again and again - if you press the Run "
"button, sound layers on top of any existing sound. Therefore if you have a "
"loop and press the Run button three times, you'll have three layers of loops "
"playing simultaneously."
msgstr ""

#: 05.4-Threads.md:222
msgid "However, with named threads it is different:"
msgstr ""

#: 05.4-Threads.md:224
#, no-wrap
msgid ""
"in_thread(name: :amen) do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""

#: 05.4-Threads.md:233
msgid ""
"Try pressing the Run button multiple times with this code. You'll only ever "
"hear one amen break loop. You'll also see this in the log:"
msgstr ""

#: 05.4-Threads.md:236
#, no-wrap
msgid "==> Skipping thread creation: thread with name :amen already exists."
msgstr ""

#: 05.4-Threads.md:240
msgid ""
"Sonic Pi is telling you that a thread with the name `:amen` is already "
"playing, so it's not creating another."
msgstr ""

#: 05.4-Threads.md:243
msgid ""
"This behaviour may not seem immediately useful to you now - but it will be "
"very handy when we start to live code..."
msgstr ""

#: 05.5-Functions.md:1
msgid "5.5 Functions"
msgstr ""

#: 05.5-Functions.md:3
msgid "Functions"
msgstr ""

#: 05.5-Functions.md:5
msgid ""
"Once you start writing lots of code, you may wish to find a way to organise "
"and structure things to make them tidier and easier to understand. Functions "
"are a very powerful way to do this. They give us the ability to give a name "
"to a bunch of code. Let's take a look."
msgstr ""

#: 05.5-Functions.md:10
msgid "Defining functions"
msgstr ""

#: 05.5-Functions.md:12
#, no-wrap
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 2\n"
"end"
msgstr ""

#: 05.5-Functions.md:21
msgid ""
"Here, we've defined a new function called `foo`. We do this with our old "
"friend the do/end block and the magic word `define` followed by the name we "
"wish to give to our function. We didn't have to call it `foo`, we could have "
"called it anything we want such as `bar`, `baz` or ideally something "
"meaningful to you like `main_section` or `lead_riff`."
msgstr ""

#: 05.5-Functions.md:27
msgid ""
"Remember to prepend a colon `:` to the name of your function when you define "
"it."
msgstr ""

#: 05.5-Functions.md:30
msgid "Calling functions"
msgstr ""

#: 05.5-Functions.md:32
msgid ""
"Once we have defined our function we can call it by just writing its name:"
msgstr ""

#: 05.5-Functions.md:35
#, no-wrap
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 0.5\n"
"end\n"
"foo\n"
"sleep 1\n"
"2.times do\n"
"  foo\n"
"end"
msgstr ""

#: 05.5-Functions.md:52
msgid ""
"We can even use `foo` inside iteration blocks or anywhere we may have "
"written `play` or `sample`. This gives us a great way to express ourselves "
"and to create new meaningful words for use in our compositions."
msgstr ""

#: 05.5-Functions.md:56
msgid "Functions are remembered across runs"
msgstr ""

#: 05.5-Functions.md:58
msgid ""
"So far, every time you've pressed the Run button, Sonic Pi has started from "
"a completely blank slate. It knows nothing except for what is in the buffer. "
"You can't reference code in another buffer or another thread. However, "
"functions change that. When you define a function, Sonic Pi *remembers* it. "
"Let's try it. Delete all the code in your buffer and replace it with:"
msgstr ""

#: 05.5-Functions.md:65
#, no-wrap
msgid "foo"
msgstr ""

#: 05.5-Functions.md:69
msgid ""
"Press the Run button - and hear your function play. Where did the code go? "
"How did Sonic Pi know what to play? Sonic Pi just remembered your function - "
"so even after you deleted it from the buffer, it remembered what you had "
"typed. This behaviour only works with functions created using `define` (and "
"`defonce`)."
msgstr ""

#: 05.5-Functions.md:75
msgid "Parameterised functions"
msgstr ""

#: 05.5-Functions.md:77
msgid ""
"You might be interested in knowing that just like you can pass min and max "
"values to `rrand`, you can teach your functions to accept arguments. Let's "
"take a look:"
msgstr ""

#: 05.5-Functions.md:81
#, no-wrap
msgid ""
"define :my_player do |n|\n"
"  play n\n"
"end\n"
"my_player 80\n"
"sleep 0.5\n"
"my_player 90"
msgstr ""

#: 05.5-Functions.md:91
msgid ""
"This isn't very exciting, but it illustrates the point. We've created our "
"own version of `play` called `my_player` which is parameterised."
msgstr ""

#: 05.5-Functions.md:94
msgid ""
"The parameters need to go after the `do` of the `define` do/end block, "
"surrounded by vertical goalposts `|` and separated by commas `,`. You may "
"use any words you want for the parameter names."
msgstr ""

#: 05.5-Functions.md:98
msgid ""
"The magic happens inside the `define` do/end block. You may use the "
"parameter names as if they were real values. In this example I'm playing "
"note `n`. You can consider the parameters as a kind of promise that when the "
"code runs, they will be replaced with actual values. You do this by passing "
"a parameter to the function when you call it. I do this with `my_player 80` "
"to play note 80. Inside the function definition, `n` is now replaced with "
"80, so `play n` turns into `play 80`. When I call it again with `my_player "
"90`, `n` is now replaced with 90, so `play n` turns into `play 90`."
msgstr ""

#: 05.5-Functions.md:108
msgid "Let's see a more interesting example:"
msgstr ""

#: 05.5-Functions.md:110
#, no-wrap
msgid ""
"define :chord_player do |root, repeats| \n"
"  repeats.times do\n"
"    play chord(root, :minor), release: 0.3\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"chord_player :e3, 2\n"
"sleep 0.5\n"
"chord_player :a3, 3\n"
"chord_player :g3, 4\n"
"sleep 0.5\n"
"chord_player :e3, 3"
msgstr ""

#: 05.5-Functions.md:126
msgid ""
"Here I used `repeats` as if it was a number in the line `repeats.times do`. "
"I also used `root` as if it was a note name in my call to `play`."
msgstr ""

#: 05.5-Functions.md:129
msgid ""
"See how we're able to write something very expressive and easy to read by "
"moving a lot of our logic into a function!"
msgstr ""

#: 05.6-Variables.md:1
msgid "5.6 Variables"
msgstr ""

#: 05.6-Variables.md:3
msgid "Variables"
msgstr ""

#: 05.6-Variables.md:5
msgid ""
"A useful thing to do in your code is to create names for things. Sonic Pi "
"makes this very easy, you write the name you wish to use, an equal sign "
"(`=`), then the thing you want to remember:"
msgstr ""

#: 05.6-Variables.md:9
#, no-wrap
msgid "sample_name = :loop_amen"
msgstr ""

#: 05.6-Variables.md:13
msgid ""
"Here, we've 'remembered' the symbol `:loop_amen` in the variable "
"`sample_name`. We can now use `sample_name` everywhere we might have used `:"
"loop_amen`. For example:"
msgstr ""

#: 05.6-Variables.md:17
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name"
msgstr ""

#: 05.6-Variables.md:22
msgid ""
"There are three main reasons for using variables in Sonic Pi: communicating "
"meaning, managing repetition and capturing the results of things."
msgstr ""

#: 05.6-Variables.md:26
msgid "Communicating Meaning"
msgstr ""

#: 05.6-Variables.md:28
msgid ""
"When you write code it's easy to just think you're telling the computer how "
"to do stuff - as long as the computer understands it's OK. However, it's "
"important to remember that it's not just the computer that reads the code. "
"Other people may read it too and try to understand what's going on. Also, "
"you're likely to read your own code in the future and try to understand "
"what's going on. Although it might seem obvious to you now - it might not be "
"so obvious to others or even your future self!"
msgstr ""

#: 05.6-Variables.md:36
msgid ""
"One way to help others understand what your code is doing is to write "
"comments (as we saw in a previous section). Another is to use meaningful "
"variable names. Look at this code:"
msgstr ""

#: 05.6-Variables.md:40
#, no-wrap
msgid "sleep 1.7533"
msgstr ""

#: 05.6-Variables.md:44
msgid ""
"Why does it use the number `1.7533`? Where did this number come from? What "
"does it mean? However, look at this code:"
msgstr ""

#: 05.6-Variables.md:47
#, no-wrap
msgid ""
"loop_amen_duration = 1.7533\n"
"sleep loop_amen_duration"
msgstr ""

#: 05.6-Variables.md:52
msgid ""
"Now, it's much clearer what `1.7533` means: it's the duration of the sample "
"`:loop_amen`! Of course, you might say why not simply write:"
msgstr ""

#: 05.6-Variables.md:55
#, no-wrap
msgid "sleep sample_duration(:loop_amen)"
msgstr ""

#: 05.6-Variables.md:59
msgid ""
"Which, of course, is a very nice way of communicating the intent of the code."
msgstr ""

#: 05.6-Variables.md:62
msgid "Managing Repetition"
msgstr ""

#: 05.6-Variables.md:64
msgid ""
"Often you see a lot of repetition in your code and when you want to change "
"things, you have to change it in a lot of places. Take a look at this code:"
msgstr ""

#: 05.6-Variables.md:68
#, no-wrap
msgid ""
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)\n"
"sample :loop_amen, rate: 0.5\n"
"sleep sample_duration(:loop_amen, rate: 0.5)\n"
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)"
msgstr ""

#: 05.6-Variables.md:77
msgid ""
"We're doing a lot of things with `:loop_amen`! What if we wanted to hear "
"what it sounded like with another loop sample such as `:loop_garzul`? We'd "
"have to find and replace all `:loop_amen`s with `:loop_garzul`. That might "
"be fine if you have lots of time - but what if you're performing on stage? "
"Sometimes you don't have the luxury of time - especially if you want to keep "
"people dancing."
msgstr ""

#: 05.6-Variables.md:84
msgid "What if you'd written your code like this:"
msgstr ""

#: 05.6-Variables.md:86
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)\n"
"sample sample_name, rate: 0.5\n"
"sleep sample_duration(sample_name, rate: 0.5)\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)"
msgstr ""

#: 05.6-Variables.md:96
msgid ""
"Now, that does exactly the same as above (try it). It also gives us the "
"ability to just change one line `sample_name = :loop_amen` to `sample_name "
"= :loop_garzul` and we change it in many places through the magic of "
"variables."
msgstr ""

#: 05.6-Variables.md:101
msgid "Capturing Results"
msgstr ""

#: 05.6-Variables.md:103
msgid ""
"Finally, a good motivation for using variables is to capture the results of "
"things. For example, you may wish to do things with the duration of a sample:"
msgstr ""

#: 05.6-Variables.md:107
#, no-wrap
msgid "sd = sample_duration(:loop_amen)"
msgstr ""

#: 05.6-Variables.md:111
msgid ""
"We can now use `sd` anywhere we need the duration of the `:loop_amen` sample."
msgstr ""

#: 05.6-Variables.md:114
msgid ""
"Perhaps more importantly, a variable allows us to capture the result of a "
"call to `play` or `sample`:"
msgstr ""

#: 05.6-Variables.md:117
#, no-wrap
msgid "s = play 50, release: 8"
msgstr ""

#: 05.6-Variables.md:121
msgid ""
"Now we have caught and remembered `s` as a variable, which allows us to "
"control the synth as it is running:"
msgstr ""

#: 05.6-Variables.md:124
#, no-wrap
msgid ""
"s = play 50, release: 8\n"
"sleep 2\n"
"control s, note: 62"
msgstr ""

#: 05.6-Variables.md:130
msgid "We'll look into controlling synths in more detail in a later section."
msgstr ""

#: 05.7-Thread-Synchronisation.md:1
msgid "5.7 Thread Synchronisation"
msgstr ""

#: 05.7-Thread-Synchronisation.md:3
msgid "Thread Synchronisation"
msgstr ""

#: 05.7-Thread-Synchronisation.md:5
msgid ""
"Once you have become sufficiently advanced live coding with a number of "
"functions and threads simultaneously, you've probably noticed that it's "
"pretty easy to make a mistake in one of the threads which kills it. That's "
"no big deal, because you can easily restart the thread by hitting Run. "
"However, when you restart the thread it is now *out of time* with the "
"original threads."
msgstr ""

#: 05.7-Thread-Synchronisation.md:12
msgid "Inherited Time"
msgstr ""

#: 05.7-Thread-Synchronisation.md:14
msgid ""
"As we discussed earlier, new threads created with `in_thread` inherit all of "
"the settings from the parent thread. This includes the current time. This "
"means that threads are always in time with each other when started "
"simultaneously."
msgstr ""

#: 05.7-Thread-Synchronisation.md:19
msgid ""
"However, when you start a thread on its own it starts with its own time "
"which is unlikely to be in sync with any of the other currently running "
"threads."
msgstr ""

#: 05.7-Thread-Synchronisation.md:23
msgid "Cue and Sync"
msgstr ""

#: 05.7-Thread-Synchronisation.md:25
msgid ""
"Sonic Pi provides a solution to this problem with the functions `cue` and "
"`sync`."
msgstr ""

#: 05.7-Thread-Synchronisation.md:28
msgid ""
"`cue` allows us to send out heartbeat messages to all other threads. By "
"default the other threads aren't interested and ignore these heartbeat "
"messages. However, you can easily register interest with the `sync` function."
msgstr ""

#: 05.7-Thread-Synchronisation.md:33
msgid ""
"The important thing to be aware of is that `sync` is similar to `sleep` in "
"that it stops the current thread from doing anything for a period of time. "
"However, with `sleep` you specify how long you want to wait while with "
"`sync` you don't know how long you will wait - as `sync` waits for the next "
"`cue` from another thread which may be soon or a long time away."
msgstr ""

#: 05.7-Thread-Synchronisation.md:40
msgid "Let's explore this in a little more detail:"
msgstr ""

#: 05.7-Thread-Synchronisation.md:42
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""

#: 05.7-Thread-Synchronisation.md:58
msgid ""
"Here we have two threads - one acting like a metronome, not playing any "
"sounds but sending out `:tick` heartbeat messages every beat. The second "
"thread is synchronising on `tick` messages and when it receives one it "
"inherits the time of the `cue` thread and continues running."
msgstr ""

#: 05.7-Thread-Synchronisation.md:63
msgid ""
"As a result, we will hear the `:drum_heavy_kick` sample exactly when the "
"other thread sends the `:tick` message, even if the two threads didn't start "
"their execution at the same time:"
msgstr ""

#: 05.7-Thread-Synchronisation.md:67
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"sleep(0.3)\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""

#: 05.7-Thread-Synchronisation.md:85
msgid ""
"That naughty `sleep` call would typically make the second thread out of "
"phase with the first. However, as we're using `cue` and `sync`, we "
"automatically sync the threads bypassing any accidental timing offsets."
msgstr ""

#: 05.7-Thread-Synchronisation.md:90
msgid "Cue Names"
msgstr ""

#: 05.7-Thread-Synchronisation.md:92
msgid ""
"You are free to use whatever name you'd like for your `cue` messages - not "
"just `:tick`. You just need to ensure that any other threads are `sync`ing "
"on the correct name - otherwise they'll be waiting for ever (or at least "
"until you press the Stop button)."
msgstr ""

#: 05.7-Thread-Synchronisation.md:97
msgid "Let's play with a few `cue` names:"
msgstr ""

#: 05.7-Thread-Synchronisation.md:99
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do \n"
"    cue [:foo, :bar, :baz].choose\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do \n"
"    sync :foo \n"
"    sample :elec_beep\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :bar\n"
"    sample :elec_flip\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :baz\n"
"    sample :elec_blup\n"
"  end\n"
"end"
msgstr ""

#: 05.7-Thread-Synchronisation.md:129
msgid ""
"Here we have a main `cue` loop which is randomly sending one of the "
"heartbeat names `:foo`, `:bar` or `:baz`. We then also have three loop "
"threads syncing on each of those names independently and then playing a "
"different sample. The net effect is that we hear a sound every 0.5 beats as "
"each of the `sync` threads is randomly synced with the `cue` thread and "
"plays its sample."
msgstr ""

#: 05.7-Thread-Synchronisation.md:136
msgid ""
"This of course also works if you order the threads in reverse as the `sync` "
"threads will simply sit and wait for the next `cue`."
msgstr ""

#: 06-FX.md:1
msgid "6 FX"
msgstr ""

#: 06-FX.md:3
msgid "Studio FX"
msgstr ""

#: 06-FX.md:5
msgid ""
"One of the most rewarding and fun aspects of Sonic Pi is the ability to "
"easily add studio effects to your sounds. For example, you may wish to add "
"some reverb to parts of your piece, or some echo or perhaps even distort or "
"wobble your basslines."
msgstr ""

#: 06-FX.md:10
msgid ""
"Sonic Pi provides a very simple yet powerful way of adding FX. It even "
"allows you to chain them (so you can pass your sounds through distortion, "
"then echo and then reverb) and also control each individual FX unit with "
"opts (in a similar way to giving params to synths and samples). You can even "
"modify the opts of the FX whilst it's still running. So, for example, you "
"could increase the reverb on your bass throughout the track..."
msgstr ""

#: 06-FX.md:18
msgid "Guitar Pedals"
msgstr ""

#: 06-FX.md:20
msgid ""
"If all of this sounds a bit complicated, don't worry. Once you play around "
"with it a little, it will all become quite clear. Before you do though, a "
"simple analogy is that of guitar FX pedals. There are many kinds of FX "
"pedals you can buy. Some add reverb, others distort etc. A guitarist will "
"plug his or her guitar into one FX pedal - i.e. distortion -, then take "
"another cable and connect (chain) a reverb pedal. The output of the reverb "
"pedal can then be plugged into the amplifier:"
msgstr ""

#: 06-FX.md:29
#, no-wrap
msgid "Guitar -> Distortion -> Reverb -> Amplifier"
msgstr ""

#: 06-FX.md:33
msgid ""
"This is called FX chaining. Sonic Pi supports exactly this. Additionally, "
"each pedal often has dials and sliders to allow you to control how much "
"distortion, reverb, echo etc. to apply. Sonic Pi also supports this kind of "
"control. Finally, you can imagine a guitarist playing whilst someone plays "
"with the FX controls whilst they're playing. Sonic Pi also supports this - "
"but instead of needing someone else to control things for you, that's where "
"the computer steps in."
msgstr ""

#: 06-FX.md:42
msgid "Let's explore FX!"
msgstr ""

#: 06.1-Adding-FX.md:1
msgid "6.1 Adding FX"
msgstr ""

#: 06.1-Adding-FX.md:3
msgid "Adding FX"
msgstr ""

#: 06.1-Adding-FX.md:5
msgid ""
"In this section we'll look at a couple of FX: reverb and echo. We'll see how "
"to use them, how to control their opts and how to chain them."
msgstr ""

#: 06.1-Adding-FX.md:9
msgid ""
"Sonic Pi's FX system uses blocks. So if you haven't read section 5.1 you "
"might want to take a quick look and then head back."
msgstr ""

#: 06.1-Adding-FX.md:12
msgid "Reverb"
msgstr ""

#: 06.1-Adding-FX.md:14
msgid ""
"If we want to use reverb we write `with_fx :reverb` as the special code to "
"our block like this:"
msgstr ""

#: 06.1-Adding-FX.md:17
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""

#: 06.1-Adding-FX.md:27
msgid ""
"Now play this code and you'll hear it played with reverb. It sounds good, "
"doesn't it! Everything sounds pretty nice with reverb."
msgstr ""

#: 06.1-Adding-FX.md:30
msgid "Now let's look what happens if we have code outside the do/end block:"
msgstr ""

#: 06.1-Adding-FX.md:32
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""

#: 06.1-Adding-FX.md:45
msgid ""
"Notice how the final `play 55` isn't played with reverb. This is because it "
"is *outside* the do/end block, so it isn't captured by the reverb FX."
msgstr ""

#: 06.1-Adding-FX.md:48
msgid ""
"Similarly, if you make sounds before the do/end block, they also won't be "
"captured:"
msgstr ""

#: 06.1-Adding-FX.md:51
#, no-wrap
msgid ""
"play 55\n"
"sleep 1\n"
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""

#: 06.1-Adding-FX.md:67
msgid "Echo"
msgstr ""

#: 06.1-Adding-FX.md:69
msgid "There are many FX to choose from. How about some echo?"
msgstr ""

#: 06.1-Adding-FX.md:71
#, no-wrap
msgid ""
"with_fx :echo do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""

#: 06.1-Adding-FX.md:81
msgid ""
"One of the powerful aspects of Sonic Pi's FX blocks is that they may be "
"passed opts similar to opts we've already seen with `play` and `sample`. For "
"example a fun echo opt to play with is `phase:` which represents the "
"duration of a given echo in beats. Let's make the echo slower:"
msgstr ""

#: 06.1-Adding-FX.md:87
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.5 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""

#: 06.1-Adding-FX.md:97
msgid "Let's also make the echo faster:"
msgstr ""

#: 06.1-Adding-FX.md:99
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.125 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""

#: 06.1-Adding-FX.md:109
msgid ""
"Let's make the echo take longer to fade away by setting the `decay:` time to "
"8 beats:"
msgstr ""

#: 06.1-Adding-FX.md:112
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.5, decay: 8 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""

#: 06.1-Adding-FX.md:122
msgid "Nesting FX"
msgstr ""

#: 06.1-Adding-FX.md:124
msgid ""
"One of the most powerful aspects of the FX blocks is that you can nest them. "
"This allows you to very easily chain FX together. For example, what if you "
"wanted to play some code with echo and then with reverb? Easy, just put one "
"inside the other:"
msgstr ""

#: 06.1-Adding-FX.md:129
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  with_fx :echo, phase: 0.5, decay: 8 do\n"
"    play 50\n"
"    sleep 0.5\n"
"    sample :elec_blup\n"
"    sleep 0.5\n"
"    play 62\n"
"  end\n"
"end"
msgstr ""

#: 06.1-Adding-FX.md:141
msgid ""
"Think about the audio flowing from the inside out. The sound of all the code "
"within the inner do/end block such as `play 50` is first sent to the echo FX "
"and the sound of the echo FX is in turn sent out to the reverb FX."
msgstr ""

#: 06.1-Adding-FX.md:146
msgid ""
"We may use very deep nestings for crazy results. However, be warned, the FX "
"can use a lot of resources and when you nest them you're effectively running "
"multiple FX simultaneously. So be sparing with your use of FX especially on "
"low powered platforms such as the Raspberry Pi."
msgstr ""

#: 06.1-Adding-FX.md:151
msgid "Discovering FX"
msgstr ""

#: 06.1-Adding-FX.md:153
msgid ""
"Sonic Pi ships with a large number of FX for you to play with. To find out "
"which ones are available, click on FX in the far left of this help system "
"and you'll see a list of available options. Here's a list of some of my "
"favourites:"
msgstr ""

#: 06.1-Adding-FX.md:158
msgid "wobble,"
msgstr ""

#: 06.1-Adding-FX.md:159
msgid "reverb,"
msgstr ""

#: 06.1-Adding-FX.md:160
msgid "echo,"
msgstr ""

#: 06.1-Adding-FX.md:161
msgid "distortion,"
msgstr ""

#: 06.1-Adding-FX.md:162
msgid "slicer"
msgstr ""

#: 06.1-Adding-FX.md:164
msgid "Now go crazy and add FX everywhere for some amazing new sounds!"
msgstr ""

#: 06.2-FX-in-Practice.md:1
msgid "6.2 FX in Practice"
msgstr ""

#: 06.2-FX-in-Practice.md:3
msgid "FX in Practice"
msgstr ""

#: 06.2-FX-in-Practice.md:5
msgid ""
"Although they look deceptively simple on the outside, FX are actually quite "
"complex beasts internally. Their simplicity often entices people to overuse "
"them in their pieces. This may be fine if you have a powerful machine, but "
"if - like me - you use a Raspberry Pi to jam with, you need to be careful "
"about how much work you ask it to do if you want to ensure the beats keep "
"flowing."
msgstr ""

#: 06.2-FX-in-Practice.md:12
msgid "Consider this code:"
msgstr ""

#: 06.2-FX-in-Practice.md:14
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: 06.2-FX-in-Practice.md:23
msgid ""
"In this code we're playing note 60 with a very short release time, so it's a "
"short note. We also want reverb so we've wrapped it in a reverb block. All "
"good so far. Except..."
msgstr ""

#: 06.2-FX-in-Practice.md:27
msgid ""
"Let's look at what the code does. First we have a `loop` which means "
"everything inside of it is repeated forever. Next we have a `with_fx` block. "
"This means we will create a new reverb FX *every time we loop*. This is like "
"having a separate FX reverb pedal for every time you pluck a string on a "
"guitar. It's cool that you can do this, but it's not always what you want. "
"For example, this code will struggle to run nicely on a Raspberry Pi. All "
"the work of creating the reverb and then waiting until it needs to be "
"stopped and removed is all handled by `with_fx` for you, but this takes CPU "
"power which may be precious."
msgstr ""

#: 06.2-FX-in-Practice.md:37
msgid ""
"How do we make it more similar to a traditional setup where our guitarist "
"has just *one* reverb pedal which all sounds pass through? Simple:"
msgstr ""

#: 06.2-FX-in-Practice.md:41
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  loop do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: 06.2-FX-in-Practice.md:50
msgid ""
"We put our loop *inside* the `with_fx` block. This way we only create a "
"single reverb for all notes played in our loop. This code is a lot more "
"efficient and would work fine on a Raspberry Pi."
msgstr ""

#: 06.2-FX-in-Practice.md:54
msgid "A compromise is to use `with_fx` over an iteration within a loop:"
msgstr ""

#: 06.2-FX-in-Practice.md:56
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    16.times do\n"
"      play 60, release: 0.1\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""

#: 06.2-FX-in-Practice.md:67
msgid ""
"This way we've lifted the `with_fx` out of the inner part of the `loop` and "
"we're now creating a new reverb every 16 notes."
msgstr ""

#: 06.2-FX-in-Practice.md:70
msgid ""
"This is such a common pattern that `with_fx` supports an opt to do exactly "
"this but without having to write the `16.times` block:"
msgstr ""

#: 06.2-FX-in-Practice.md:73
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb, reps: 16 do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: 06.2-FX-in-Practice.md:82
msgid ""
"Both the `reps: 16` and `16.times do` examples will behave identically. The "
"`reps: 16` essentially repeats the code in the `do/end` block 16 times so "
"you can use them both interchangeably and choose the one that feels best for "
"you."
msgstr ""

#: 06.2-FX-in-Practice.md:87
msgid ""
"Remember, there are no mistakes, just possibilities. However, some of these "
"approaches will have a different sound and also different performance "
"characteristics. So play around and use the approach that sounds best to you "
"whilst also working within the performance constraints of your platform."
msgstr ""

#: 07-Control.md:1
msgid "7 Control"
msgstr ""

#: 07-Control.md:3
msgid "Controlling running sounds"
msgstr ""

#: 07-Control.md:5
msgid ""
"So far we've looked at how you can trigger synths and samples, and also how "
"to change their default opts such as amplitude, pan, envelope settings and "
"more. Each sound triggered is essentially its own sound with its own list of "
"options set for the duration of the sound."
msgstr ""

#: 07-Control.md:11
msgid ""
"Wouldn't it also be cool if you could change a sound's opts whilst it's "
"still playing, just like you might bend a string of a guitar whilst it's "
"still vibrating?"
msgstr ""

#: 07-Control.md:15
msgid "You're in luck - this section will show you how to do exactly this."
msgstr ""

#: 07.1-Controlling-Running-Synths.md:1
msgid "7.1 Controlling Running Synths"
msgstr ""

#: 07.1-Controlling-Running-Synths.md:3
msgid "Controlling Running Synths"
msgstr ""

#: 07.1-Controlling-Running-Synths.md:5
msgid ""
"So far we've only concerned ourselves with triggering new sounds and FX. "
"However, Sonic Pi gives us the ability to manipulate and control currently "
"running sounds. We do this by using a variable to capture a reference to a "
"synth:"
msgstr ""

#: 07.1-Controlling-Running-Synths.md:10
#, no-wrap
msgid "s = play 60, release: 5"
msgstr ""

#: 07.1-Controlling-Running-Synths.md:14
msgid ""
"Here, we have a run-local variable `s` which represents the synth playing "
"note 60. Note that this is *run-local* - you can't access it from other runs "
"like functions."
msgstr ""

#: 07.1-Controlling-Running-Synths.md:18
msgid ""
"Once we have `s`, we can start controlling it via the `control` function:"
msgstr ""

#: 07.1-Controlling-Running-Synths.md:21 07.3-Sliding-Parameters.md:13
#, no-wrap
msgid ""
"s = play 60, release: 5\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""

#: 07.1-Controlling-Running-Synths.md:31
msgid ""
"The thing to notice is that we're not triggering 4 different synths here - "
"we're just triggering one synth and then change the pitch 3 times "
"afterwards, while it's playing."
msgstr ""

#: 07.1-Controlling-Running-Synths.md:35
msgid ""
"We can pass any of the standard opts to `control`, so you can control things "
"like `amp:`, `cutoff:` or `pan:`."
msgstr ""

#: 07.1-Controlling-Running-Synths.md:38
msgid "Non-controllable Options"
msgstr ""

#: 07.1-Controlling-Running-Synths.md:40
msgid ""
"Some of the opts can't be controlled once the synth has started. This is the "
"case for all the ADSR envelope parameters. You can find out which opts are "
"controllable by looking at their documentation in the help system. If the "
"documentation says *Can not be changed once set*, you know it's not possible "
"to control the opt after the synth has started."
msgstr ""

#: 07.2-Controlling-FX.md:1
msgid "7.2 Controlling FX"
msgstr ""

#: 07.2-Controlling-FX.md:3
msgid "Controlling FX"
msgstr ""

#: 07.2-Controlling-FX.md:5
msgid ""
"It is also possible to control FX, although this is achieved in a slightly "
"different way:"
msgstr ""

#: 07.2-Controlling-FX.md:8
#, no-wrap
msgid ""
"with_fx :reverb do |r|\n"
"  play 50\n"
"  sleep 0.5\n"
"  control r, mix: 0.7\n"
"  play 55\n"
"  sleep 1\n"
"  control r, mix: 0.9\n"
"  sleep 1\n"
"  play 62\n"
"end"
msgstr ""

#: 07.2-Controlling-FX.md:21
msgid ""
"Instead of using a variable, we use the goalpost parameters of the do/end "
"block. Inside the `|` bars, we need to specify a unique name for our running "
"FX which we then reference from the containing do/end block. This behaviour "
"is identical to using parameterised functions."
msgstr ""

#: 07.2-Controlling-FX.md:26
msgid "Now go and control some synths and FX!"
msgstr ""

#: 07.3-Sliding-Parameters.md:1
msgid "7.3 Sliding Options"
msgstr ""

#: 07.3-Sliding-Parameters.md:3
msgid "Sliding Opts"
msgstr ""

#: 07.3-Sliding-Parameters.md:5
msgid ""
"Whilst exploring the synth and FX opts, you might have noticed that there "
"are a number of opts ending with `_slide`. You might have even tried calling "
"them and seeing no effect. This is because they're not normal parameters, "
"they're special opts that only work when you control synths as introduced in "
"the previous section."
msgstr ""

#: 07.3-Sliding-Parameters.md:11
msgid "Consider the following example:"
msgstr ""

#: 07.3-Sliding-Parameters.md:23
msgid ""
"Here, you can hear the synth pitch changing immediately on each `control` "
"call. However, we might want the pitch to slide between changes. As we're "
"controlling the `note:` parameter, to add slide, we need to set the "
"`note_slide` parameter of the synth:"
msgstr ""

#: 07.3-Sliding-Parameters.md:28
#, no-wrap
msgid ""
"s = play 60, release: 5, note_slide: 1\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""

#: 07.3-Sliding-Parameters.md:38
msgid ""
"Now we hear the notes being bent between the `control` calls. It sounds "
"nice, doesn't it? You can speed up the slide by using a shorter time such as "
"`note_slide: 0.2` or slow it down by using a longer slide time."
msgstr ""

#: 07.3-Sliding-Parameters.md:43
msgid ""
"Every parameter that can be controlled has a corresponding `_slide` "
"parameter for you to play with."
msgstr ""

#: 07.3-Sliding-Parameters.md:46
msgid "Sliding is sticky"
msgstr ""

#: 07.3-Sliding-Parameters.md:48
msgid ""
"Once you've set a `_slide` parameter on a running synth, it will be "
"remembered and used every time you slide the corresponding parameter. To "
"stop sliding you must set the `_slide` value to 0 before the next `control` "
"call."
msgstr ""

#: 07.3-Sliding-Parameters.md:53
msgid "Sliding FX Opts"
msgstr ""

#: 07.3-Sliding-Parameters.md:55
msgid "It is also possible to slide FX opts:"
msgstr ""

#: 07.3-Sliding-Parameters.md:57
#, no-wrap
msgid ""
"with_fx :wobble, phase: 1, phase_slide: 5 do |e|\n"
"  use_synth :dsaw\n"
"  play 50, release: 5\n"
"  control e, phase: 0.025\n"
"end"
msgstr ""

#: 07.3-Sliding-Parameters.md:65
msgid ""
"Now have fun sliding things around for smooth transitions and flowing "
"control..."
msgstr ""

#: 08-Data-Structures.md:1
msgid "8 Data Structures"
msgstr ""

#: 08-Data-Structures.md:3
msgid "Data Structures"
msgstr ""

#: 08-Data-Structures.md:5
msgid "A very useful tool in a programmer's toolkit is a data structure."
msgstr ""

#: 08-Data-Structures.md:7
msgid ""
"Sometimes you may wish to represent and use more than one thing. For "
"example, you may find it useful to have a series of notes to play one after "
"another. Programming languages have data structures to allow you do exactly "
"this."
msgstr ""

#: 08-Data-Structures.md:12
msgid ""
"There are many exciting and exotic data structures available to programmers "
"- and people are always inventing new ones. However, for now we only really "
"need to consider a very simple data structure - the list."
msgstr ""

#: 08-Data-Structures.md:16
msgid ""
"Let's look at it in more detail. We'll cover its basic form and then also "
"how lists can be used to represent scales and chords."
msgstr ""

#: 08.1-Lists.md:1
msgid "8.1 Lists"
msgstr ""

#: 08.1-Lists.md:3
msgid "Lists"
msgstr ""

#: 08.1-Lists.md:5
msgid ""
"In this section we'll take a look at a data structure which is very useful - "
"the list. We met it very briefly before in the section on randomisation when "
"we randomly chose from a list of notes to play:"
msgstr ""

#: 08.1-Lists.md:9
#, no-wrap
msgid "play choose([50, 55, 62])"
msgstr ""

#: 08.1-Lists.md:13
msgid ""
"In this section we'll explore using lists to also represent chords and "
"scales. First let's recap how we might play a chord. Remember that if we "
"don't use `sleep`, sounds all happen at the same time:"
msgstr ""

#: 08.1-Lists.md:17
#, no-wrap
msgid ""
"play 52\n"
"play 55\n"
"play 59"
msgstr ""

#: 08.1-Lists.md:23
msgid "Let's look at other ways to represent this code."
msgstr ""

#: 08.1-Lists.md:25
msgid "Playing a List"
msgstr ""

#: 08.1-Lists.md:27
msgid ""
"One option is to place all the notes in a list: `[52, 55, 59]`. Our friendly "
"`play` function is smart enough to know how to play a list of notes. Try it:"
msgstr ""

#: 08.1-Lists.md:31
#, no-wrap
msgid "play [52, 55, 59]"
msgstr ""

#: 08.1-Lists.md:35
msgid ""
"Ooh, that's already nicer to read. Playing a list of notes doesn't stop you "
"from using any of the parameters as normal:"
msgstr ""

#: 08.1-Lists.md:38
#, no-wrap
msgid "play [52, 55, 59], amp: 0.3"
msgstr ""

#: 08.1-Lists.md:42
msgid ""
"Of course, you can also use the traditional note names instead of the MIDI "
"numbers:"
msgstr ""

#: 08.1-Lists.md:45
#, no-wrap
msgid "play [:E3, :G3, :B3]"
msgstr ""

#: 08.1-Lists.md:49
msgid ""
"Now those of you lucky enough to have studied some music theory might "
"recognise that chord as *E Minor* played in the 3rd octave."
msgstr ""

#: 08.1-Lists.md:52
msgid "Accessing a List"
msgstr ""

#: 08.1-Lists.md:54
msgid ""
"Another very useful feature of a list is the ability to get information out "
"of it. This may sound a bit strange, but it's no more complicated than "
"someone asking you to turn a book to page 23. With a list, you'd say, what's "
"the element at index 23? The only strange thing is that in programming "
"indexes usually start at 0 not 1."
msgstr ""

#: 08.1-Lists.md:60
msgid "With list indexes we don't count 1, 2, 3... Instead we count 0, 1, 2..."
msgstr ""

#: 08.1-Lists.md:62
msgid "Let's look at this in a little more detail. Take a look at this list:"
msgstr ""

#: 08.1-Lists.md:64
#, no-wrap
msgid "[52, 55, 59]"
msgstr ""

#: 08.1-Lists.md:68
msgid ""
"There's nothing especially scary about this. Now, what's the second element "
"in that list? Yes, of course, it's `55`. That was easy. Let's see if we can "
"get the computer to answer it for us too:"
msgstr ""

#: 08.1-Lists.md:72 08.4-Rings.md:12
#, no-wrap
msgid "puts [52, 55, 59][1]"
msgstr ""

#: 08.1-Lists.md:76
msgid ""
"OK, that looks a bit weird if you've never seen anything like it before. "
"Trust me though, it's not too hard. There are three parts to the line above: "
"the word `puts` , our list `52, 55, 59` and our index `[1]`. Firstly we're "
"saying `puts` because we want Sonic Pi to print the answer out for us in the "
"log. Next, we're giving it our list, and finally our index is asking for the "
"second element. We need to surround our index with square brackets and "
"because counting starts at `0`, the index for the second element is `1`. "
"Look:"
msgstr ""

#: 08.1-Lists.md:85
#, no-wrap
msgid ""
"# indexes:  0   1   2\n"
"           [52, 55, 59]"
msgstr ""

#: 08.1-Lists.md:90
msgid ""
"Try running the code `puts [52, 55, 59][1]` and you'll see `55` pop up in "
"the log. Change the index `1` to other indexes, try longer lists and think "
"about how you might use a list in your next code jam. For example, what "
"musical structures might be represented as a series of numbers..."
msgstr ""

#: 08.2-Chords.md:1
msgid "8.2 Chords"
msgstr ""

#: 08.2-Chords.md:5
msgid ""
"Sonic Pi has built-in support for chord names which will return lists. Try "
"it for yourself:"
msgstr ""

#: 08.2-Chords.md:8
#, no-wrap
msgid "play chord(:E3, :minor)"
msgstr ""

#: 08.2-Chords.md:12
msgid ""
"Now, we're really getting somewhere. That looks a lot more pretty than the "
"raw lists (and is easier to read for other people). So what other chords "
"does Sonic Pi support? Well, a *lot*. Try some of these:"
msgstr ""

#: 08.2-Chords.md:16
msgid "`chord(:E3, :m7)`"
msgstr ""

#: 08.2-Chords.md:17
msgid "`chord(:E3, :minor)`"
msgstr ""

#: 08.2-Chords.md:18
msgid "`chord(:E3, :dim7)`"
msgstr ""

#: 08.2-Chords.md:19
msgid "`chord(:E3, :dom7)`"
msgstr ""

#: 08.2-Chords.md:21
msgid "Arpeggios"
msgstr ""

#: 08.2-Chords.md:23
msgid ""
"We can easily turn chords into arpeggios with the function `play_pattern`:"
msgstr ""

#: 08.2-Chords.md:26
#, no-wrap
msgid "play_pattern chord(:E3, :m7)"
msgstr ""

#: 08.2-Chords.md:30
msgid ""
"Ok, that's not so fun - it played it really slowly. `play_pattern` will play "
"each note in the list separated with a call to `sleep 1` between each call "
"to `play`. We can use another function `play_pattern_timed` to specify our "
"own timings and speed things up:"
msgstr ""

#: 08.2-Chords.md:35
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m7), 0.25"
msgstr ""

#: 08.2-Chords.md:39
msgid ""
"We can even pass a list of times which it will treat as a circle of times:"
msgstr ""

#: 08.2-Chords.md:42
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m13), [0.25, 0.5]"
msgstr ""

#: 08.2-Chords.md:46
msgid "This is the equivalent to:"
msgstr ""

#: 08.2-Chords.md:48
#, no-wrap
msgid ""
"play 52\n"
"sleep 0.25\n"
"play 55\n"
"sleep 0.5\n"
"play 59\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.5\n"
"play 66\n"
"sleep 0.25\n"
"play 69\n"
"sleep 0.5\n"
"play 73"
msgstr ""

#: 08.2-Chords.md:64
msgid "Which would you prefer to write?"
msgstr ""

#: 08.3-Scales.md:1
msgid "8.3 Scales"
msgstr ""

#: 08.3-Scales.md:3
msgid "Scales"
msgstr ""

#: 08.3-Scales.md:5
msgid ""
"Sonic Pi has support for a wide range of scales. How about playing a C3 "
"major scale?"
msgstr ""

#: 08.3-Scales.md:8
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major), 0.125, release: 0.1"
msgstr ""

#: 08.3-Scales.md:12
msgid "We can even ask for more octaves:"
msgstr ""

#: 08.3-Scales.md:14
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major, num_octaves: 3), 0.125, release: 0.1"
msgstr ""

#: 08.3-Scales.md:18
msgid "How about all the notes in a pentatonic scale?"
msgstr ""

#: 08.3-Scales.md:20
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major_pentatonic, num_octaves: 3), 0.125, release: 0.1"
msgstr ""

#: 08.3-Scales.md:24
msgid "Random notes"
msgstr ""

#: 08.3-Scales.md:26
msgid ""
"Chords and scales are great ways of constraining a random choice to "
"something meaningful. Have a play with this example which picks random notes "
"from the chord E3 minor:"
msgstr ""

#: 08.3-Scales.md:30
#, no-wrap
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play choose(chord(:E3, :minor)), release: 0.3, cutoff: rrand(60, 120)\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: 08.3-Scales.md:38
msgid "Try switching in different chord names and cutoff ranges."
msgstr ""

#: 08.3-Scales.md:40
msgid "Discovering Chords and Scales"
msgstr ""

#: 08.3-Scales.md:42
msgid ""
"To find out which scales and chords are supported by Sonic Pi simply click "
"the Lang button on the far left of this tutorial and then choose either "
"chord or scale in the API list. In the information in the main panel, scroll "
"down until you see a long list of chords or scales (depending on which "
"you're looking at)."
msgstr ""

#: 08.3-Scales.md:48
msgid "Have fun and remember: there are no mistakes, only opportunities."
msgstr ""

#: 08.4-Rings.md:1
msgid "8.4 Rings"
msgstr ""

#: 08.4-Rings.md:3 A.11-beat-tracking.md:62
msgid "Rings"
msgstr ""

#: 08.4-Rings.md:5
msgid ""
"An interesting spin on standard lists are rings. If you know some "
"programming, you might have come across ring buffers or ring arrays. Here, "
"we'll just go for ring - it's short and simple."
msgstr ""

#: 08.4-Rings.md:9
msgid ""
"In the previous section on lists we saw how we could fetch elements out of "
"them by using the indexing mechanism:"
msgstr ""

#: 08.4-Rings.md:16
msgid ""
"Now, what happens if you want index `100`? Well, there's clearly no element "
"at index 100 as the list has only three elements in it. So Sonic Pi will "
"return you `nil` which means nothing."
msgstr ""

#: 08.4-Rings.md:20
msgid ""
"However, consider you have a counter such as the current beat which "
"continually increases. Let's create our counter and our list:"
msgstr ""

#: 08.4-Rings.md:23
#, no-wrap
msgid ""
"counter = 0\n"
"notes = [52, 55, 59]"
msgstr ""

#: 08.4-Rings.md:28
msgid "We can now use our counter to access a note in our list:"
msgstr ""

#: 08.4-Rings.md:30
#, no-wrap
msgid "puts notes[counter]"
msgstr ""

#: 08.4-Rings.md:34
msgid ""
"Great, we got `52`. Now, let's increment our counter and get another note:"
msgstr ""

#: 08.4-Rings.md:37
#, no-wrap
msgid ""
"counter = (inc counter)\n"
"puts notes[counter]"
msgstr ""

#: 08.4-Rings.md:42
msgid ""
"Super, we now get `55` and if we do it again we get `59`. However, if we do "
"it again, we'll run out of numbers in our list and get `nil`. What if we "
"wanted to just loop back round and start at the beginning of the list again? "
"This is what rings are for."
msgstr ""

#: 08.4-Rings.md:47
msgid "Creating Rings"
msgstr ""

#: 08.4-Rings.md:49
msgid ""
"We can create rings one of two ways. Either we use the `ring` function with "
"the elements of the ring as parameters:"
msgstr ""

#: 08.4-Rings.md:52
#, no-wrap
msgid "(ring 52, 55, 59)"
msgstr ""

#: 08.4-Rings.md:56
msgid ""
"Or we can take a normal list and convert it to a ring by sending it the `."
"ring` message:"
msgstr ""

#: 08.4-Rings.md:59
#, no-wrap
msgid "[52, 55, 59].ring"
msgstr ""

#: 08.4-Rings.md:63
msgid "Indexing Rings"
msgstr ""

#: 08.4-Rings.md:65
msgid ""
"Once we have a ring, you can use it in exactly the same way you would use a "
"normal list with the exception that you can use indexes that are negative or "
"larger than the size of the ring and they'll wrap round to always point at "
"one of the ring's elements:"
msgstr ""

#: 08.4-Rings.md:70
#, no-wrap
msgid ""
"(ring 52, 55, 59)[0] #=> 52\n"
"(ring 52, 55, 59)[1] #=> 55\n"
"(ring 52, 55, 59)[2] #=> 59\n"
"(ring 52, 55, 59)[3] #=> 52\n"
"(ring 52, 55, 59)[-1] #=> 59"
msgstr ""

#: 08.4-Rings.md:78
msgid "Using Rings"
msgstr ""

#: 08.4-Rings.md:80
msgid ""
"Let's say we're using a variable to represent the current beat number. We "
"can use this as an index into our ring to fetch notes to play, or release "
"times or anything useful we've stored in our ring regardless of the beat "
"number we're currently on."
msgstr ""

#: 08.4-Rings.md:85
msgid "Scales and Chords are Rings"
msgstr ""

#: 08.4-Rings.md:87
msgid ""
"A useful thing to know is that the lists returned by `scale` and `chord` are "
"also rings and allow you to access them with arbitrary indexes."
msgstr ""

#: 08.4-Rings.md:90
msgid "Ring Constructors"
msgstr ""

#: 08.4-Rings.md:92
msgid ""
"In addition to `ring` there are a number of other functions which will "
"construct a ring for us."
msgstr ""

#: 08.4-Rings.md:95
msgid "`range` invites you specify a starting point, end point and step size."
msgstr ""

#: 08.4-Rings.md:96
msgid ""
"`bools` allows you to use `1`s and `0`s to succinctly represent booleans."
msgstr ""

#: 08.4-Rings.md:97
msgid "`knit` allows you to knit a sequence of repeated values."
msgstr ""

#: 08.4-Rings.md:98
msgid "`spread` creates a ring of bools with a Euclidean distribution."
msgstr ""

#: 08.4-Rings.md:100
msgid "Take a look at their respective documentation for more information."
msgstr ""

#: 08.5-Ring-Chains.md:1
msgid "8.5 Ring Chains"
msgstr ""

#: 08.5-Ring-Chains.md:3
msgid "Ring Chains"
msgstr ""

#: 08.5-Ring-Chains.md:5
msgid ""
"In addition to the constructors such as `range` and `spread` another way of "
"creating new rings is to manipulate existing rings."
msgstr ""

#: 08.5-Ring-Chains.md:9
msgid "Chain Commands"
msgstr ""

#: 08.5-Ring-Chains.md:11
msgid "To explore this, take a simple ring:"
msgstr ""

#: 08.5-Ring-Chains.md:13
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50)"
msgstr ""

#: 08.5-Ring-Chains.md:17
msgid ""
"What if we wanted it backwards? Well we'd use the chain command `.reverse` "
"to take the ring and turn it around:"
msgstr ""

#: 08.5-Ring-Chains.md:20
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).reverse  #=> (ring 50, 40, 30, 20, 10)"
msgstr ""

#: 08.5-Ring-Chains.md:24
msgid "Now, what if we wanted the first three values from the ring?"
msgstr ""

#: 08.5-Ring-Chains.md:26
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).take(3)  #=> (ring 10, 20, 30)"
msgstr ""

#: 08.5-Ring-Chains.md:30
msgid "Finally, what if we wanted to shuffle the ring?"
msgstr ""

#: 08.5-Ring-Chains.md:32
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).shuffle  #=> (ring 40, 30, 10, 50, 20)"
msgstr ""

#: 08.5-Ring-Chains.md:36
msgid "Multiple Chains"
msgstr ""

#: 08.5-Ring-Chains.md:38
msgid ""
"This is already a powerful way of creating new rings. However, the *real* "
"power comes when you chain a few of these commands together."
msgstr ""

#: 08.5-Ring-Chains.md:41
msgid ""
"How about shuffling the ring, dropping 1 element and then taking the next 3?"
msgstr ""

#: 08.5-Ring-Chains.md:43
msgid "Let's take this in stages:"
msgstr ""

#: 08.5-Ring-Chains.md:45
msgid "`(ring 10, 20, 30, 40, 50)` - our initial ring"
msgstr ""

#: 08.5-Ring-Chains.md:46
msgid ""
"`(ring 10, 20, 30, 40, 50).shuffle` - shuffles - `(ring 40, 30, 10, 50, 20)`"
msgstr ""

#: 08.5-Ring-Chains.md:47
msgid ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1)` - drop 1 - `(ring 30, 10, 50, "
"20)`"
msgstr ""

#: 08.5-Ring-Chains.md:48
msgid ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1).take(3)` - take 3 - `(ring 30, "
"10, 50)`"
msgstr ""

#: 08.5-Ring-Chains.md:50
msgid ""
"Can you see how we can just create a long chain of these methods by just "
"*sticking them together*. We can combine these in any order we want creating "
"an extremely rich and powerful way of generating new rings from existing "
"ones."
msgstr ""

#: 08.5-Ring-Chains.md:55
msgid "Immutability"
msgstr ""

#: 08.5-Ring-Chains.md:57
msgid ""
"These rings have a powerful and important property. They are immutable which "
"means that they can not change. This means that the chaining methods "
"described in this section *do not change rings* rather they *create new "
"rings*. This means you're free to share rings across threads and start "
"chaining them within a thread knowing you won't be affecting any other "
"thread using the same ring."
msgstr ""

#: 08.5-Ring-Chains.md:64
msgid "Available Chain Methods"
msgstr ""

#: 08.5-Ring-Chains.md:66
msgid "Here's a list of the available chain methods for you to play with:"
msgstr ""

#: 08.5-Ring-Chains.md:68
msgid "`.reverse` - returns a reversed version of the ring"
msgstr ""

#: 08.5-Ring-Chains.md:69
msgid "`.sort` - creates a sorted version of the ring"
msgstr ""

#: 08.5-Ring-Chains.md:70
msgid "`.shuffle` - creates a shuffled version of the ring"
msgstr ""

#: 08.5-Ring-Chains.md:71
msgid ""
"`.pick(3)` - returns a ring with the results of calling `.choose` 3 times"
msgstr ""

#: 08.5-Ring-Chains.md:72
msgid ""
"`.pick` - similar to `.pick(3)` only the size defaults to the same as the "
"original ring"
msgstr ""

#: 08.5-Ring-Chains.md:73
msgid "`.take(5)` - returns a new ring containing only the first 5 elements"
msgstr ""

#: 08.5-Ring-Chains.md:74
msgid ""
"`.drop(3)` - returns a new ring with everything but the first 3 elements"
msgstr ""

#: 08.5-Ring-Chains.md:75
msgid "`.butlast` - returns a new ring with the last element missing"
msgstr ""

#: 08.5-Ring-Chains.md:76
msgid "`.drop_last(3)` - returns a new ring with the last 3 elements missing"
msgstr ""

#: 08.5-Ring-Chains.md:77
msgid "`.take_last(6)`- returns a new ring with only the last 6 elements"
msgstr ""

#: 08.5-Ring-Chains.md:78
msgid "`.stretch(2)` - repeats each element in the ring twice"
msgstr ""

#: 08.5-Ring-Chains.md:79
msgid "`.repeat(3)` - repeats the entire ring 3 times"
msgstr ""

#: 08.5-Ring-Chains.md:80
msgid "`.mirror` - adds the ring to a reversed version of itself"
msgstr ""

#: 08.5-Ring-Chains.md:81
msgid "`.reflect` - same as mirror but doesn't duplicate middle value"
msgstr ""

#: 08.5-Ring-Chains.md:83
msgid ""
"Of course, those chain methods that take numbers can take other numbers too! "
"So feel free to call `.drop(5)` instead of `.drop(3)` if you want to drop "
"the first 5 elements."
msgstr ""

#: 09-Live-Coding.md:1
msgid "9 Live Coding"
msgstr ""

#: 09-Live-Coding.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write "
"and modify code live to make music, just like you might perform live with a "
"guitar. One advantage of this approach is to give you more feedback whilst "
"composing (get a simple loop running and keep tweaking it till it sounds "
"just perfect). However, the main advantage is that you can take Sonic Pi on "
"stage and gig with it."
msgstr ""

#: 09-Live-Coding.md:12
msgid ""
"In this section we'll cover the fundamentals of turning your static code "
"compositions into dynamic performances."
msgstr ""

#: 09-Live-Coding.md:15
msgid "Hold on to your seats..."
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:1
msgid "9.1 Live Coding Fundamentals"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:5
msgid ""
"Now we've learned enough to really start having some fun. In this section "
"we'll draw from all the previous sections and show you how you can start "
"making your music compositions live and turning them into a performance. For "
"that we'll need 3 main ingredients:"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:10
msgid "An ability to write code that makes sounds - CHECK!"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:11
msgid "An ability to write functions - CHECK!"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:12
msgid "An ability to use (named) threads - CHECK!"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:14
msgid ""
"Alrighty, let's get started. Let's live code our first sounds. We first need "
"a function containing the code we want to play. Let's start simple. We also "
"want to loop calls to that function in a thread:"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:18
#, no-wrap
msgid ""
"define :my_loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"in_thread(name: :looper) do\n"
"  loop do\n"
"    my_loop\n"
"  end\n"
"end"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:31
msgid ""
"If that looks a little too complicated to you, go back and re-read the "
"sections on functions and threads. It's not too complicated if you've "
"already wrapped your head around these things."
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:35
msgid ""
"What we have here is a function definition which just plays note 50 and "
"sleeps for a beat. We then define a named thread called `:looper` which just "
"loops around calling `my_loop` repeatedly."
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:39
msgid "If you run this code, you'll hear note 50 repeating again and again..."
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:41
msgid "Changing it up"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:43
msgid ""
"Now, this is where the fun starts. Whilst the code is *still running* change "
"50 to another number, say 55, then press the Run button again. Woah! It "
"changed! Live!"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:47
msgid ""
"It didn't add a new layer because we're using named threads which only allow "
"one thread for each name. Also, the sound changed because we *redefined* the "
"function. We gave `:my_loop` a new definition. When the `:looper` thread "
"looped around it simply called the new definition."
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:52
msgid ""
"Try changing it again, change the note, change the sleep time. How about "
"adding a `use_synth` statement? For example, change it to:"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:55
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play 50, release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:63
msgid ""
"Now it sounds pretty interesting, but we can spice it up further. Instead of "
"playing the same note again and again, try playing a chord:"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:67
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play chord(:e3, :minor), release: 0.3\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:75
msgid "How about playing random notes from the chord:"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:77
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:85
msgid "Or using a random cutoff value:"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:87
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:95
msgid "Finally, add some drums:"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:97
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  sample :drum_bass_hard, rate: rrand(0.5, 2)\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:106
msgid "Now things are getting exciting!"
msgstr ""

#: 09.1-Live-Coding-Fundamentals.md:108
msgid ""
"However, before you jump up and start live coding with functions and "
"threads, stop what you're doing and read the next section on `live_loop` "
"which will change the way you code in Sonic Pi forever..."
msgstr ""

#: 09.2-Live-Loops.md:1
msgid "9.2 Live Loops"
msgstr ""

#: 09.2-Live-Loops.md:3
msgid "Live Loops"
msgstr ""

#: 09.2-Live-Loops.md:5
msgid ""
"Ok, so this section of the tutorial is the real gem. If you only read one "
"section, it should be this one. If you read the previous section on Live "
"Coding Fundamentals, `live_loop` is a simple way of doing exactly that but "
"without having to write so much."
msgstr ""

#: 09.2-Live-Loops.md:10
msgid ""
"If you didn't read the previous section, `live_loop` is the best way to jam "
"with Sonic Pi."
msgstr ""

#: 09.2-Live-Loops.md:13
msgid "Let's play. Write the following in a new buffer:"
msgstr ""

#: 09.2-Live-Loops.md:15
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 60\n"
"  sleep 1\n"
"end"
msgstr ""

#: 09.2-Live-Loops.md:22
msgid ""
"Now press the Run button. You hear a basic beep every beat. Nothing fun "
"there. However, don't press Stop just yet. Change the `60` to `65` and press "
"Run again."
msgstr ""

#: 09.2-Live-Loops.md:26
msgid ""
"Woah! It changed *automatically* without missing a beat. This is live coding."
msgstr ""

#: 09.2-Live-Loops.md:28
msgid ""
"Why not change it to be more bass like? Just update your code whilst it's "
"playing:"
msgstr ""

#: 09.2-Live-Loops.md:30
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8\n"
"  sleep 8\n"
"end"
msgstr ""

#: 09.2-Live-Loops.md:38
msgid "Then hit Run."
msgstr ""

#: 09.2-Live-Loops.md:40
msgid "Let's make the cutoff move around:"
msgstr ""

#: 09.2-Live-Loops.md:42
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""

#: 09.2-Live-Loops.md:50
msgid "Hit Run again."
msgstr ""

#: 09.2-Live-Loops.md:52
msgid "Add some drums:"
msgstr ""

#: 09.2-Live-Loops.md:54
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""

#: 09.2-Live-Loops.md:63
msgid "Change the note from `e1` to `c1`:"
msgstr ""

#: 09.2-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""

#: 09.2-Live-Loops.md:74
msgid "Now stop listening to me and play around yourself! Have fun!"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:1
msgid "9.3 Multiple Live Loops"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:3
msgid "Multiple Live Loops"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:5
msgid "Consider the following live loop:"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:7
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 50\n"
"  sleep 1\n"
"end"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:14
msgid ""
"You may have wondered why it needs the name `:foo`. This name is important "
"because it signifies that this live loop is different from all other live "
"loops."
msgstr ""

#: 09.3-Multiple-Live-Loops.md:18
msgid "*There can never be two live loops running with the same name*."
msgstr ""

#: 09.3-Multiple-Live-Loops.md:20
msgid ""
"This means that if we want multiple concurrently running live loops, we just "
"need to give them different names:"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:23
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:36
msgid ""
"You can now update and change each live loop independently and it all just "
"works."
msgstr ""

#: 09.3-Multiple-Live-Loops.md:39
msgid "Syncing Live Loops"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:41
msgid ""
"One thing you might have already noticed is that live loops work "
"automatically with the thread cue mechanism we explored previously. Every "
"time the live loop loops, it generates a new `cue` event with the name of "
"the live loop. We can therefore `sync` on these cues to ensure our loops are "
"in sync without having to stop anything."
msgstr ""

#: 09.3-Multiple-Live-Loops.md:47
msgid "Consider this badly synced code:"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:49
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.4\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:61
msgid ""
"Let's see if we can fix the timing and sync without stopping it. First, "
"let's fix the `:foo` loop to make the sleep a factor of 1 - something like "
"`0.5` will do:"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:77
msgid ""
"We're not quite finished yet though - you'll notice that the beats don't "
"quite line up correctly. This is because the loops are *out of phase*. Let's "
"fix that by syncing one to the other:"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:81
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sync :foo\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""

#: 09.3-Multiple-Live-Loops.md:94
msgid "Wow, everything is now perfectly in time - all without stopping."
msgstr ""

#: 09.3-Multiple-Live-Loops.md:96
msgid "Now, go forth and live code with live loops!"
msgstr ""

#: 09.4-Ticking.md:1
msgid "9.4 Ticking"
msgstr ""

#: 09.4-Ticking.md:3
msgid "Ticking"
msgstr ""

#: 09.4-Ticking.md:5
msgid ""
"Something you'll likely find yourself doing a lot when live coding is "
"looping through rings. You'll be putting notes into rings for melodies, "
"sleeps for rhythms, chord progressions, timbral variations, etc. etc."
msgstr ""

#: 09.4-Ticking.md:9
msgid "Ticking Rings"
msgstr ""

#: 09.4-Ticking.md:11
msgid ""
"Sonic Pi provides a *very* handy tool for working with rings within "
"`live_loop`s. It's called the tick system. In the section about the rings we "
"were talking about the counter that is constantly increasing, like a current "
"beat number. Tick just implements this idea. It provides you with the "
"ability to *tick through rings*. Let's look at an example:"
msgstr ""

#: 09.4-Ticking.md:17
#, no-wrap
msgid ""
"counter = 0\n"
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic)[counter], release: 0.1\n"
"  counter += 1\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: 09.4-Ticking.md:26
msgid "This is equivalent to:"
msgstr ""

#: 09.4-Ticking.md:28
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: 09.4-Ticking.md:35
msgid ""
"Here, we're just grabbing the scale E3 minor pentatonic and ticking through "
"each element. This is done by adding `.tick` to the end of the scale "
"declaration. This tick is local to the live loop, so each live loop can have "
"its own independent tick:"
msgstr ""

#: 09.4-Ticking.md:40
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play (scale :e2, :minor_pentatonic, num_octaves: 3).tick, release: 0.25\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: 09.4-Ticking.md:53
msgid "Tick"
msgstr ""

#: 09.4-Ticking.md:55
msgid ""
"You can also call `tick` as a standard fn and use the value as an index:"
msgstr ""

#: 09.4-Ticking.md:57
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  idx = tick\n"
"  play (scale :e3, :minor_pentatonic)[idx], release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: 09.4-Ticking.md:65
msgid ""
"However, it is much nicer to call `.tick` at the end. The `tick` fn is for "
"when you want to do fancy things with the tick value and for when you want "
"to use ticks for other things than indexing into rings."
msgstr ""

#: 09.4-Ticking.md:70
msgid "Look"
msgstr ""

#: 09.4-Ticking.md:72
msgid ""
"The magical thing about tick is that not only does it return a new index (or "
"the value of the ring at that index) it also makes sure that next time you "
"call tick, it's the next value. Take a look at the examples in the docs for "
"`tick` for many ways of working with this. However, for now, it's important "
"to point out that sometimes you'll want to just look at the current tick "
"value and *not increase* it. This is available via the `look` fn. You can "
"call `look` as a standard fn or by adding `.look` to the end of a ring."
msgstr ""

#: 09.4-Ticking.md:81
msgid "Naming Ticks"
msgstr ""

#: 09.4-Ticking.md:83
msgid ""
"Finally, sometimes you'll need more than one tick per live loop. This is "
"achieved by giving your tick a name:"
msgstr ""

#: 09.4-Ticking.md:86
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick(:foo), release: 0.1\n"
"  sleep (ring 0.125, 0.25).tick(:bar)\n"
"end"
msgstr ""

#: 09.4-Ticking.md:93
msgid ""
"Here we're using two ticks one for the note to play and another for the "
"sleep time. As they're both in the same live loop, to keep them separate we "
"need to give them unique names. This is exactly the same kind of thing as "
"naming `live_loop`s - we just pass a symbol prefixed with a `:`. In the "
"example above we called one tick `:foo` and the other `:bar`. If we want to "
"`look` at these we also need to pass the name of the tick to `look`."
msgstr ""

#: 09.4-Ticking.md:101
msgid "Don't make it too complicated"
msgstr ""

#: 09.4-Ticking.md:103
msgid ""
"Most of the power in the tick system isn't useful when you get started. "
"Don't try and learn everything in this section. Just focus on ticking "
"through a single ring. That'll give you most of the joy and simplicity of "
"ticking through rings in your `live_loop`s."
msgstr ""

#: 09.4-Ticking.md:108
msgid ""
"Take a look at the documentation for `tick` where there are many useful "
"examples and happy ticking!"
msgstr ""

#: 10-Essential-Knowledge.md:1
msgid "10 Essential Knowledge"
msgstr ""

#: 10-Essential-Knowledge.md:3
msgid "Essential Knowledge"
msgstr ""

#: 10-Essential-Knowledge.md:5
msgid ""
"This section will cover some very useful - in fact *essential* - knowledge "
"for getting the most out of your Sonic Pi experience."
msgstr ""

#: 10-Essential-Knowledge.md:8
msgid ""
"We'll cover how to take advantage of the many keyboard shortcuts available "
"to you, how to share your work and some tips on performing with Sonic Pi."
msgstr ""

#: 10.1-Using-Shortcuts.md:1
msgid "10.1 Using Shortcuts"
msgstr ""

#: 10.1-Using-Shortcuts.md:3
msgid "Using Shortcuts"
msgstr ""

#: 10.1-Using-Shortcuts.md:5
msgid ""
"Sonic Pi is as much an instrument as a coding environment. Shortcuts can "
"therefore make playing Sonic Pi much more *efficient and natural* - "
"especially when you're playing live in front of an audience."
msgstr ""

#: 10.1-Using-Shortcuts.md:9
msgid ""
"Much of Sonic Pi can be controlled through the keyboard. As you gain more "
"familiarity working and performing with Sonic Pi, you'll likely start using "
"the shortcuts more and more. *I personally touch-type* (I recommend you "
"consider learning too) and find myself frustrated whenever I need to reach "
"for the mouse as it slows me down. I therefore use all of these shortcuts on "
"a very regular basis!"
msgstr ""

#: 10.1-Using-Shortcuts.md:16
msgid ""
"Therefore, if you learn the shortcuts, you'll learn to use your keyboard "
"effectively and you'll be live coding like a pro in no time."
msgstr ""

#: 10.1-Using-Shortcuts.md:19
msgid ""
"However, *don't try and learn them all at once*, just try and remember the "
"ones you use most and then keep adding more to your practice."
msgstr ""

#: 10.1-Using-Shortcuts.md:22
msgid "Consistency across Platforms"
msgstr ""

#: 10.1-Using-Shortcuts.md:24
msgid ""
"Imagine you're learning the clarinet. You'd expect all clarinets of all "
"makes to have similar controls and fingerings. If they didn't, you'd have a "
"tough time switching between different clarinets and you'd be stuck to using "
"just one make."
msgstr ""

#: 10.1-Using-Shortcuts.md:29
msgid ""
"Unfortunately the three major operating systems (Linux, Mac OS X and "
"Windows) come with their own standard defaults for actions such as cut and "
"paste etc. Sonic Pi will try and honour these standards. However *priority "
"is placed on consistency across platforms* within Sonic Pi rather than "
"attempting to conform to a given platform's standards. This means that when "
"you learn the shortcuts whilst playing with Sonic Pi on your Raspberry Pi, "
"you can move to the Mac or PC and feel right at home."
msgstr ""

#: 10.1-Using-Shortcuts.md:37
msgid "Control and Meta"
msgstr ""

#: 10.1-Using-Shortcuts.md:39
msgid ""
"Part of the notion of consistency is the naming of shortcuts. In Sonic Pi we "
"use the names *Control* and *Meta* to refer to the two main combination "
"keys. On all platforms *Control* is the same. However, on Linux and Windows, "
"*Meta* is actually the *Alt* key while on Mac *Meta* is the *Command* key. "
"For consistency we'll use the term *Meta* - just remember to map that to the "
"appropriate key on your operating system."
msgstr ""

#: 10.1-Using-Shortcuts.md:46
msgid "Abbreviations"
msgstr ""

#: 10.1-Using-Shortcuts.md:48
msgid ""
"To help keep things simple and readable, we'll use the abbreviations *C-* "
"for *Control* plus another key and *M-* for *Meta* plus another key. For "
"example, if a shortcut requires you to hold down both *Meta* and *r* we'll "
"write that as `M-r`. The *-* just means \"at the same time as.\""
msgstr ""

#: 10.1-Using-Shortcuts.md:53
msgid "The following are some of the shortcuts I find most useful."
msgstr ""

#: 10.1-Using-Shortcuts.md:55
msgid "Stopping and starting"
msgstr ""

#: 10.1-Using-Shortcuts.md:57
msgid ""
"Instead of always reaching for the mouse to run your code, you can simply "
"press `M-r`. Similarly, to stop running code you can press `M-s`."
msgstr ""

#: 10.1-Using-Shortcuts.md:60 10.2-Shortcut-Cheatsheet.md:51
msgid "Navigation"
msgstr ""

#: 10.1-Using-Shortcuts.md:62
msgid ""
"I'm really lost without the navigation shortcuts. I therefore highly "
"recommend you spend the time to learn them. These shortcuts also work "
"extremely well when you've learned to touch type as they use the standard "
"letters rather than requiring you to move your hand to the mouse or the "
"arrow keys on your keyboard."
msgstr ""

#: 10.1-Using-Shortcuts.md:68
msgid ""
"You can move to the beginning of the line with `C-a`, the end of the line "
"with `C-e`, up a line with `C-p`, down a line with `C-n`, forward a "
"character with `C-f`, and back a character with `C-b`. You can even delete "
"all the characters from the cursor to the end of the line with `C-k`."
msgstr ""

#: 10.1-Using-Shortcuts.md:74
msgid "Tidy Code"
msgstr ""

#: 10.1-Using-Shortcuts.md:76
msgid "To auto-align your code simply press `M-m`."
msgstr ""

#: 10.1-Using-Shortcuts.md:78
msgid "Help System"
msgstr ""

#: 10.1-Using-Shortcuts.md:80
msgid ""
"To toggle the help system you can press `M-i`. However, a much more useful "
"shortcut to know is `C-i` which will look up the word underneath the cursor "
"and display the docs if it finds anything. Instant help!"
msgstr ""

#: 10.1-Using-Shortcuts.md:84
msgid "For a full list take a look at section 10.2 Shortcut Cheatsheet."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:1
msgid "10.2 Shortcut Cheatsheet"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:3
msgid "Shortcut Cheatsheet"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:5
msgid ""
"The following is a summary of the main shortcuts available within Sonic Pi. "
"Please see Section 10.1 for motivation and background."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:8
msgid "Conventions"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:10
msgid ""
"In this list, we use the following conventions (where *Meta* is one of *Alt* "
"on Windows/Linux or *Cmd* on Mac):"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:13
msgid ""
"`C-a` means hold the *Control* key then press the *a* key whilst holding "
"them both at the same time, then releasing."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:14
msgid ""
"`M-r` means hold the *Meta* key and then press the *r* key whilst holding "
"them both at the same time, then releasing."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:15
msgid ""
"`S-M-z` means hold the *Shift* key, then the *Meta* key, then finally the "
"*z* key all at the same time, then releasing."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:16
msgid ""
"`C-M-f` means hold the *Control* key, then press *Meta* key, finally the *f* "
"key all at the same time, then releasing."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:18
msgid "Main Application Manipulation"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:20
msgid "`M-r` - Run code"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:21
msgid "`M-s` - Stop code"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:22
msgid "`M-i` - Toggle Help System"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:23
msgid "`M-p` - Toggle Preferences"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:24
msgid "`M-{` - Switch buffer to the left"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:25
msgid "`M-}` - Switch buffer to the right"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:26
msgid "`M-+` - Increase text size of current buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:27
msgid "`M--` - Decrease text size of current buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:29
msgid "Selection/Copy/Paste"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:31
msgid "`M-a` - Select all"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:32
msgid "`M-c` - Copy selection to paste buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:33
msgid "`M-]` - Copy selection to paste buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:34
msgid "`M-x` - Cut selection to paste buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:35
msgid "`C-]` - Cut selection to paste buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:36
msgid "`C-k` - Cut to the end of the line"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:37
msgid "`M-v` - Paste from paste buffer to editor"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:38
msgid "`C-y` - Paste from paste buffer to editor"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:39
msgid ""
"`C-SPACE` - Set mark. Navigation will now manipulate highlighted region. Use "
"`C-g` to escape."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:41
msgid "Text Manipulation"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:43
msgid "`M-m` - Align all text"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:44
msgid "`Tab` - Align current line or selection (or select autocompletion)"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:45
msgid "`C-l` - Centre editor"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:46
msgid "`M-/` - Comment/Uncomment current line or selection"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:47
msgid "`C-t` - Transpose/swap characters"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:48
msgid "`M-u` - Convert next word (or selection) to upper case."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:49
msgid "`M-l` - Convert next word (or selection) to lower case."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:53
msgid "`C-a` - Move to beginning of line"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:54
msgid "`C-e` - Move to end of line"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:55
msgid "`C-p` - Move to previous line"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:56
msgid "`C-n` - Move to next line"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:57
msgid "`C-f` - Move forward one character"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:58
msgid "`C-b` - Move backward one character"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:59
msgid "`M-f` - Move forward one word"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:60
msgid "`M-b` - Move backward one word"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:61
msgid "`C-M-n` - Move line or selection down"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:62
msgid "`C-M-p` - Move line or selection up"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:63
msgid "`S-M-u` - Move up 10 lines"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:64
msgid "`S-M-d` - Move down 10 lines"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:65
msgid "`M-<` - Move to beginning of buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:66
msgid "`M->` - Move to end of buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:68
msgid "Deletion"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:70
msgid "`C-h` - Delete previous character"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:71
msgid "`C-d` - Delete next character"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:73
msgid "Advanced Editor Features"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:75
msgid "`C-i` - Show docs for word under cursor"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:76
msgid "`M-z` - Undo"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:77
msgid "`S-M-z` - Redo"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:78
msgid "`C-g` - Escape"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:79
msgid "`S-M-f` - Toggle fullscreen mode"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:80
msgid "`S-M-b` - Toggle visibility of buttons"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:81
msgid "`S-M-l` - Toggle visibility of log"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:82
msgid "`S-M-m` - Toggle between light/dark modes"
msgstr ""

#: 10.3-Sharing.md:1
msgid "10.3 Sharing"
msgstr ""

#: 10.3-Sharing.md:3
msgid "Sharing"
msgstr ""

#: 10.3-Sharing.md:5
msgid "Sonic Pi is all about sharing and learning with each other."
msgstr ""

#: 10.3-Sharing.md:7
msgid ""
"Once you've learned how to code music, sharing your compositions is as "
"simple as sending an email containing your code. Please do *share* your code "
"with others so they can *learn* from your work and even use parts in a new "
"*mash-up*."
msgstr ""

#: 10.3-Sharing.md:12
msgid ""
"If you're unsure of the best way to share your work with others I recommend "
"putting your code on [GitHub](https://github.com) and your music on "
"[SoundCloud](https://soundcloud.com). That way you'll be able to easily "
"reach a large audience."
msgstr ""

#: 10.3-Sharing.md:17
msgid "Code -> GitHub"
msgstr ""

#: 10.3-Sharing.md:19
msgid ""
"[GitHub](https://github.com) is a site for sharing and working with code. "
"It's used by professional developers as well as artists for sharing and "
"collaborating with code. The simplest way to share a new piece of code (or "
"even an unfinished piece) is to create a [Gist](https://gist.github.com). A "
"[Gist](https://gist.github.com) is a simple way of uploading your code in a "
"simple way that others can see, copy and share."
msgstr ""

#: 10.3-Sharing.md:27
msgid "Audio -> SoundCloud"
msgstr ""

#: 10.3-Sharing.md:29
msgid ""
"Another important way of sharing your work is to record the audio and upload "
"it to [SoundCloud](https://soundcloud.com). Once you've uploaded your piece, "
"other users can comment and discuss your work. I also recommend placing a "
"link to a [Gist](https://gist.github.com) of your code in the track "
"description."
msgstr ""

#: 10.3-Sharing.md:35
msgid ""
"To record your work, hit the `Rec` button in the toolbar, and recording "
"starts immediately. Hit `Run` to start your code if it isn't already in "
"progress. When you're done recording, press the flashing `Rec` button again, "
"and you'll be prompted to enter a filename. The recording will be saved as a "
"WAV file, which can be edited and converted to MP3 by any number of free "
"programs (try Audacity for instance)."
msgstr ""

#: 10.3-Sharing.md:43
msgid "Hope"
msgstr ""

#: 10.3-Sharing.md:45
msgid ""
"I encourage you to share your work and really hope that we'll all teach each "
"other new tricks and moves with Sonic Pi. I'm really excited by what you'll "
"have to show me."
msgstr ""

#: 10.4-Performing.md:1
msgid "10.4 Performing"
msgstr ""

#: 10.4-Performing.md:3
msgid "Performing"
msgstr ""

#: 10.4-Performing.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to use "
"code as a *musical instrument*. This means that writing code live can now be "
"seen as a new way of performing music."
msgstr ""

#: 10.4-Performing.md:9
msgid "We call this *Live Coding*."
msgstr ""

#: 10.4-Performing.md:11
msgid "Show Your Screen"
msgstr ""

#: 10.4-Performing.md:13
msgid ""
"When you live code I recommend you *show your screen* to your audience. "
"Otherwise it's like playing a guitar but hiding your fingers and the "
"strings. When I practice at home I use a Raspberry Pi and a little mini "
"projector on my living room wall. You could use your TV or one of your "
"school/work projectors to give a show. Try it, it's a lot of fun."
msgstr ""

#: 10.4-Performing.md:20
msgid "Form a Band"
msgstr ""

#: 10.4-Performing.md:22
msgid ""
"Don't just play on your own - form a live coding band! It's a lot of fun "
"jamming with others. One person could do beats, another ambient background, "
"etc. See what interesting combinations of sounds you can have together."
msgstr ""

#: 10.4-Performing.md:27
msgid "TOPLAP"
msgstr ""

#: 10.4-Performing.md:29
msgid ""
"Live coding isn't completely new - a small number of people have been doing "
"it for a few years now, typically using bespoke systems they've built for "
"themselves. A great place to go and find out more about other live coders "
"and systems is [TOPLAP](http://toplap.org)."
msgstr ""

#: 10.4-Performing.md:34
msgid "Algorave"
msgstr ""

#: 10.4-Performing.md:36
msgid ""
"Another great resource for exploring the live coding world is [Algorave]"
"(http://algorave.com). Here you can find all about a specific strand of live "
"coding for making music in nightclubs."
msgstr ""

#: 11-Minecraft-Pi.md:1
msgid "11 Minecraft Pi"
msgstr ""

#: 11-Minecraft-Pi.md:3
msgid "Minecraft Pi"
msgstr ""

#: 11-Minecraft-Pi.md:5
msgid ""
"Sonic Pi now supports a simple API for interacting with Minecraft Pi - the "
"special edition of Minecraft which is installed by default on the Raspberry "
"Pi's Raspbian Linux-based operating system."
msgstr ""

#: 11-Minecraft-Pi.md:9
msgid "No need to import libraries"
msgstr ""

#: 11-Minecraft-Pi.md:11
msgid ""
"The Minecraft Pi integration has been designed to be insanely easy to use. "
"All you need to do is to launch Minecraft Pi and create a world. You're then "
"free to use the `mc_*` fns just like you might use `play` and `synth`. "
"There's no need to import anything or install any libraries - it's all ready "
"to go and works out of the box."
msgstr ""

#: 11-Minecraft-Pi.md:17
msgid "Automatic Connection"
msgstr ""

#: 11-Minecraft-Pi.md:19
msgid ""
"The Minecraft Pi API takes care of managing your connection to the Minecraft "
"Pi application. This means you don't need to worry about a thing. If you try "
"and use the Minecraft Pi API when Minecraft Pi isn't open, Sonic Pi will "
"politely tell you. Similarly, if you close Minecraft Pi whilst you're still "
"running a `live_loop` that uses the API, the live loop will stop and "
"politely tell you that it can't connect. To reconnect, just launch Minecraft "
"Pi again and Sonic Pi will automatically detect and re-create the connection "
"for you."
msgstr ""

#: 11-Minecraft-Pi.md:28
msgid "Designed to be Live Coded"
msgstr ""

#: 11-Minecraft-Pi.md:30
msgid ""
"The Minecraft Pi API has been designed to work seamlessly within "
"`live_loop`s. This means it's possible to synchronise modifications in your "
"Minecraft Pi worlds with modifications in your Sonic Pi sounds. Instant "
"Minecraft-based music videos! Note however that Minecraft Pi is alpha "
"software and is known to be slightly buggy. If you encounter any problems "
"simply restart Minecraft Pi and carry on as before. Sonic Pi's automatic "
"connection functionality will take care of things for you."
msgstr ""

#: 11-Minecraft-Pi.md:39
msgid "Requires a Raspberry Pi 2.0"
msgstr ""

#: 11-Minecraft-Pi.md:41
msgid ""
"It is highly recommended that you use a Raspberry Pi 2 if you wish to run "
"both Sonic Pi and Minecraft at the same time - especially if you want to use "
"Sonic Pi's sound capabilities."
msgstr ""

#: 11-Minecraft-Pi.md:45
msgid "API Support"
msgstr ""

#: 11-Minecraft-Pi.md:47
msgid ""
"At this stage, Sonic Pi supports basic block and player manipulations which "
"are detailed in Section 11.1. Support for event callbacks triggered by "
"player interactions in the world is planned for a future release."
msgstr ""

#: 11.1-Basic-API.md:1
msgid "11.1 Basic API"
msgstr ""

#: 11.1-Basic-API.md:3
msgid "Basic Minecraft Pi API"
msgstr ""

#: 11.1-Basic-API.md:5
msgid ""
"Sonic Pi currently supports the following basic interactions with Minecraft "
"Pi:"
msgstr ""

#: 11.1-Basic-API.md:7 11.1-Basic-API.md:16
msgid "Displaying chat messages"
msgstr ""

#: 11.1-Basic-API.md:8 11.1-Basic-API.md:33
msgid "Setting the position of the user"
msgstr ""

#: 11.1-Basic-API.md:9
msgid "Getting the position of the user"
msgstr ""

#: 11.1-Basic-API.md:10
msgid "Setting the block type at a given coordinate"
msgstr ""

#: 11.1-Basic-API.md:11
msgid "Getting the block type at a given coordinate"
msgstr ""

#: 11.1-Basic-API.md:14
msgid "Let's look at each of these in turn."
msgstr ""

#: 11.1-Basic-API.md:18
msgid ""
"Let's see just how easy it is to control Minecraft Pi from Sonic Pi. First, "
"make sure you have both Minecraft Pi and Sonic Pi open at the same time and "
"also make sure you've entered a Minecraft world and can walk around."
msgstr ""

#: 11.1-Basic-API.md:23
msgid "In a fresh Sonic Pi buffer simply enter the following code:"
msgstr ""

#: 11.1-Basic-API.md:25
#, no-wrap
msgid "mc_message \"Hello from Sonic Pi\""
msgstr ""

#: 11.1-Basic-API.md:29
msgid ""
"When you hit the *Run* button, you'll see your message flash up on the "
"Minecraft window. Congratulations, you've written your first Minecraft code! "
"That was easy wasn't it."
msgstr ""

#: 11.1-Basic-API.md:35
msgid ""
"Now, let's try a little magic. Let's teleport ourselves somewhere! Try the "
"following:"
msgstr ""

#: 11.1-Basic-API.md:38
#, no-wrap
msgid "mc_teleport 50, 50, 50"
msgstr ""

#: 11.1-Basic-API.md:42
msgid ""
"When you hit *Run* - boom! You're instantantly transported to a new place. "
"Most likely it was somewhere in the sky and you fell down either to dry land "
"or into water. Now, what are those numbers: `50, 50, 50`? They're the "
"coordinates of the location you're trying to teleport to. Let's take a brief "
"moment to explore what coordinates are and how they work because they're "
"really, really important for programming Minecraft."
msgstr ""

#: 11.1-Basic-API.md:50
msgid "Coordinates"
msgstr ""

#: 11.1-Basic-API.md:52
msgid ""
"Imagine a pirate's map with a big `X` marking the location of some treasure. "
"The exact location of the `X` can be described with two numbers - how far "
"along the map from left to right and how far along the map from bottom to "
"top. For example `10cm` across and `8cm` up. These two numbers `10` and `8` "
"are coordinates. You could easily imagine describing the locations of other "
"stashes of treasure with other pairs of numbers. Perhaps there's a big chest "
"of gold at `2` across and `9` up..."
msgstr ""

#: 11.1-Basic-API.md:61
msgid ""
"Now, in Minecraft two numbers isn't quite enough. We also need to know how "
"high we are. We therefore need three numbers:"
msgstr ""

#: 11.1-Basic-API.md:64
msgid "How far from right to left in the world - `x`"
msgstr ""

#: 11.1-Basic-API.md:65
msgid "How far from front to back in the world - `z`"
msgstr ""

#: 11.1-Basic-API.md:66
msgid "How high up we are in the world - `y`"
msgstr ""

#: 11.1-Basic-API.md:68
msgid ""
"One more thing - we typically describe these coordinates in this order `x`, "
"`y`, `z`."
msgstr ""

#: 11.1-Basic-API.md:71
msgid "Finding your current coordinates"
msgstr ""

#: 11.1-Basic-API.md:73
msgid ""
"Let's have a play with coordinates. Navigate to a nice place in the "
"Minecraft map and then switch over to Sonic Pi. Now enter the following:"
msgstr ""

#: 11.1-Basic-API.md:76
#, no-wrap
msgid "puts mc_location"
msgstr ""

#: 11.1-Basic-API.md:80
msgid ""
"When you hit the *Run* button you'll see the coordinates of your current "
"position displayed in the log window. Take a note of them, then move forward "
"in the world and try again. Notice how the coordinates changed! Now, I "
"recommend you spend some time repeating exactly this - move a bit in the "
"world, take a look at the coordinates and repeat. Do this until you start to "
"get a feel for how the coordinates change when you move. Once you've "
"understood how coordinates work, programming with the Minecraft API will be "
"a complete breeze."
msgstr ""

#: 11.1-Basic-API.md:89
msgid "Let's Build!"
msgstr ""

#: 11.1-Basic-API.md:91
msgid ""
"Now that you know how to find the current position and to teleport using "
"coordinates, you have all the tools you need to start building things in "
"Minecraft with code. Let's say you want to make the block with coordinates "
"`40`, `50`, `60` to be glass. That's super easy:"
msgstr ""

#: 11.1-Basic-API.md:96
#, no-wrap
msgid "mc_set_block :glass, 40, 50, 60"
msgstr ""

#: 11.1-Basic-API.md:100
msgid ""
"Haha, it really was that easy. To see your handywork just teleport nearby "
"and take a look:"
msgstr ""

#: 11.1-Basic-API.md:103
#, no-wrap
msgid "mc_teleport 35, 50, 60"
msgstr ""

#: 11.1-Basic-API.md:107
msgid ""
"Now turn around and you should see your glass block! Try changing it to "
"diamond:"
msgstr ""

#: 11.1-Basic-API.md:110
#, no-wrap
msgid "mc_set_block :diamond, 40, 50, 60"
msgstr ""

#: 11.1-Basic-API.md:114
msgid ""
"If you were looking in the right direction you might have even seen it "
"change in front of your eyes! This is the start of something exciting..."
msgstr ""

#: 11.1-Basic-API.md:117
msgid "Looking at blocks"
msgstr ""

#: 11.1-Basic-API.md:119
msgid ""
"Let's look at one last thing before we move onto something a bit more "
"involved. Given a set of coordinates we can ask Minecraft what the type of a "
"specific block is. Let's try it with the diamond block you just created:"
msgstr ""

#: 11.1-Basic-API.md:124
#, no-wrap
msgid "puts mc_get_block 40, 50, 60"
msgstr ""

#: 11.1-Basic-API.md:128
msgid ""
"Yey! It's `:diamond`. Try changing it back to glass and asking again - does "
"it now say `:glass`? I'm sure it does :-)"
msgstr ""

#: 11.1-Basic-API.md:131
msgid "Available block types"
msgstr ""

#: 11.1-Basic-API.md:133
msgid ""
"Before you go on a Minecraft Pi coding rampage, you might find this list of "
"available block types useful:"
msgstr ""

#: 11.1-Basic-API.md:136
#, no-wrap
msgid ""
"    :air\n"
"    :stone\n"
"    :grass\n"
"    :dirt\n"
"    :cobblestone\n"
"    :wood_plank\n"
"    :sapling\n"
"    :bedrock\n"
"    :water_flowing\n"
"    :water\n"
"    :water_stationary\n"
"    :lava_flowing\n"
"    :lava\n"
"    :lava_stationary\n"
"    :sand\n"
"    :gravel\n"
"    :gold_ore\n"
"    :iron_ore\n"
"    :coal_ore\n"
"    :wood\n"
"    :leaves\n"
"    :glass\n"
"    :lapis\n"
"    :lapis_lazuli_block\n"
"    :sandstone\n"
"    :bed\n"
"    :cobweb\n"
"    :grass_tall\n"
"    :flower_yellow\n"
"    :flower_cyan\n"
"    :mushroom_brown\n"
"    :mushroom_red\n"
"    :gold_block\n"
"    :gold\n"
"    :iron_block\n"
"    :iron\n"
"    :stone_slab_double\n"
"    :stone_slab\n"
"    :brick\n"
"    :brick_block\n"
"    :tnt\n"
"    :bookshelf\n"
"    :moss_stone\n"
"    :obsidian\n"
"    :torch\n"
"    :fire\n"
"    :stairs_wood\n"
"    :chest\n"
"    :diamond_ore\n"
"    :diamond_block\n"
"    :diamond\n"
"    :crafting_table\n"
"    :farmland\n"
"    :furnace_inactive\n"
"    :furnace_active\n"
"    :door_wood\n"
"    :ladder\n"
"    :stairs_cobblestone\n"
"    :door_iron\n"
"    :redstone_ore\n"
"    :snow\n"
"    :ice\n"
"    :snow_block\n"
"    :cactus\n"
"    :clay\n"
"    :sugar_cane\n"
"    :fence\n"
"    :glowstone_block\n"
"    :bedrock_invisible\n"
"    :stone_brick\n"
"    :glass_pane\n"
"    :melon\n"
"    :fence_gate\n"
"    :glowing_obsidian\n"
"    :nether_reactor_core"
msgstr ""

#: 12-Conclusions.md:1
msgid "12 Conclusions"
msgstr ""

#: 12-Conclusions.md:3
msgid "Conclusions"
msgstr ""

#: 12-Conclusions.md:5
msgid ""
"This concludes the Sonic Pi introductory tutorial. Hopefully you've learned "
"something along the way. Don't worry if you feel you didn't understand "
"everything - just play and have fun and you'll pick things up in your own "
"time. Feel free to dive back in when you have a question that might be "
"covered in one of the sections."
msgstr ""

#: 12-Conclusions.md:11
msgid ""
"If you have any questions that haven't been covered in the tutorial, then "
"please jump onto the [Sonic Pi forums](http://groups.google.com/group/sonic-"
"pi/) and ask your question there. You'll find someone friendly and willing "
"to lend a hand."
msgstr ""

#: 12-Conclusions.md:16
msgid ""
"Finally, I also invite you to take a deeper look at the rest of the "
"documentation in this help system. There are a number of features that "
"haven't been covered in this tutorial that are waiting for your discovery."
msgstr ""

#: 12-Conclusions.md:21
msgid ""
"So play, have fun, share your code, perform for your friends, show your "
"screens and remember:"
msgstr ""

#: 12-Conclusions.md:24
msgid "*There are no mistakes, only opportunities.*"
msgstr ""

#: 12-Conclusions.md:26
msgid "[Sam Aaron](http://twitter.com/samaaron)"
msgstr ""

#: A-Articles.md:1
msgid "A Appendix A - MagPi Articles"
msgstr ""

#: A-Articles.md:3
msgid "MagPi Articles"
msgstr ""

#: A-Articles.md:5
msgid ""
"Appendix A collects all the Sonic Pi articles written for the MagPi magazine."
msgstr ""

#: A-Articles.md:8
msgid "Dive into Topics"
msgstr ""

#: A-Articles.md:10
msgid ""
"These articles aren't meant to be read in any strict order and contain a lot "
"of cross-over material from the tutorial itself. Rather than try and teach "
"you all of Sonic Pi, they instead each focus on a specific aspect of Sonic "
"Pi and cover it in a fun and accessible way."
msgstr ""

#: A-Articles.md:15
msgid "Read the MagPi"
msgstr ""

#: A-Articles.md:17
msgid ""
"You can see them in their glorious professionally typeset form in the free "
"PDF downloads of The MagPi here: https://www.raspberrypi.org/magpi/"
msgstr ""

#: A-Articles.md:20
msgid "Suggest a Topic"
msgstr ""

#: A-Articles.md:22
msgid ""
"If you don't see a topic that interests you covered in these articles - why "
"not suggest one? The easiest way to do that is to tweet your suggestion to "
"[@Sonic_Pi](http://twitter.com/sonic_pi). You never know - your suggestion "
"might be the subject of the next article!"
msgstr ""

#: A.01-tips.md:1
msgid "A.1 Tips for Sonic Pi"
msgstr ""

#: A.01-tips.md:3
msgid "Five Top Tips"
msgstr ""

#: A.01-tips.md:5
msgid "1. There are no mistakes"
msgstr ""

#: A.01-tips.md:7
msgid ""
"The most important lesson to learn with Sonic Pi is that there really are no "
"mistakes. The best way to learn is to just try and try and try. Try lots of "
"different things out, stop worrying whether your code sounds good or not and "
"start experimenting with as many different synths, notes, FX and opts as "
"possible. You'll discover a lot of things that make you laugh because they "
"sound just awful and some real gems that sound truly amazing. Simply drop "
"the things you don't like and keep the things you do. The more 'mistakes' "
"you allow yourself to make the quicker you'll learn and discover your "
"personal coding sound."
msgstr ""

#: A.01-tips.md:18
msgid "2. Use the FX"
msgstr ""

#: A.01-tips.md:20
msgid ""
"Say you've already mastered the Sonic Pi basics of making sounds with "
"`sample`, `play`? What's next? Did you know that Sonic Pi supports over 27 "
"studio FX to change the sound of your code? FX are like fancy image filters "
"in drawing programs except that instead of blurring or making something "
"black and white, you can add things like reverb, distortion and echo to your "
"sound. Think of it like sticking the cable from your guitar to an effects "
"pedal of your choice and then into the amplifier. Luckily, Sonic Pi makes "
"using FX really easy and requires no cables! All you need to do is to choose "
"which section of your code you'd like the FX added to and wrap it with the "
"FX code. Let's look at an example. Say you had the following code:"
msgstr ""

#: A.01-tips.md:32
#, no-wrap
msgid ""
"sample :loop_garzul\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: A.01-tips.md:41
msgid ""
"If you wanted to add FX to the `:loop_garzul` sample, you'd just tuck it "
"inside a `with_fx` block like this:"
msgstr ""

#: A.01-tips.md:44
#, no-wrap
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: A.01-tips.md:55
msgid ""
"Now, if you wanted to add FX to the bass drum, go and wrap that with "
"`with_fx` too:"
msgstr ""

#: A.01-tips.md:58
#, no-wrap
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"with_fx :echo do\n"
"  16.times do\n"
"    sample :bd_haus\n"
"    sleep 0.5\n"
"  end\n"
"end"
msgstr ""

#: A.01-tips.md:71
msgid ""
"Remember, you can wrap *any* code within `with_fx` and any sounds created "
"will pass through that FX."
msgstr ""

#: A.01-tips.md:75
msgid "3. Parameterise your synths"
msgstr ""

#: A.01-tips.md:77
msgid ""
"In order to really discover your coding sound you'll soon want to know how "
"to modify and control synths and FX. For example, you might want to change "
"the duration of a note, add more reverb, or change the time between echoes. "
"Luckily, Sonic Pi gives you an amazing level of control to do exactly this "
"with special things called optional parameters or opts for short. Let's take "
"a quick look. Copy this code into a workspace and hit run:"
msgstr ""

#: A.01-tips.md:85
#, no-wrap
msgid "sample :guit_em9"
msgstr ""

#: A.01-tips.md:89
msgid ""
"Ooh, a lovely guitar sound! Now, let's start playing with it. How about "
"changing its rate?"
msgstr ""

#: A.01-tips.md:92
#, no-wrap
msgid "sample :guit_em9, rate: 0.5"
msgstr ""

#: A.01-tips.md:96
msgid ""
"Hey, what's that `rate: 0.5` bit I just added at the end? That's called an "
"opt. All of Sonic Pi's synths and FX support them and there's loads to play "
"around with. They're also available for FX too. Try this:"
msgstr ""

#: A.01-tips.md:100
#, no-wrap
msgid ""
"with_fx :flanger, feedback: 0.6 do\n"
"  sample :guit_em9\n"
"end"
msgstr ""

#: A.01-tips.md:106
msgid ""
"Now, try increasing that feedback to 1 to hear some crazy sounds! Read the "
"docs for full details on all the many opts available to you."
msgstr ""

#: A.01-tips.md:110
msgid "5. Live Code"
msgstr ""

#: A.01-tips.md:112
msgid ""
"The best way to quickly experiment and explore Sonic Pi is to live code. "
"This allows you to start off some code and continually change and tweak it "
"whilst it's still playing. For example, if you don't know what the cutoff "
"parameter does to a sample, just play around. Let's have a try! Copy this "
"code into one of your Sonic Pi workspaces:"
msgstr ""

#: A.01-tips.md:118
#, no-wrap
msgid ""
"live_loop :experiment do\n"
"  sample :loop_amen, cutoff: 70\n"
"  sleep 1.75\n"
"end"
msgstr ""

#: A.01-tips.md:125
msgid ""
"Now, hit run and you'll hear a slightly muffled drum break. Now, change the "
"`cutoff:` value to `80` and hit run again. Can you hear the difference? Try "
"`90`, `100`, `110`..."
msgstr ""

#: A.01-tips.md:129
msgid ""
"Once you get the hang of using `live_loop`s you'll not turn back. Whenever I "
"do a live coding gig I rely on `live_loop` as much as a drummer relies on "
"their sticks. For more information about live coding check out Section 9 of "
"the built-in tutorial."
msgstr ""

#: A.01-tips.md:134
msgid "5. Surf the random streams"
msgstr ""

#: A.01-tips.md:136
msgid ""
"Finally, one thing I love doing is cheating by getting Sonic Pi to compose "
"things for me. A really great way to do this is using randomisation. It "
"might sound complicated but it really isn't. Let's take a look. Copy this "
"into a spare workspace:"
msgstr ""

#: A.01-tips.md:141
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: A.01-tips.md:152
msgid ""
"Now, when you play this, you'll hear a constant stream of random notes from "
"the scale `:e2 :minor_pentatonic` played with the `:dsaw` synth. \"Wait, "
"wait! That's not a melody\", I hear you shout! Well, here's the first part "
"of the magic trick. Every time we go round the `live_loop` we can tell Sonic "
"Pi to reset the random stream to a known point. This is a bit like going "
"back in time in the TARDIS with the Doctor to a particular point in time and "
"space. Let's try it - add the line `use_random_seed 1` to the `live_loop`:"
msgstr ""

#: A.01-tips.md:161
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_random_seed 1\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: A.01-tips.md:173
msgid ""
"Now, every time the `live_loop` loops around, the random stream is reset. "
"This means it chooses the same 16 notes every time. Hey presto! An instant "
"melody. Now, here's the really exciting bit. Change the seed value from `1` "
"to another number. Say `4923`. Wow! Another melody! So, just by changing one "
"number (the random seed), you can explore as many melodic combinations as "
"you can imagine! Now, that's the magic of code."
msgstr ""

#: A.02-live-coding.md:1
msgid "A.2 Live Coding"
msgstr ""

#: A.02-live-coding.md:5
msgid ""
"The laser beams sliced through the wafts of smoke as the subwoofer pumped "
"bass deep into the bodies of the crowd. The atmosphere was ripe with a heady "
"mix of synths and dancing. However something wasn't quite right in this "
"nightclub. Projected in bright colours above the DJ booth was futuristic "
"text, moving, dancing, flashing. This wasn't fancy visuals, it was merely a "
"projection of Sonic Pi running on a Raspberry Pi. The occupant of the DJ "
"booth wasn't spinning disks, he was writing, editing and evaluating code. "
"Live. This is Live Coding."
msgstr ""

#: A.02-live-coding.md:14
msgid ""
"![Sam Aaron Live Coding](../images/tutorial/articles/A.02-live-coding/sam-"
"aaron-live-coding.png)"
msgstr ""

#: A.02-live-coding.md:16
msgid ""
"This may sound like a far fetched story from a futuristic night club but "
"coding music like this is a growing trend and is often described as Live "
"Coding (http://toplap.org). One of the recent directions this approach to "
"music making has taken is the Algorave (http://algorave.com) - events where "
"artists like myself code music for people to dance to. However, you don't "
"need to be in a nightclub to Live Code - with Sonic Pi v2.6+ you can do it "
"anywhere you can take your Raspberry Pi and a pair of headphones or some "
"speakers. Once you reach the end of this article, you'll be programming your "
"own beats and modifying them live. Where you go afterwards will only be "
"constrained by your imagination."
msgstr ""

#: A.02-live-coding.md:27
msgid "Live Loop"
msgstr ""

#: A.02-live-coding.md:29
msgid ""
"The key to live coding with Sonic Pi is mastering the `live_loop`. Let's "
"look at one:"
msgstr ""

#: A.02-live-coding.md:32
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: A.02-live-coding.md:39
msgid ""
"There are 4 core ingredients to a `live_loop`. The first is its name. Our "
"`live_loop` above is called `:beats`. You're free to call your `live_loop` "
"anything you want. Go crazy. Be creative. I often use names that communicate "
"something about the music they're making to the audience. The second "
"ingredient is the `do` word which marks where the `live_loop` starts. The "
"third is the `end` word which marks where the `live_loop` finishes, and "
"finally there is the body of the `live_loop` which describes what the loop "
"is going to repeat - that's the bit between the `do` and `end`. In this case "
"we're repeatedly playing a bass drum sample and waiting for half a beat. "
"This produces a nice regular bass beat. Go ahead, copy it into an empty "
"Sonic Pi buffer and hit run. Boom, Boom, Boom!."
msgstr ""

#: A.02-live-coding.md:52
msgid "Redefining On-the-fly"
msgstr ""

#: A.02-live-coding.md:54
msgid ""
"Ok, so what's so special about the `live_loop`? So far it just seems like a "
"glorified `loop`! Well, the beauty of `live_loop`s is that you can redefine "
"them on-the-fly. This means that whilst they're still running, you can "
"change what they do. This is the secret to live coding with Sonic Pi. Let's "
"have a play:"
msgstr ""

#: A.02-live-coding.md:60
#, no-wrap
msgid ""
"live_loop :choral_drone do\n"
"  sample :ambi_choir, rate: 0.4\n"
"  sleep 1\n"
"end"
msgstr ""

#: A.02-live-coding.md:67
msgid ""
"Now press the Run button or hit `alt-r`. You're now listening to some "
"gorgeous choir sounds. Now, whilst it's still playing, change the rate from "
"`0.4` to `0.38`. Hit run again. Woah! Did you hear the choir change note? "
"Change it back up to `0.4` to return back to how it was. Now, drop it to "
"`0.2`, down to `0.19` and then back up to `0.4`. See how changing just one "
"parameter on the fly can give you real control of the music? Now play around "
"with the rate yourself - choose your own values. Try negative numbers, "
"really small numbers and large numbers. Have fun!"
msgstr ""

#: A.02-live-coding.md:77
msgid "Sleeping is important"
msgstr ""

#: A.02-live-coding.md:79
msgid ""
"One of the most important lessons about `live_loop`s is that they need rest. "
"Consider the following `live_loop`:"
msgstr ""

#: A.02-live-coding.md:82
#, no-wrap
msgid ""
"live_loop :infinite_impossibilities do\n"
"  sample :ambi_choir\n"
"end"
msgstr ""

#: A.02-live-coding.md:88
msgid ""
"If you try running this code, you'll immediately see Sonic Pi complaining "
"that the `live_loop` did not sleep. This is a safety system kicking in! Take "
"a moment to think about what this code is asking the computer to do. That's "
"right, it's asking the computer to play an infinite amount of choir samples "
"in zero time. Without the safety system the poor computer will try and do "
"this and crash and burn in the process. So remember, your `live_loop`s must "
"contain a `sleep`."
msgstr ""

#: A.02-live-coding.md:97
msgid "Combining Sounds"
msgstr ""

#: A.02-live-coding.md:99
msgid ""
"Music is full of things happening at the same time. Drums at the same time "
"as bass at the same time as vocals at the same time as guitars... In "
"computing we call this concurrency and Sonic Pi provides us with an "
"amazingly simple way of playing things at the same time. Simply use more "
"than one `live_loop`!"
msgstr ""

#: A.02-live-coding.md:105
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :bd_tek\n"
"  with_fx :echo, phase: 0.125, mix: 0.4 do\n"
"    sample  :drum_cymbal_soft, sustain: 0, release: 0.1\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"live_loop :bass do\n"
"  use_synth :tb303\n"
"  synth :tb303, note: :e1, release: 4, cutoff: 120, cutoff_attack: 1\n"
"  sleep 4\n"
"end"
msgstr ""

#: A.02-live-coding.md:121
msgid ""
"Here, we have two `live_loop`s, one looping quickly making beats and another "
"looping slowly making a crazy bass sound."
msgstr ""

#: A.02-live-coding.md:124
msgid ""
"One of the interesting things about using multiple `live_loop`s is that they "
"each manage their own time. This means it's really easy to create "
"interesting polyrhythmical structures and even play with phasing Steve Reich "
"style. Check this out:"
msgstr ""

#: A.02-live-coding.md:129
#, no-wrap
msgid ""
"# Steve Reich's Piano Phase\n"
"notes = (ring :E4, :Fs4, :B4, :Cs5, :D5, :Fs4, :E4, :Cs5, :B4, :Fs4, :D5, :Cs5)\n"
"live_loop :slow do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.3\n"
"end\n"
"live_loop :faster do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.295\n"
"end"
msgstr ""

#: A.02-live-coding.md:145 A.03-coded-beats.md:155 A.04-synth-riffs.md:166
#: A.05-acid-bass.md:147 A.06-minecraft.md:156 A.07-bizet.md:138
#: A.09-randomisation.md:145 A.10-controlling-your-sound.md:149
#: A.11-beat-tracking.md:176 A.12-sample-slicing.md:137
msgid "Bringing it all together"
msgstr ""

#: A.02-live-coding.md:147
msgid ""
"In each of these tutorials, we'll end with a final example in the form of a "
"new piece of music which draws from all of the ideas introduced. Read this "
"code and see if you can imagine what it's doing. Then, copy it into a fresh "
"Sonic Pi buffer and hit Run and actually hear what it sounds like. Finally, "
"change one of the numbers or comment and uncomment things out. See if you "
"can use this as a starting point for a new performance, and most of all have "
"fun! See you next time..."
msgstr ""

#: A.02-live-coding.md:156
#, no-wrap
msgid ""
"with_fx :reverb, room: 1 do\n"
"  live_loop :time do\n"
"    synth :prophet, release: 8, note: :e1, cutoff: 90, amp: 3\n"
"    sleep 8\n"
"  end\n"
"end\n"
"live_loop :machine do\n"
"  sample :loop_garzul, rate: 0.5, finish: 0.25\n"
"  sample :loop_industrial, beat_stretch: 4, amp: 1\n"
"  sleep 4\n"
"end\n"
"live_loop :kik do\n"
"  sample :bd_haus, amp: 2\n"
"  sleep 0.5\n"
"end\n"
"with_fx :echo do\n"
"  live_loop :vortex do\n"
"    # use_random_seed 800\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 3)\n"
"    16.times do\n"
"      play notes.choose, release: 0.1, amp: 1.5\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""

#: A.03-coded-beats.md:1
msgid "A.3 Coded Beats"
msgstr ""

#: A.03-coded-beats.md:3
msgid "Coded Beats"
msgstr ""

#: A.03-coded-beats.md:5
msgid ""
"One of the most exciting and disrupting technical developments in modern "
"music was the invention of samplers. These were boxes that allowed you to "
"record any sound into them and then manipulate and play back those sounds in "
"many interesting ways. For example, you could take an old record, find a "
"drum solo (or break), record it into your sampler and then play it back on "
"repeat at half-speed to provide the foundation for your latest beats. This "
"is how early hip-hop music was born and today it's almost impossible to find "
"electronic music that doesn't incorporate samples of some kind. Using "
"samples is a really great way of easily introducing new and interesting "
"elements into your live coded performances."
msgstr ""

#: A.03-coded-beats.md:17
msgid ""
"So where can you get a sampler? Well you already have one - it's your "
"Raspberry Pi! The built-in live coding app Sonic Pi has an extremely "
"powerful sampler built into its core. Let's play with it!"
msgstr ""

#: A.03-coded-beats.md:21
msgid "The Amen Break"
msgstr ""

#: A.03-coded-beats.md:23
msgid ""
"One of the most classic and recognisable drum break samples is called the "
"Amen Break. It was first performed in 1969 in the song \"Amen Brother\" by "
"the Winstons as part of a drum break. However, it was when it was discovered "
"by early hip-hop musicians in the 80s and used in samplers that it started "
"being heavily used in a wide variety of other styles such as drum and bass, "
"breakbeat, hardcore techno and breakcore."
msgstr ""

#: A.03-coded-beats.md:30
msgid ""
"I'm sure you're excited to hear that it's also built right into Sonic Pi. "
"Clear up a buffer and throw in the following code:"
msgstr ""

#: A.03-coded-beats.md:37
msgid ""
"Hit *Run* and boom! You're listening to one of the most influential drum "
"breaks in the history of dance music. However, this sample wasn't famous for "
"being played as a one-shot, it was built for being looped."
msgstr ""

#: A.03-coded-beats.md:42
msgid "Beat Stretching"
msgstr ""

#: A.03-coded-beats.md:44
msgid ""
"Let's loop the Amen Break by using our old friend the `live_loop` introduced "
"in this tutorial last month:"
msgstr ""

#: A.03-coded-beats.md:47
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen\n"
"  sleep 2\n"
"end"
msgstr ""

#: A.03-coded-beats.md:54
msgid ""
"OK, so it is looping, but there's an annoying pause every time round. That "
"is because we asked it to sleep for `2` beats and with the default BPM of 60 "
"the `:loop_amen` sample only lasts for `1.753` beats. We therefore have a "
"silence of `2 - 1.753 = 0.247` beats. Even though it's short, it's still "
"noticeable."
msgstr ""

#: A.03-coded-beats.md:60
msgid ""
"To fix this issue we can use the `beat_stretch:` opt to ask Sonic Pi to "
"stretch (or shrink) the sample to match the specified number of beats."
msgstr ""

#: A.03-coded-beats.md:63
msgid ""
"Sonic Pi's `sample` and `synth` fns give you a lot of control via optional "
"parameters such as `amp:`, `cutoff:` and `release:`. However, the term "
"optional parameter is a real mouthful so we just call them *opts* to keep "
"things nice and simple."
msgstr ""

#: A.03-coded-beats.md:68
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end  "
msgstr ""

#: A.03-coded-beats.md:75
msgid ""
"Now we're dancing! Although, perhaps we want to speed it up or slow it down "
"to suit the mood."
msgstr ""

#: A.03-coded-beats.md:78
msgid "Playing with Time"
msgstr ""

#: A.03-coded-beats.md:80
msgid ""
"OK, so what if we want to change styles to old school hip hop or breakcore? "
"One simple way of doing this is to play with time - or in other words mess "
"with the tempo. This is super easy in Sonic Pi - just throw in a `use_bpm` "
"into your live loop:"
msgstr ""

#: A.03-coded-beats.md:85
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 30\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end "
msgstr ""

#: A.03-coded-beats.md:93
msgid ""
"Whilst you're rapping over those slow beats, notice that we're still "
"sleeping for 2 and our BPM is 30, yet everything is in time. The "
"`beat_stretch` opt works with the current BPM to make sure everything just "
"works."
msgstr ""

#: A.03-coded-beats.md:97
msgid ""
"Now, here's the fun part. Whilst the loop is still live, change the `30` in "
"the `use_bpm 30` line to `50`. Woah, everything just got faster yet *kept in "
"time*! Try going faster - up to 80, to 120, now go crazy and punch in 200!"
msgstr ""

#: A.03-coded-beats.md:103
msgid "Filtering"
msgstr ""

#: A.03-coded-beats.md:105
msgid ""
"Now we can live loop samples, let's look at some of the most fun opts "
"provided by the `sample` synth. First up is `cutoff:` which controls the "
"cutoff filter of the sampler. By default this is disabled but you can easily "
"turn it on:"
msgstr ""

#: A.03-coded-beats.md:110
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  sample :loop_amen, beat_stretch: 2, cutoff: 70\n"
"  sleep 2\n"
"end  "
msgstr ""

#: A.03-coded-beats.md:118
msgid ""
"Go ahead and change the `cutoff:` opt. For example, increase it to 100, hit "
"*Run* and wait for the loop to cycle round to hear the change in the sound. "
"Notice that low values like 50 sound mellow and bassy and high values like "
"100 and 120 are more full-sounding and raspy. This is because the `cutoff:` "
"opt will chop out the high frequency parts of the sound just like a lawn-"
"mower chops off the top of the grass. The `cutoff:` opt is like the length "
"setting - determining how much grass is left over."
msgstr ""

#: A.03-coded-beats.md:128
msgid "Slicing"
msgstr ""

#: A.03-coded-beats.md:130
msgid ""
"Another great tool to play with is the slicer FX. This will chop (slice) the "
"sound up. Wrap the `sample` line with the FX code like this:"
msgstr ""

#: A.03-coded-beats.md:133
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  with_fx :slicer, phase: 0.25, wave: 0, mix: 1 do\n"
"    sample :loop_amen, beat_stretch: 2, cutoff: 100\n"
"  end\n"
"  sleep 2\n"
"end"
msgstr ""

#: A.03-coded-beats.md:143
msgid ""
"Notice how the sound bounces up and down a little more. (You can hear the "
"original sound without the FX by changing the `mix:` opt to `0`.) Now, try "
"playing around with the `phase:` opt. This is the rate (in beats) of the "
"slicing effect. A smaller value like `0.125` will slice faster and larger "
"values like `0.5` will slice more slowly. Notice that successively halving "
"or doubling the `phase:` opts val tends to always sound good. Finally, "
"change the `wave:` opt to one of 0, 1, or 2 and hear how it changes the "
"sound. These are the various wave shapes. 0 is a saw wave, (hard in, fade "
"out) 1 is a square wave (hard in, hard out) and 2 is a triangle wave (fade "
"in, fade out)."
msgstr ""

#: A.03-coded-beats.md:157
msgid ""
"Finally, let's go back in time and revisit the early Bristol drum and bass "
"scene with this month's example. Don't worry too much about what all this "
"means, just type it in, hit Run, then start live coding it by changing opt "
"numbers and see where you can take it. Please do share what you create! See "
"you next time..."
msgstr ""

#: A.03-coded-beats.md:163
#, no-wrap
msgid ""
"use_bpm 100\n"
"live_loop :amen_break do\n"
"  p = [0.125, 0.25, 0.5].choose\n"
"  with_fx :slicer, phase: p, wave: 0, mix: rrand(0.7, 1) do\n"
"    r = [1, 1, 1, -1].choose\n"
"    sample :loop_amen, beat_stretch: 2, rate: r, amp: 2\n"
"  end\n"
"  sleep 2\n"
"end\n"
"live_loop :bass_drum do\n"
"  sample :bd_haus, cutoff: 70, amp: 1.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :landing do\n"
"  bass_line = (knit :e1, 3, [:c1, :c2].choose, 1)\n"
"  with_fx :slicer, phase: [0.25, 0.5].choose, invert_wave: 1, wave: 0 do\n"
"    s = synth :square, note: bass_line.tick, sustain: 4, cutoff: 60\n"
"    control s, cutoff_slide: 4, cutoff: 120\n"
"  end\n"
"  sleep 4\n"
"end"
msgstr ""

#: A.04-synth-riffs.md:1
msgid "A.4 Synth Riffs"
msgstr ""

#: A.04-synth-riffs.md:3
msgid "Synth Riffs"
msgstr ""

#: A.04-synth-riffs.md:5
msgid ""
"Whether it's the haunting drift of rumbling oscillators or the detuned punch "
"of saw waves piercing through the mix, the lead synth plays an essential "
"role on any electronic track. In last month's edition of this tutorial "
"series we covered how to code our beats. In this tutorial we'll cover how to "
"code up the three core components of a synth riff - the timbre, melody and "
"rhythm."
msgstr ""

#: A.04-synth-riffs.md:12
msgid ""
"OK, so power up your Raspberry Pi, crack open Sonic Pi v2.6+ and let's make "
"some noise!"
msgstr ""

#: A.04-synth-riffs.md:16
msgid "Timbral Possibilities"
msgstr ""

#: A.04-synth-riffs.md:18
msgid ""
"An essential part of any synth riff is changing and playing with the timbre "
"of the sounds. We can control the timbre in Sonic Pi in two ways - choosing "
"different synths for a dramatic change and setting the various synth opts "
"for more subtle modifications. We can also use FX, but that's for another "
"tutorial..."
msgstr ""

#: A.04-synth-riffs.md:24
msgid ""
"Let's create a simple live loop where we continually change the current "
"synth:"
msgstr ""

#: A.04-synth-riffs.md:27
#, no-wrap
msgid ""
"live_loop :timbre do\n"
"  use_synth (ring :tb303, :blade, :prophet, :saw, :beep, :tri).tick\n"
"  play :e2, attack: 0, release: 0.5, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: A.04-synth-riffs.md:35
msgid ""
"Take a look at the code. We're simply ticking through a ring of synth names "
"(this will cycle through each of these in turn repeating the list over and "
"over). We pass this synth name to the `use_synth` fn (function) which will "
"change the `live_loop`'s current synth. We also play note `:e2` (E at the "
"second octave), with a release time of 0.5 beats (half a second at the "
"default BPM of 60) and with the `cutoff:` opt set to 100."
msgstr ""

#: A.04-synth-riffs.md:42
msgid ""
"Hear how the different synths have very different sounds even though they're "
"all playing the same note. Now experiment and have a play. Change the "
"release time to bigger and smaller values. For example, change the `attack:` "
"and `release:` opts to see how different fade in/out times have a huge "
"impact on the sound. Finally change the `cutoff:` opt to see how different "
"cutoff values also massively influence the timbre (values between 60 and 130 "
"are good). See how many different sounds you can create by just changing a "
"few values. Once you've mastered that, just head to the Synths tab in the "
"Help system for a full list of all the synths and all the available opts "
"each individual synth supports to see just how much power you have under "
"your coding fingertips."
msgstr ""

#: A.04-synth-riffs.md:55
msgid "Timbre"
msgstr ""

#: A.04-synth-riffs.md:57
msgid ""
"Timbre is just a fancy word describing the sound of a sound. If you play the "
"same note with different instruments such as a violin, guitar, or piano, the "
"pitch (how high or low it sounds) would be the same, but the sound quality "
"would be different. That sound quality - the thing which allows you to tell "
"the difference between a piano and a guitar is the timbre."
msgstr ""

#: A.04-synth-riffs.md:65
msgid "Melodic Composition"
msgstr ""

#: A.04-synth-riffs.md:67
msgid ""
"Another important aspect to our lead synth is the choice of notes we want to "
"play. If you already have a good idea, then you can simply create a ring "
"with your notes in and tick through them:"
msgstr ""

#: A.04-synth-riffs.md:71
#, no-wrap
msgid ""
"live_loop :riff do\n"
"  use_synth :prophet\n"
"  riff = (ring :e3, :e3, :r, :g3, :r, :r, :r, :a3)\n"
"  play riff.tick, release: 0.5, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: A.04-synth-riffs.md:80
msgid ""
"Here, we've defined our melody with a ring which includes both notes such as "
"`:e3` and rests represented by `:r`. We're then using `.tick` to cycle "
"through each note to give us a repeating riff."
msgstr ""

#: A.04-synth-riffs.md:84
msgid "Auto Melody"
msgstr ""

#: A.04-synth-riffs.md:86
msgid ""
"It's not always easy to come up with a nice riff from scratch. Instead it's "
"often easier to ask Sonic Pi for a selection of random riffs and to choose "
"the one you like the best. To do that we need to combine three things: "
"rings, randomisation and random seeds. Let's look at an example:"
msgstr ""

#: A.04-synth-riffs.md:91
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 3\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  play notes.tick, release: 0.25, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: A.04-synth-riffs.md:101
msgid ""
"There's a few things going on - let's look at them in turn. First, we "
"specify that we're using random seed 3. What does this mean? Well, the "
"useful thing is that when we set the seed, we can predict what the next "
"random value is going to be - it's the same as it was last time we set the "
"seed to 3! Another useful thing to know is that shuffling a ring of notes "
"works in the same way. In the example above we're essentially asking for the "
"'third shuffle' in the standard list of shuffles - which is also the same "
"every time as we're always setting the random seed to the same value right "
"before the shuffle. Finally we're just ticking through our shuffled notes to "
"play the riff."
msgstr ""

#: A.04-synth-riffs.md:112
msgid ""
"Now, here's where the fun starts. If we change the random seed value to "
"another number, say 3000, we get an entirely different shuffling of the "
"notes. So now it's extremely easy to explore new melodies. Simply choose the "
"list of notes we want to shuffle (scales are a great starting point) and "
"then choose the seed we want to shuffle with. If we don't like the melody, "
"just change one of those two things and try again. Repeat until you like "
"what you hear!"
msgstr ""

#: A.04-synth-riffs.md:121
msgid "Pseudo Randomisation"
msgstr ""

#: A.04-synth-riffs.md:123
msgid ""
"Sonic Pi's randomisation is not actually random it's what's called pseudo "
"random. Imagine if you were to roll a dice 100 times and write down the "
"result of each roll onto a piece of paper. Sonic Pi has the equivalent of "
"this list of results which it uses when you ask for a random value. Instead "
"of rolling an actual dice, it just picks the next value from the list. "
"Setting the random seed is just jumping to a specific point in that list."
msgstr ""

#: A.04-synth-riffs.md:131
msgid "Finding your Rhythm"
msgstr ""

#: A.04-synth-riffs.md:133
msgid ""
"Another important aspect to our riff is the rhythm - when to play a note and "
"when not to. As we saw above we can use `:r` in our rings to insert rests. "
"Another very powerful way is to use spreads which we'll cover in a future "
"tutorial. Today we'll use randomisation to help us find our rhythm. Instead "
"of playing every note we can use a conditional to play a note with a given "
"probability. Let's take a look:"
msgstr ""

#: A.04-synth-riffs.md:140
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 30\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  16.times do\n"
"    play notes.tick, release: 0.2, cutoff: 90 if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: A.04-synth-riffs.md:152
msgid ""
"A really useful fn to know is `one_in` which will give us a `true` or "
"`false` value with the specified probability. Here, we're using a value of 2 "
"so on average one time every two calls to `one_in` it will return `true`. In "
"other words, 50% of the time it will return `true`. Using higher values will "
"make it return `false` more often introducing more space into the riff."
msgstr ""

#: A.04-synth-riffs.md:159
msgid ""
"Notice that we've added some iteration in here with `16.times`. This is "
"because we only want to reset our random seed value every 16 notes so our "
"rhythm repeats every 16 times. This doesn't affect the shuffling as that is "
"still done immediately after the seed is set. We can use the iteration size "
"to alter the length of the riff. Try changing the 16 to 8 or even 4 or 3 and "
"see how it affects the rhythm of the riff."
msgstr ""

#: A.04-synth-riffs.md:168
msgid ""
"OK, so let's combine everything we've learned together into one final "
"example. See you next time!"
msgstr ""

#: A.04-synth-riffs.md:171
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  #  uncomment to bring in:\n"
"  #  synth :blade, note: :e4, release: 4, cutoff: 100, amp: 1.5\n"
"  use_synth :dsaw\n"
"  use_random_seed 43\n"
"  notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle.take(8)\n"
"  8.times do\n"
"    play notes.tick, release: rand(0.5), cutoff: rrand(60, 130) if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  use_random_seed 500\n"
"  16.times do\n"
"    sample :bd_haus, rate: 2, cutoff: 110 if rand < 0.35\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :bd do\n"
"  sample :bd_haus, cutoff: 100, amp: 3\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: A.05-acid-bass.md:1
msgid "A.5 Acid Bass"
msgstr ""

#: A.05-acid-bass.md:3
msgid "Acid Bass"
msgstr ""

#: A.05-acid-bass.md:5
msgid ""
"It's impossible to look through the history of electronic dance music "
"without seeing the enormous impact of the tiny Roland TB-303 synthesiser. "
"It's the secret sauce behind the original acid bass sound. Those classic "
"squealing and squelching TB-303 bass riffs can be heard from the early "
"Chicago House scene through to more recent electronic artists such as "
"Plastikman, Squarepusher and Aphex Twin."
msgstr ""

#: A.05-acid-bass.md:12
msgid ""
"Interestingly, Roland never intended for the TB-303 to be used in dance "
"music. It was originally created as a practice aid for guitarists. They "
"imagined that people would program them to play bass lines to jam along to. "
"Unfortunately there were a number of problems: they were a little fiddly to "
"program, didn't sound particularly good as a bass-guitar replacement and "
"were pretty expensive to buy. Deciding to cut their losses, Roland stopped "
"making them after 10,000 units were sold and after a number of years sitting "
"on guitarist's shelves, they soon could be found in the windows of second "
"hand shops. These lonely discarded TB-303s were waiting to be discovered by "
"a new generation of experimenters who started using them in ways that Roland "
"didn't imagine to create new crazy sounds. Acid House was born."
msgstr ""

#: A.05-acid-bass.md:25
msgid ""
"Although getting your hands on an original TB-303 is not so easy you will be "
"pleased to know that you can turn your Raspberry Pi into one using the power "
"of Sonic Pi. Behold, fire up Sonic Pi and throw this code into an empty "
"buffer and hit Run:"
msgstr ""

#: A.05-acid-bass.md:30
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play :e1"
msgstr ""

#: A.05-acid-bass.md:35
msgid "Instant acid bass! Let's play around..."
msgstr ""

#: A.05-acid-bass.md:37
msgid "Squelch that Bass"
msgstr ""

#: A.05-acid-bass.md:39
msgid ""
"First, let's build a live arpeggiator to make things fun. In the last "
"tutorial we looked at how riffs can just be a ring of notes that we tick "
"through one after another, repeating when we get to the end. Let's create a "
"live loop that does exactly that:"
msgstr ""

#: A.05-acid-bass.md:44
#, no-wrap
msgid ""
"use_synth :tb303\n"
"live_loop :squelch do\n"
"  n = (ring :e1, :e2, :e3).tick\n"
"  play n, release: 0.125, cutoff: 100, res: 0.8, wave: 0\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.05-acid-bass.md:53
msgid "Take a look at each line."
msgstr ""

#: A.05-acid-bass.md:55
msgid ""
"On the first line we set the default synth to be `tb303` with the "
"`use_synth` fn."
msgstr ""

#: A.05-acid-bass.md:58
msgid ""
"On line two we create a live loop called `:squelch` which will just loop "
"round and round."
msgstr ""

#: A.05-acid-bass.md:61
msgid ""
"Line three is where we create our riff - a ring of notes (E in octaves 1, 2, "
"and 3) which we simply tick through with `.tick`. We define `n` to represent "
"the current note in the riff. The equals sign just means to assign the value "
"on the right to the name on the left. This will be different every time "
"round the loop. The first time round, `n` will be set to `:e1`. The second "
"time round it will be `:e2`, followed by `:e3`, and then back to `:e1`, "
"cycling round forever."
msgstr ""

#: A.05-acid-bass.md:70
msgid ""
"Line four is where we actually trigger our `:tb303` synth. We're passing a "
"few interesting opts here: `release:`, `cutoff:`, `res:` and `wave:` which "
"we'll discuss below."
msgstr ""

#: A.05-acid-bass.md:74
msgid ""
"Line five is our `sleep` - we're asking the live loop to loop round every "
"`0.125`s or 8 times a second at the default BPM of 60."
msgstr ""

#: A.05-acid-bass.md:77
msgid ""
"Line six is the `end` to the live loop. This just tells Sonic Pi where the "
"end of the live loop is."
msgstr ""

#: A.05-acid-bass.md:80
msgid ""
"Whilst you're still figuring out what's going on, type in the code above and "
"hit the Run button. You should hear the `:tb303` kick into action. Now, this "
"is where the action is: let's start live coding."
msgstr ""

#: A.05-acid-bass.md:84
msgid ""
"Whilst the loop is still live, change the `cutoff:` opt to `110`. Now hit "
"the Run button again. You should hear the sound become a little harsher and "
"more squelchy. Dial in `120` and hit run. Now `130`. Listen how higher "
"cutoff values make it sound more piercing and intense. Finally, drop it down "
"to `80` when you feel like a rest. Then repeat as many times as you want. "
"Don't worry, I'll still be here..."
msgstr ""

#: A.05-acid-bass.md:91
msgid ""
"Another opt worth playing with is `res:`. This controls the level of "
"resonance of the filter. A high resonance is characteristic of acid bass "
"sounds. We currently have our `res:` set to `0.8`. Try cranking it up to "
"`0.85`, then `0.9`, and finally `0.95`. You might find that a cutoff such as "
"`110` or higher will make the differences easier to hear. Finally go crazy "
"and dial in `0.999` for some insane sounds. At a `res` this high, you're "
"hearing the cutoff filter resonate so much it starts to make sounds of its "
"own!"
msgstr ""

#: A.05-acid-bass.md:100
msgid ""
"Finally, for a big impact on the timbre try changing the `wave:` opt to `1`. "
"This is the choice of source oscillator. The default is `0` which is a "
"sawtooth wave. `1` is a pulse wave and `2` is a triangle wave."
msgstr ""

#: A.05-acid-bass.md:104
msgid ""
"Of course, try different riffs by changing the notes in the ring or even "
"picking notes from scales or chords. Have fun with your first acid bass "
"synth."
msgstr ""

#: A.05-acid-bass.md:108
msgid "Deconstructing the TB-303"
msgstr ""

#: A.05-acid-bass.md:110
msgid ""
"The design of the original TB-303 is actually pretty simple. As you can see "
"from the following diagram there's only 4 core parts."
msgstr ""

#: A.05-acid-bass.md:113
msgid ""
"![TB-303 Design](../images/tutorial/articles/A.05-acid-bass/tb303-design.png)"
msgstr ""

#: A.05-acid-bass.md:115
msgid ""
"First is the oscillator wave - the raw ingredients of the sound. In this "
"case we have a square wave. Next there's the oscillator's amplitude envelope "
"which controls the amp of the square wave through time. These are accessed "
"in Sonic Pi by the `attack:`, `decay:`, `sustain:` and `release:` opts along "
"with their level counterparts. For more information read Section 2.4 "
"'Duration with Envelopes' in the built-in tutorial. We then pass our "
"enveloped square wave through a resonant low pass filter. This chops off the "
"higher frequencies as well as having that nice resonance effect. Now this is "
"where the fun starts. The cutoff value of this filter is also controlled by "
"its own envelope! This means we have amazing control over the timbre of the "
"sound by playing with both of these envelopes. Let's take a look:"
msgstr ""

#: A.05-acid-bass.md:128
#, no-wrap
msgid ""
"use_synth :tb303\n"
"with_fx :reverb, room: 1 do\n"
"  live_loop :space_scanner do\n"
"    play :e1, cutoff: 100, release: 7, attack: 1, cutoff_attack: 4, cutoff_release: 4\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""

#: A.05-acid-bass.md:138
msgid ""
"For each standard envelope opt, there's a `cutoff_` equivalent opt in the `:"
"tb303` synth. So, to change the cutoff attack time we can use the "
"`cutoff_attack:` opt. Copy the code above into an empty buffer and hit Run. "
"You'll hear a crazy sound warble in and out. Now start to play. Try changing "
"the `cutoff_attack:` time to `1` and then `0.5`. Now try `8`."
msgstr ""

#: A.05-acid-bass.md:144
msgid ""
"Notice that I've passed everything through a `:reverb` FX for extra "
"atmosphere - try other FX to see what works!"
msgstr ""

#: A.05-acid-bass.md:149
msgid ""
"Finally, here's a piece I composed using the ideas in this tutorial. Copy it "
"into an empty buffer, listen for a while and then start live coding your own "
"changes. See what crazy sounds you can make with it! See you next time..."
msgstr ""

#: A.05-acid-bass.md:154
#, no-wrap
msgid ""
"use_synth :tb303\n"
"use_debug false\n"
" \n"
"with_fx :reverb, room: 0.8 do\n"
"  live_loop :space_scanner do\n"
"    with_fx :slicer, phase: 0.25, amp: 1.5 do\n"
"      co = (line 70, 130, steps: 8).tick\n"
"      play :e1, cutoff: co, release: 7, attack: 1, cutoff_attack: 4, cutoff_release: 4\n"
"      sleep 8\n"
"    end\n"
"  end\n"
" \n"
"  live_loop :squelch do\n"
"    use_random_seed 3000\n"
"    16.times do\n"
"      n = (ring :e1, :e2, :e3).tick\n"
"      play n, release: 0.125, cutoff: rrand(70, 130), res: 0.9, wave: 1, amp: 0.8\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""

#: A.06-minecraft.md:1
msgid "A.6 Musical Minecraft"
msgstr ""

#: A.06-minecraft.md:3
msgid "Musical Minecraft"
msgstr ""

#: A.06-minecraft.md:7
msgid ""
"Hello and welcome back! In the previous tutorials we've focussed purely on "
"the music possibilities of Sonic Pi - (turning your Raspberry Pi into a "
"performance ready musical instrument). So far we've learned how to:"
msgstr ""

#: A.06-minecraft.md:11
msgid "Live Code - changing the sounds on-the-fly,"
msgstr ""

#: A.06-minecraft.md:12
msgid "Code some huge beats,"
msgstr ""

#: A.06-minecraft.md:13
msgid "Generate powerful synth leads,"
msgstr ""

#: A.06-minecraft.md:14
msgid "Re-create the famous TB-303 acid-bass sound."
msgstr ""

#: A.06-minecraft.md:16
msgid ""
"There's so much more to show you (which we will explore in future editions). "
"However, this month, let's look at something Sonic Pi can do that you "
"probably didn't realise: control Minecraft."
msgstr ""

#: A.06-minecraft.md:20
msgid "Hello Minecraft World"
msgstr ""

#: A.06-minecraft.md:22
msgid ""
"OK, let's get started. Boot up your Raspberry Pi, fire up Minecraft Pi and "
"create a new world. Now start up Sonic Pi and re-size and move your windows "
"so you can see both Sonic Pi and Minecraft Pi at the same time."
msgstr ""

#: A.06-minecraft.md:26
msgid "In a fresh buffer type the following:"
msgstr ""

#: A.06-minecraft.md:28
#, no-wrap
msgid "mc_message \"Hello Minecraft from Sonic Pi!\""
msgstr ""

#: A.06-minecraft.md:32
msgid ""
"Now, hit Run. Boom! Your message appeared in Minecraft! How easy was that? "
"Now, stop reading this for a moment and play about with your own messages. "
"Have fun!"
msgstr ""

#: A.06-minecraft.md:36
msgid ""
"![Screen 0](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-0-"
"small.png)"
msgstr ""

#: A.06-minecraft.md:38
msgid "Sonic Teleporter"
msgstr ""

#: A.06-minecraft.md:40
msgid ""
"Now let's do some exploring. The standard option is to reach for the mouse "
"and keyboard and start walking around. That works, but it's pretty slow and "
"boring. It would be far better if we had some sort of teleport machine. "
"Well, thanks to Sonic Pi, we have one. Try this:"
msgstr ""

#: A.06-minecraft.md:45
#, no-wrap
msgid "mc_teleport 80, 40, 100"
msgstr ""

#: A.06-minecraft.md:49
msgid ""
"Crikey! That was a long way up. If you weren't in flying-mode then you would "
"have fallen back down all the way to the ground. If you double-tap space to "
"enter flying-mode and teleport again, you'll stay hovering at the location "
"you zap to."
msgstr ""

#: A.06-minecraft.md:54
msgid ""
"Now, what do those numbers mean? We have three numbers which describe the "
"coordinates of where in the world we want to go. We give each number a name "
"- x, y and z:"
msgstr ""

#: A.06-minecraft.md:58
msgid "x - how far left and right (80 in our example)"
msgstr ""

#: A.06-minecraft.md:59
msgid "y - how high we want to be (40 in our example)"
msgstr ""

#: A.06-minecraft.md:60
msgid "z - how far forward and back (100 in our example)"
msgstr ""

#: A.06-minecraft.md:62
msgid ""
"By choosing different values for x, y and z we can teleport *anywhere* in "
"our world. Try it! Choose different numbers and see where you can end up. If "
"the screen goes black it's because you've teleported yourself under the "
"ground or into a mountain. Just choose a higher y value to get back out "
"above land. Keep on exploring until you find somewhere you like..."
msgstr ""

#: A.06-minecraft.md:69
msgid ""
"Using the ideas so far, let's build a Sonic Teleporter which makes a fun "
"teleport sound whilst it whizzes us across the Minecraft world:"
msgstr ""

#: A.06-minecraft.md:72
#, no-wrap
msgid ""
"mc_message \"Preparing to teleport....\"\n"
"sample :ambi_lunar_land, rate: -1\n"
"sleep 1\n"
"mc_message \"3\"\n"
"sleep 1\n"
"mc_message \"2\"\n"
"sleep 1\n"
"mc_message \"1\"\n"
"sleep 1\n"
"mc_teleport 90, 20, 10\n"
"mc_message \"Whoooosh!\""
msgstr ""

#: A.06-minecraft.md:86
msgid ""
"![Screen 1](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-1-"
"small.png)"
msgstr ""

#: A.06-minecraft.md:88
msgid "Magic Blocks"
msgstr ""

#: A.06-minecraft.md:90
msgid ""
"Now you've found a nice spot, let's start building. You could do what you're "
"used to and start clicking the mouse furiously to place blocks under the "
"cursor. Or you could use the magic of Sonic Pi. Try this:"
msgstr ""

#: A.06-minecraft.md:94
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :melon, x, y + 5, z"
msgstr ""

#: A.06-minecraft.md:99
msgid ""
"Now look up! There's a melon in the sky! Take a moment to look at the code. "
"What did we do? On line one we grabbed the current location of Steve as the "
"variables x, y and z. These correspond to our coordinates described above. "
"We use these coordinates in the fn `mc_set_block` which will place the block "
"of your choosing at the specified coordinates. In order to make something "
"higher up in the sky we just need to increase the y value which is why we "
"add 5 to it. Let's make a long trail of them:"
msgstr ""

#: A.06-minecraft.md:107
#, no-wrap
msgid ""
"live_loop :melon_trail do\n"
"  x, y, z = mc_location\n"
"  mc_set_block :melon, x, y-1, z\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.06-minecraft.md:115
msgid ""
"Now, jump over to Minecraft, make sure you're in flying-mode (double tap "
"space if not) and fly all around the world. Look behind you to see a pretty "
"trail of melon blocks! See what kind of twisty patterns you can make in the "
"sky."
msgstr ""

#: A.06-minecraft.md:120
msgid "Live Coding Minecraft"
msgstr ""

#: A.06-minecraft.md:122
msgid ""
"Those of you that have been following this tutorial over the last few months "
"will probably have your minds blown at this point. The trail of melons is "
"pretty cool, but the most exciting part of the previous example is that you "
"can use `live_loop` with Minecraft! For those that don't know, `live_loop` "
"is Sonic Pi's special magic ability that no other programming language has. "
"It lets you run multiple loops at the same time and allows you to change "
"them whilst they run. They are incredibly powerful and amazing fun. I use "
"`live_loop`s to perform music in nightclubs with Sonic Pi - DJs use discs "
"and I use `live_loop`s :-) However, today we're going to live code both "
"music and Minecraft."
msgstr ""

#: A.06-minecraft.md:133
msgid ""
"Let's get started. Run the code above and start making your melon trail "
"again. Now, without stopping the code, just simply change `:melon` to `:"
"brick` and hit run. Hey presto, you're now making a brick trail. How simple "
"was that! Fancy some music to go with it? Easy. Try this:"
msgstr ""

#: A.06-minecraft.md:138
#, no-wrap
msgid ""
"live_loop :bass_trail do\n"
"  tick\n"
"  x, y, z = mc_location\n"
"  b = (ring :melon, :brick, :glass).look\n"
"  mc_set_block b, x, y -1, z\n"
"  note = (ring :e1, :e2, :e3).look\n"
"  use_synth :tb303\n"
"  play note, release: 0.1, cutoff: 70\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.06-minecraft.md:151
msgid ""
"Now, whilst that's playing start changing the code. Change the block types - "
"try `:water`, `:grass` or your favourite block type. Also, try changing the "
"cutoff value from `70` to `80` and then up to `100`. Isn't this fun?"
msgstr ""

#: A.06-minecraft.md:158
msgid ""
"![Screen 2](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-2-"
"small.png)"
msgstr ""

#: A.06-minecraft.md:160
msgid ""
"Let's combine everything we've seen so far with a little extra magic. Let's "
"combine our teleportation ability with block placing and music to make a "
"Minecraft Music Video. Don't worry if you don't understand it all, just type "
"it in and have a play by changing some of the values whilst it's running "
"live. Have fun and see you next time..."
msgstr ""

#: A.06-minecraft.md:166
#, no-wrap
msgid ""
"live_loop :note_blocks do\n"
"  mc_message \"This is Sonic Minecraft\"\n"
"  with_fx :reverb do\n"
"    with_fx :echo, phase: 0.125, reps: 32 do\n"
"      tick\n"
"      x = (range 30, 90, step: 0.1).look\n"
"      y = 20\n"
"      z = -10\n"
"      mc_teleport x, y, z\n"
"      ns = (scale :e3, :minor_pentatonic)\n"
"      n = ns.shuffle.choose\n"
"      bs = (knit :glass, 3, :sand, 1)\n"
"      b = bs.look\n"
"      synth :beep, note: n, release: 0.1\n"
"      mc_set_block b, x+20, n-60+y, z+10\n"
"      mc_set_block b, x+20, n-60+y, z-10\n"
"      sleep 0.25\n"
"    end\n"
"  end\n"
"end\n"
"live_loop :beats do\n"
"  sample :bd_haus, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: A.07-bizet.md:1
msgid "A.7 Bizet Beats"
msgstr ""

#: A.07-bizet.md:3
msgid "Bizet Beats"
msgstr ""

#: A.07-bizet.md:5
msgid ""
"After our brief excursion to the fantastic world of coding Minecraft with "
"Sonic Pi last month, let's get musical again. Today we're going to bring a "
"classical operatic dance piece straight into the 21st century using the "
"awesome power of code."
msgstr ""

#: A.07-bizet.md:10
msgid "Outrageous and Disruptive"
msgstr ""

#: A.07-bizet.md:12
msgid ""
"Let's jump into a time machine back to the year 1875. A composer called "
"Bizet had just finished his latest opera Carmen. Unfortunately like many "
"exciting and disruptive new pieces of music people initially didn't like it "
"at all because it was too outrageous and different. Sadly Bizet died ten "
"years before the opera gained huge international success and became one of "
"the most famous and frequently performed operas of all time. In sympathy "
"with this tragedy let's take one of the main themes from Carmen and convert "
"it to a modern format of music that is also too outrageous and different for "
"most people in our time - live coded music!"
msgstr ""

#: A.07-bizet.md:23
msgid "Decoding the Habanera"
msgstr ""

#: A.07-bizet.md:25
msgid ""
"Trying to live code the whole opera would be a bit of a challenge for this "
"tutorial, so let's focus on one of the most famous parts - the bass line to "
"the Habanera:"
msgstr ""

#: A.07-bizet.md:29
msgid "![Habanera Riff](../images/tutorial/articles/A.07-bizet/habanera.png)"
msgstr ""

#: A.07-bizet.md:31
msgid ""
"This may look extremely unreadable to you if you haven't yet studied music "
"notation. However, as programmers we see music notation as just another form "
"of code - only it represents instructions to a musician instead of a "
"computer. We therefore need to figure out a way of decoding it."
msgstr ""

#: A.07-bizet.md:36
msgid "Notes"
msgstr ""

#: A.07-bizet.md:38
msgid ""
"The notes are arranged from left to right like the words in this magazine "
"but also have different heights. *The height on the score represents the "
"pitch of the note.* The higher the note on the score, the higher the pitch "
"of the note."
msgstr ""

#: A.07-bizet.md:43
msgid ""
"In Sonic Pi we already know how to change the pitch of a note - we either "
"use high or low numbers such as `play 75` and `play 80` or we use the note "
"names: `play :E` and `play :F`. Luckily each of the vertical positions of "
"the musical score represents a specific note name. Take a look at this handy "
"look up table:"
msgstr ""

#: A.07-bizet.md:49
msgid "![Notes](../images/tutorial/articles/A.07-bizet/notes.png)"
msgstr ""

#: A.07-bizet.md:51
msgid "Rests"
msgstr ""

#: A.07-bizet.md:53
msgid ""
"Music scores are an extremely rich and expressive kind of code capable of "
"communicating many things. It therefore shouldn't come as much of a surprise "
"that musical scores can not only tell you what notes to play but also when "
"*not* to play notes. In programming this is pretty much equivalent to the "
"idea of `nil` or `null` - the absence of a value. In other words not playing "
"a note is like the absence of a note."
msgstr ""

#: A.07-bizet.md:60
msgid ""
"If you look closely at the score you'll see that it's actually a combination "
"of black dots with lines which represent notes to play and squiggly things "
"which represent the rests. Luckily Sonic Pi has a very handy representation "
"for a rest: `:r`, so if we run: `play :r` it actually plays silence! We "
"could also write `play :rest`, `play nil` or `play false` which are all "
"equivalent ways of representing rests."
msgstr ""

#: A.07-bizet.md:67
msgid "Rhythm"
msgstr ""

#: A.07-bizet.md:69
msgid ""
"Finally, there's one last thing to learn how to decode in the notation - the "
"timings of the notes. In the original notation you'll see that the notes are "
"connected with thick lines called beams. The second note has two of these "
"beams which means it lasts for a 16th of a beat. The other notes have a "
"single beam which means they last for an 8th of a beat. The rest has two "
"squiggly beams which means it also represents a 16th of the beat."
msgstr ""

#: A.07-bizet.md:77
msgid ""
"When we attempt to decode and explore new things a very handy trick is to "
"make everything as similar as possible to try and see any relationships or "
"patterns. For example, when we re-write our notation purely in 16ths you can "
"see that our notation just turns into a nice sequence of notes and rests."
msgstr ""

#: A.07-bizet.md:83
msgid ""
"![Habanera Riff 2](../images/tutorial/articles/A.07-bizet/habanera2.png)"
msgstr ""

#: A.07-bizet.md:85
msgid "Re-coding the Habanera"
msgstr ""

#: A.07-bizet.md:87
msgid ""
"We're now in a position to start translating this bass line to Sonic Pi. "
"Let's encode these notes and rests in a ring:"
msgstr ""

#: A.07-bizet.md:90
#, no-wrap
msgid "(ring :d, :r, :r, :a, :f5, :r, :a, :r)"
msgstr ""

#: A.07-bizet.md:94
msgid ""
"Let's see what this sounds like. Throw it in a live loop and tick through it:"
msgstr ""

#: A.07-bizet.md:97
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end"
msgstr ""

#: A.07-bizet.md:104
msgid ""
"Fabulous, that instantly recognisable riff springs to life through your "
"speakers. It took a lot of effort to get here, but it was worth it - high "
"five!"
msgstr ""

#: A.07-bizet.md:108
msgid "Moody Synths"
msgstr ""

#: A.07-bizet.md:110
msgid ""
"Now we have the bass line, let's re-create some of the ambience of the "
"operatic scene. One synth to try out is `:blade` which is a moody 80s style "
"synth lead. Let's try it with the starting note `:d` passed through a slicer "
"and reverb:"
msgstr ""

#: A.07-bizet.md:115
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  use_synth :fm\n"
"  use_transpose -12\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end\n"
"with_fx :reverb do\n"
"  live_loop :space_light do\n"
"    with_fx :slicer, phase: 0.25 do\n"
"      synth :blade, note: :d, release: 8, cutoff: 100, amp: 2\n"
"    end\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""

#: A.07-bizet.md:133
msgid ""
"Now, try the other notes in the bass line: `:a` and `:f5`. Remember, you "
"don't need to hit stop, just modify the code whilst the music is playing and "
"hit run again. Also, try different values for the slicer's `phase:` opt such "
"as `0.5`, `0.75` and `1`."
msgstr ""

#: A.07-bizet.md:140
msgid ""
"Finally, let's combine all the ideas so far into a new remix of the "
"Habanera. You might notice that I've included another part of the bass line "
"as a comment. Once you've typed it all into a fresh buffer hit Run to hear "
"the composition. Now, without hitting stop, *uncomment* the second line by "
"removing the `#` and hit run again - how marvellous is that! Now, start "
"mashing it around yourself and have fun."
msgstr ""

#: A.07-bizet.md:147
#, no-wrap
msgid ""
"use_debug false\n"
"bizet_bass = (ring :d, :r, :r, :a, :f5, :r, :a, :r)\n"
"#bizet_bass = (ring :d, :r, :r, :Bb, :g5, :r, :Bb, :r)\n"
" \n"
"with_fx :reverb, room: 1, mix: 0.3 do\n"
"  live_loop :bizet do\n"
"    with_fx :slicer, phase: 0.125 do\n"
"      synth :blade, note: :d4, release: 8,\n"
"        cutoff: 100, amp: 1.5\n"
"    end\n"
"    16.times do\n"
"      tick\n"
"      play bizet_bass.look, release: 0.1\n"
"      play bizet_bass.look - 12, release: 0.3\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end\n"
" \n"
"live_loop :ind do\n"
"  sample :loop_industrial, beat_stretch: 1,\n"
"    cutoff: 100, rate: 1\n"
"  sleep 1\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  sample :bd_haus, cutoff: 110\n"
"  synth :beep, note: 49, attack: 0,\n"
"    release: 0.1\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: A.08-minecraft-vj.md:1
msgid "A.8 Become a Minecraft VJ"
msgstr ""

#: A.08-minecraft-vj.md:3
msgid "Become a Minecraft VJ"
msgstr ""

#: A.08-minecraft-vj.md:5
msgid ""
"![Screen 0](../images/tutorial/articles/A.08-minecraft-vj/minecraft-vj-0-"
"small.png)"
msgstr ""

#: A.08-minecraft-vj.md:7
msgid ""
"Everyone has played Minecraft. You will all have built amazing structures, "
"designed cunning traps and even created elaborate cart lines controlled by "
"redstone switches. How many of you have performed with Minecraft? We bet you "
"didn't know that you could use Minecraft to create amazing visuals just like "
"a professional VJ."
msgstr ""

#: A.08-minecraft-vj.md:13
msgid ""
"If your only way of modifying Minecraft was with the mouse, you'd have a "
"tough time changing things fast enough. Luckily for you your Raspberry Pi "
"comes with a version of Minecraft that can be controlled with code. It also "
"comes with an app called Sonic Pi which makes coding Minecraft not only easy "
"but also incredibly fun."
msgstr ""

#: A.08-minecraft-vj.md:19
msgid ""
"In today's article we'll be showing you some of the tips and tricks that "
"we've used to create performances in night clubs and music venues around the "
"world."
msgstr ""

#: A.08-minecraft-vj.md:23
msgid "Let's get started..."
msgstr ""

#: A.08-minecraft-vj.md:25
msgid "Getting Started"
msgstr ""

#: A.08-minecraft-vj.md:27
msgid ""
"Let's start with a simple warm up exercise to refresh ourselves with the "
"basics. First up, crack open your Raspberry Pi and then fire up both "
"Minecraft and Sonic Pi. In Minecraft, create a new world, and in Sonic Pi "
"choose a fresh buffer and write in this code:"
msgstr ""

#: A.08-minecraft-vj.md:32
#, no-wrap
msgid "mc_message \"Let's get started...\""
msgstr ""

#: A.08-minecraft-vj.md:36
msgid ""
"Hit the Run button and you'll see the message over in the Minecraft window. "
"OK, we're ready to start, let's have some fun......"
msgstr ""

#: A.08-minecraft-vj.md:39
msgid "Sand Storms"
msgstr ""

#: A.08-minecraft-vj.md:41
msgid ""
"When we're using Minecraft to create visuals we try and think about what "
"will both look interesting and also be easy to generate from code. One nice "
"trick is to create a sand storm by dropping sand blocks from the sky. For "
"that all we need are a few basic fns:"
msgstr ""

#: A.08-minecraft-vj.md:46
msgid "`sleep` - for inserting a delay between actions"
msgstr ""

#: A.08-minecraft-vj.md:47
msgid "`mc_location` - to find our current location"
msgstr ""

#: A.08-minecraft-vj.md:48
msgid "`mc_set_block`- to place sand blocks at a specific location"
msgstr ""

#: A.08-minecraft-vj.md:49
msgid "`rrand` - to allow us to generate random values within a range"
msgstr ""

#: A.08-minecraft-vj.md:50
msgid "`live_loop` - to allow us to continually make it rain sand"
msgstr ""

#: A.08-minecraft-vj.md:52
msgid ""
"If you're unfamiliar with any of the built-in fns such as `rrand`, just type "
"the word into your buffer, click on it and then hit the keyboard combo "
"`Control-i` to bring up the built-in documentation. Alternatively you can "
"navigate to the *lang* tab in the Help system and then look up the fns "
"directly along with all the other exciting things you can do."
msgstr ""

#: A.08-minecraft-vj.md:58
msgid ""
"Let's make it rain a little first before unleashing the full power of the "
"storm. Grab your current location and use it to create a few sand blocks up "
"in the sky nearby:"
msgstr ""

#: A.08-minecraft-vj.md:62
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :sand, x, y + 20, z + 5\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 6\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 7\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 8"
msgstr ""

#: A.08-minecraft-vj.md:73
msgid ""
"When you hit Run, you might have to look around a little as the blocks may "
"start falling down behind you depending on which direction you're currently "
"facing. Don't worry, if you missed them just hit Run again for another batch "
"of sand rain - just make sure you're looking the right way!"
msgstr ""

#: A.08-minecraft-vj.md:79
msgid ""
"Let's quickly review what's going on here. On the first line we grabbed "
"Steve's location as coordinates with the fn `mc_location` and placed them "
"into the vars `x`, `y`, and `z`. Then on the next lines we used the "
"`mc_set_block` fn to place some sand at the same coordinates as Steve but "
"with some modifications. We chose the same x coordinate, a y coordinate 20 "
"blocks higher and then successively larger z coordinates so the sand dropped "
"in a line away from Steve."
msgstr ""

#: A.08-minecraft-vj.md:87
msgid ""
"Why don't you take that code and start playing around with it yourself? Try "
"adding more lines, changing the sleep times, try mixing `:sand` with `:"
"gravel` and choose different coordinates. Just experiment and have fun!"
msgstr ""

#: A.08-minecraft-vj.md:91
msgid "Live Loops Unleashed"
msgstr ""

#: A.08-minecraft-vj.md:93
msgid ""
"OK, it's time to get the storm raging by unleashing the full power of the "
"`live_loop` - Sonic Pi's magical ability which unleashes the full power of "
"live coding - changing code on-the-fly whilst it's running!"
msgstr ""

#: A.08-minecraft-vj.md:97
#, no-wrap
msgid ""
"live_loop :sand_storm do\n"
"  x, y, z = mc_location\n"
"  xd = rrand(-10, 10)\n"
"  zd = rrand(-10, 10)\n"
"  co = rrand(70, 130)\n"
"  synth :cnoise, attack: 0, release: 0.125, cutoff: co\n"
"  mc_set_block :sand, x + xd, y+20, z+zd\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.08-minecraft-vj.md:109
msgid ""
"What fun! We're looping round pretty quickly (8 times a second) and during "
"each loop we're finding Steve's location like before but then generating 3 "
"random values:"
msgstr ""

#: A.08-minecraft-vj.md:113
msgid "`xd` - the difference for x which will be between -10 and 10"
msgstr ""

#: A.08-minecraft-vj.md:114
msgid "`zd` - the difference for z also between -10 and 10"
msgstr ""

#: A.08-minecraft-vj.md:115
msgid "`co` - a cutoff value for the low pass filter between 70 and 130"
msgstr ""

#: A.08-minecraft-vj.md:117
msgid ""
"We then use those random values in the fns `synth` and `mc_set_block` giving "
"us sand falling in random locations around Steve along with a percussive "
"rain-like sound from the `:cnoise` synth."
msgstr ""

#: A.08-minecraft-vj.md:121
msgid ""
"For those of you new to live loops - this is where the fun really starts "
"with Sonic Pi. Whilst the code is running and the sand is pouring down, try "
"changing one of the values, perhaps the sleep time to `0.25` or the `:sand` "
"block type to `:gravel`. Now hit run *again*. Hey Presto! Things changed "
"without the code stopping. This is your gateway to performing like a real "
"VJ. Keep practising and changing things around. How different can you make "
"the visuals without stopping the code?"
msgstr ""

#: A.08-minecraft-vj.md:129
msgid "Epic Block Patterns"
msgstr ""

#: A.08-minecraft-vj.md:131
msgid ""
"![Screen 1](../images/tutorial/articles/A.08-minecraft-vj/minecraft-vj-1-"
"small.png)"
msgstr ""

#: A.08-minecraft-vj.md:133
msgid ""
"Finally, another great way of generating interesting visuals is to generate "
"huge patterned walls to fly towards and close by. For this effect we'll need "
"to move from placing the blocks randomly to placing them in an ordered "
"manner. We can do this by nesting two sets of iteration (hit the Help button "
"and navigate to section 5.2 of the tutorial \"Iteration and Loops\" for more "
"background on iteration). The funny `|xd|` after the do means that `xd` will "
"be set for each value of the iteration. So the first time it will be 0, then "
"1, then 2... etc. By nesting two lots of iteration together like this we can "
"generate all the coordinates for a square. We can then randomly choose block "
"types from a ring of blocks for an interesting effect:"
msgstr ""

#: A.08-minecraft-vj.md:145
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"bs = (ring :gold, :diamond, :glass)\n"
"10.times do |xd|\n"
"  10.times do |yd|\n"
"    mc_set_block bs.choose, x + xd, y + yd, z\n"
"  end\n"
"end"
msgstr ""

#: A.08-minecraft-vj.md:155
msgid ""
"Pretty neat. Whilst we're having fun here, try changing `bs.choose` to `bs."
"tick` to move from a random pattern to a more regular one. Try changing the "
"block types and the more adventurous of you might want to try sticking this "
"within a `live_loop` so that the patterns keep changing automatically."
msgstr ""

#: A.08-minecraft-vj.md:161
msgid ""
"Now, for the VJ finale - change the two `10.times` to `100.times` and hit "
"Run. Kaboom! A Huge gigantic wall of randomly placed bricks. Imagine how "
"long it would take you to build that manually with your mouse! Double-tap "
"space to enter fly-mode and start swooping by for some great visual effects. "
"Don't stop here though - use your imagination to conjure up some cool ideas "
"and then use the coding power of Sonic Pi to make it real. When you've "
"practised enough dim the lights and put on a VJ show for your friends!"
msgstr ""

#: A.09-randomisation.md:1
msgid "A.9 Randomisation"
msgstr ""

#: A.09-randomisation.md:3
msgid "Surfing Random Streams"
msgstr ""

#: A.09-randomisation.md:5
msgid ""
"Back in episode 4 of this tutorial series we took a brief look at "
"randomisation whilst coding up some sizzling synth riffs. Given that "
"randomisation is such an important part of my live coding DJ sets I thought "
"it would be useful to cover the fundamentals in much greater detail. So, get "
"your lucky hat on and let's surf some random streams!"
msgstr ""

#: A.09-randomisation.md:11
msgid "There is no random"
msgstr ""

#: A.09-randomisation.md:13
msgid ""
"The first thing to learn which might really surprise you when playing with "
"Sonic Pi's randomisation functions is that they're not actually really "
"random. What does this actually mean? Well, let's try a couple of tests. "
"First, imagine a number in your head between 0 and 1. Keep it there and "
"don't tell me. Now let me guess... was it `0.321567`? No? Bah, I'm clearly "
"no good at this. Let me have another go, but let's ask Sonic Pi to choose a "
"number this time. Fire up Sonic Pi v2.7+ and ask it for a random number but "
"again don't tell me:"
msgstr ""

#: A.09-randomisation.md:22
#, no-wrap
msgid "print rand"
msgstr ""

#: A.09-randomisation.md:26
msgid ""
"Now for the reveal... was it `0.75006103515625`? Yes! Ha, I can see you're a "
"little sceptical. Perhaps it was just a lucky guess. Let's try again. Press "
"the Run button again and see what we get... What? `0.75006103515625` again? "
"This clearly can't be random! You're right, it's not."
msgstr ""

#: A.09-randomisation.md:32
msgid ""
"What's going on here? The fancy computer science word here is determinism. "
"This just means that nothing is by chance and everything is destined to be. "
"Your version of Sonic Pi is destined to always return `0.75006103515625` in "
"the program above. This might sound pretty useless, but let me assure you "
"that it's one of the most powerful parts of Sonic Pi. If you stick at it "
"you'll learn how to rely on the deterministic nature of Sonic Pi's "
"randomisation as a fundamental building block for your compositions and live "
"coded DJ sets."
msgstr ""

#: A.09-randomisation.md:41
msgid "A Random Melody"
msgstr ""

#: A.09-randomisation.md:43
msgid ""
"When Sonic Pi boots it actually loads into memory a sequence of 441,000 pre-"
"generated random values. When you call a random function such as `rand` or "
"`rrand`, this random stream is used to generate your result. Each call to a "
"random function consumes a value from this stream. Therefore the 10th call "
"to a random function will use the 10th value from the stream. Also, every "
"time you press the Run button, the stream is reset for that run. This is why "
"I could predict the result to `rand` and why the 'random' melody was the "
"same every time. Everybody's version of Sonic Pi uses the exact same random "
"stream which is very important when we start sharing our pieces with each "
"other."
msgstr ""

#: A.09-randomisation.md:54
msgid "Let's use this knowledge to generate a repeatable random melody:"
msgstr ""

#: A.09-randomisation.md:56
#, no-wrap
msgid ""
"8.times do\n"
" play rrand_i(50, 95)\n"
" sleep 0.125\n"
"end"
msgstr ""

#: A.09-randomisation.md:63
msgid ""
"Type this into a spare buffer and hit Run. You'll hear a melody consisting "
"of 'random' notes between 50 and 95. When it's finished, hit Run again to "
"hear exactly the same melody again."
msgstr ""

#: A.09-randomisation.md:67
msgid "Handy Randomisation Functions"
msgstr ""

#: A.09-randomisation.md:69
msgid ""
"Sonic Pi comes with a number of useful functions for working with the random "
"stream. Here's a list of some of the most useful:"
msgstr ""

#: A.09-randomisation.md:72
msgid "`rand` - Simply returns the next value in the random stream"
msgstr ""

#: A.09-randomisation.md:73
msgid "`rrand` - Returns a random value within a range"
msgstr ""

#: A.09-randomisation.md:74
msgid "`rrand_i` - Returns a random whole number within a range"
msgstr ""

#: A.09-randomisation.md:75
msgid "`one_in` - Returns true or false with the given probability"
msgstr ""

#: A.09-randomisation.md:76
msgid "`dice` - Imitates rolling a dice and returns a value between 1 and 6"
msgstr ""

#: A.09-randomisation.md:77
msgid "`choose` - Chooses a random value from a list"
msgstr ""

#: A.09-randomisation.md:79
msgid ""
"Check out their documentation in the Help system for detailed information "
"and examples."
msgstr ""

#: A.09-randomisation.md:82
msgid "Resetting the Stream"
msgstr ""

#: A.09-randomisation.md:84
msgid ""
"Whilst the ability to repeat a sequence of chosen notes is essential to "
"allow you to replay a riff on the dance floor, it might not be exactly the "
"riff you want. Wouldn't it be great if we could try a number of different "
"riffs and choose the one we liked best? This is where the real magic starts."
msgstr ""

#: A.09-randomisation.md:90
msgid ""
"We can manually set the stream with the fn `use_random_seed`. In Computer "
"Science, a random seed is the starting point from which a new stream of "
"random values can sprout out and blossom. Let's try it:"
msgstr ""

#: A.09-randomisation.md:94
#, no-wrap
msgid ""
"use_random_seed 0\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.09-randomisation.md:102
msgid ""
"Great, we get the first three notes of our random melody above: `84`, `83` "
"and `71`. However, we can now change the seed to something else. How about "
"this:"
msgstr ""

#: A.09-randomisation.md:106
#, no-wrap
msgid ""
"use_random_seed 1\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.09-randomisation.md:114
msgid ""
"Interesting, we get `83`, `71` and `61` . You might notice that the first "
"two numbers here are the same as the last two numbers before - this isn't a "
"coincidence."
msgstr ""

#: A.09-randomisation.md:118
msgid ""
"Remember that the random stream is just a giant list of 'pre-rolled' values. "
"Using a random seed simply jumps us to a point in that list. Another way of "
"thinking about it is to imagine a huge deck of pre-shuffled cards. Using a "
"random seed is cutting the deck at a particular point. The fabulous part of "
"this is that it's precisely this ability to jump around the random stream "
"which gives us huge power when making music."
msgstr ""

#: A.09-randomisation.md:126
msgid ""
"Let's revisit our random melody of 8 notes with this new stream resetting "
"power, but let's also throw in a live loop so we can experiment live whilst "
"it's playing:"
msgstr ""

#: A.09-randomisation.md:130
#, no-wrap
msgid ""
"live_loop :random_riff do    \n"
"  use_random_seed 0\n"
"  8.times do\n"
"    play rrand_i(50, 95), release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: A.09-randomisation.md:140
msgid ""
"Now, whilst it's still playing, change the seed value from `0` to something "
"else. Try `100`, what about `999`. Try your own values, experiment and play "
"around - see which seed generates the riff you like best."
msgstr ""

#: A.09-randomisation.md:147
msgid ""
"This month's tutorial has been quite a technical dive into the workings of "
"Sonic Pi's randomisation functionality. Hopefully it has given you some "
"insight into how it works and how you can start using randomisation in a "
"reliable way to create repeatable patterns within your music. It's important "
"to stress that you can use repeatable randomisation *anywhere* you want. For "
"example, you can randomise the amplitude of notes, the timing of the rhythm, "
"the amount of reverb, the current synth, the mix of an FX, etc. etc. In the "
"future we'll take a close look at some of these applications, but for now "
"let me leave you with a short example."
msgstr ""

#: A.09-randomisation.md:157
msgid ""
"Type the following into a spare buffer, hit Run, and then start changing the "
"seeds around, hit Run again (whilst it's still playing) and explore the "
"different sounds, rhythms and melodies you can make. When you find a nice "
"one, remember the seed number so you can get back to it. Finally, when "
"you've found a few seeds you like, put on a live coded performance for your "
"friends by simply switching between your favourite seeds to create a full "
"piece."
msgstr ""

#: A.09-randomisation.md:165
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_random_seed 10300\n"
"  use_synth :prophet\n"
"  s = [0.125, 0.25, 0.5].choose\n"
"  8.times do\n"
"    r = [0.125, 0.25, 1, 2].choose\n"
"    n = (scale :e3, :minor).choose\n"
"    co = rrand(30, 100)\n"
"    play n, release: r, cutoff: co\n"
"    sleep s\n"
"  end\n"
"end\n"
"live_loop :drums do\n"
"  use_random_seed 2001\n"
"  16.times do\n"
"    r = rrand(0.5, 10)\n"
"    sample :drum_bass_hard, rate: r, amp: rand\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""

#: A.10-controlling-your-sound.md:1
msgid "A.10 Control"
msgstr ""

#: A.10-controlling-your-sound.md:3
msgid "Controlling Your Sound"
msgstr ""

#: A.10-controlling-your-sound.md:5
msgid ""
"So far during this series we've focussed on triggering sounds. We've "
"discovered that we can trigger the many synths built into Sonic Pi with "
"`play` or `synth` and how to trigger pre-recorded samples with `sample`. "
"We've also looked at how we can wrap these triggered sounds within studio FX "
"such as reverb and distortion using the `with_fx` command. Combine this with "
"Sonic Pi's incredibly accurate timing system and you can produce a vast "
"array of sounds, beats and riffs. However, once you've carefully selected a "
"particular sound's options and triggered it, there's no ability to mess with "
"it whilst it's playing right? Wrong! Today you're going to learn something "
"very powerful - how to control running synths."
msgstr ""

#: A.10-controlling-your-sound.md:17
msgid "A Basic Sound"
msgstr ""

#: A.10-controlling-your-sound.md:19
msgid ""
"Let's create a nice simple sound. Fire up Sonic Pi and in a fresh buffer "
"type the following:"
msgstr ""

#: A.10-controlling-your-sound.md:22
#, no-wrap
msgid "synth :prophet, note: :e1, release: 8, cutoff: 100"
msgstr ""

#: A.10-controlling-your-sound.md:26
msgid ""
"Now press the Run button at the top left to hear a lovely rumbling synth "
"sound. Go ahead, press it again a few times to get a feel for it. OK, done? "
"Let's start controlling it!"
msgstr ""

#: A.10-controlling-your-sound.md:30
msgid "Synth Nodes"
msgstr ""

#: A.10-controlling-your-sound.md:32
msgid ""
"A little known feature in Sonic Pi is that the fns `play`, `synth` and "
"`sample`, return something called a `SynthNode` which represents a running "
"sound. You can capture one of these `SynthNode`s using a standard variable "
"and then **control** it at a later point in time. For example, let's change "
"the value of the `cutoff:` opt after 1 beat:"
msgstr ""

#: A.10-controlling-your-sound.md:38
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""

#: A.10-controlling-your-sound.md:44
msgid "Let's look at each line in turn:"
msgstr ""

#: A.10-controlling-your-sound.md:46
msgid ""
"Firstly we trigger the `:prophet` synth using the `synth` fn as normal. "
"However we also capture the result in a variable called `sn`. We could have "
"called this variable something completely different such as `synth_node` or "
"`jane` - the name doesn't matter. However, it's important to choose a name "
"that's meaningful to you for your performances and for people reading your "
"code. I chose `sn` as it's a nice short mnemonic for synth node."
msgstr ""

#: A.10-controlling-your-sound.md:54
msgid ""
"On line 2 we have a standard `sleep` command. This does nothing special - it "
"just asks the computer to wait for 1 beat before moving onto the next line."
msgstr ""

#: A.10-controlling-your-sound.md:58
msgid ""
"Line 3 is where the control fun starts. Here, we use the `control` fn to "
"tell our running `SynthNode` to change the cutoff value to `130`. If you hit "
"the **Run** button, you'll hear the `:prophet` synth start playing as "
"before, but after 1 beat it will shift to sound a lot brighter."
msgstr ""

#: A.10-controlling-your-sound.md:63
msgid "Modulatable Options"
msgstr ""

#: A.10-controlling-your-sound.md:65
msgid ""
"Most of Sonic Pi's synths and FX opts may be changed after being triggered. "
"However, this isn't the case for all of them. For example, the envelope opts "
"`attack:`, `decay:`, `sustain:` and `release:` can only be set when "
"triggering the synth. Figuring out which opts can and can't be changed is "
"simple - just head to the documentation for a given synth or FX and then "
"scroll down to the individual option documentation and look for the phrases "
"\"May be changed whilst playing\" or \"Can not be changed once set\". For "
"example, the documentation for the `:beep` synth's `attack:` opt makes it "
"clear that it's not possible to change it:"
msgstr ""

#: A.10-controlling-your-sound.md:76
msgid "Default: 0"
msgstr ""

#: A.10-controlling-your-sound.md:77
msgid "Must be zero or greater"
msgstr ""

#: A.10-controlling-your-sound.md:78
msgid "Can not be changed once set"
msgstr ""

#: A.10-controlling-your-sound.md:79
msgid "Scaled with current BPM value"
msgstr ""

#: A.10-controlling-your-sound.md:81
msgid "Multiple Changes"
msgstr ""

#: A.10-controlling-your-sound.md:83
msgid ""
"Whilst a synth is running you're not limited to changing it only once - "
"you're free to change it as many times as you like. For example, we can turn "
"our `:prophet` into a mini arpeggiator with the following:"
msgstr ""

#: A.10-controlling-your-sound.md:87
#, no-wrap
msgid ""
"notes = (scale :e3, :minor_pentatonic)\n"
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"16.times do\n"
"  control sn, note: notes.tick\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.10-controlling-your-sound.md:97
msgid ""
"In this snippet of code we just added a couple of extra things. First we "
"defined a new variable called `notes` which contains the notes we'd like to "
"cycle through (an arpeggiator is just a fancy name for something that cycles "
"through a list of notes in order). Secondly we replaced our single call to "
"`control` with an iteration calling it 16 times. In each call to `control` "
"we `.tick` through our ring of `notes` which will automatically repeat once "
"we get to the end (thanks to the fabulous power of Sonic Pi's rings). For a "
"bit of variety try replacing `.tick` with `.choose` and see if you can hear "
"the difference."
msgstr ""

#: A.10-controlling-your-sound.md:107
msgid ""
"Note that we can change multiple opts simultaneously. Try changing the "
"control line to the following and listen for the difference:"
msgstr ""

#: A.10-controlling-your-sound.md:110
#, no-wrap
msgid "control sn, note: notes.tick, cutoff: rrand(70, 130)"
msgstr ""

#: A.10-controlling-your-sound.md:114
msgid "Sliding"
msgstr ""

#: A.10-controlling-your-sound.md:116
msgid ""
"When we control a `SynthNode`, it responds exactly on time and instantly "
"changes the value of the opt to the new one as if you'd pressed a button or "
"flicked a switch requesting the change. This can sound rhythmical and "
"percussive - especially if the opt controls an aspect of the timbre such as "
"`cutoff:`. However, sometimes you don't want the change to happen "
"instantaneously. Instead, you might want to smoothly move from the current "
"value to the new one as if you'd moved a slider or dial. Of course, Sonic Pi "
"can also do this too using the `_slide:` opts."
msgstr ""

#: A.10-controlling-your-sound.md:125
msgid ""
"Each opt that can be modified also has a special corresponding `_slide:` opt "
"that allows you to specify a slide time. For example, `amp:` has `amp_slide:"
"` and `cutoff:` has `cutoff_slide:`. These slide opts work slightly "
"differently than all the other opts in that they tell the synth note how to "
"behave **next time they are controlled**. Let's take a look:"
msgstr ""

#: A.10-controlling-your-sound.md:131
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 2\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""

#: A.10-controlling-your-sound.md:137
msgid ""
"Notice how this example is exactly the same as before except with the "
"addition of `cutoff_slide:`. This is saying that next time this synth has "
"its `cutoff:` opt controlled, it will take 2 beats to slide from the current "
"value to the new one. Therefore, when we use `control` you can hear the "
"cutoff slide from 70 to 130. It creates an interesting dynamic feel to the "
"sound. Now, try changing the `cutoff_slide:` time to a shorter value such as "
"0.5 or a longer value such as 4 to see how it changes the sound. Remember, "
"you can slide any of the modifiable opts in exactly this way and each "
"`_slide:` value can be totally different so you can have the cutoff sliding "
"slowly, the amp sliding fast and the pan sliding somewhere in between if "
"that's what you're looking to create..."
msgstr ""

#: A.10-controlling-your-sound.md:151
msgid ""
"Let's look at a short example which demonstrates the power of controlling "
"synths after they've been triggered. Notice that you can also slide FX just "
"like synths although with a slightly different syntax. Check out section 7.2 "
"of the built-in tutorial for more information on controlling FX."
msgstr ""

#: A.10-controlling-your-sound.md:157
msgid ""
"Copy the code into a spare buffer and take a listen. Don't stop there though "
"- play around with the code. Change the slide times, change the notes, the "
"synth, the FX and the sleep times and see if you can turn it into something "
"completely different!"
msgstr ""

#: A.10-controlling-your-sound.md:162
#, no-wrap
msgid ""
"live_loop :moon_rise do\n"
"  with_fx :echo, mix: 0, mix_slide: 8 do |fx|\n"
"    control fx, mix: 1\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n"
"    sn = synth :prophet , sustain: 8, note: :e1, cutoff: 70, cutoff_slide: 8\n"
"    control sn, cutoff: 130\n"
"    sleep 2\n"
"    32.times do\n"
"      control sn, note: notes.tick, pan: rrand(-1, 1)\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""

#: A.11-beat-tracking.md:1
msgid "A.11 Tick Tock"
msgstr ""

#: A.11-beat-tracking.md:3
msgid "Tracking the Beat"
msgstr ""

#: A.11-beat-tracking.md:5
msgid ""
"Last month in this series we took a deep technical dive into the "
"randomisation system underpinning Sonic Pi. We explored how we can use it to "
"deterministically add new levels of dynamic control over our code. This "
"month we're going to continue our technical dive and turn our attention to "
"Sonic Pi's unique tick system. By the end of this article you'll be ticking "
"your way through rhythms and riffs on your way to being a live coding DJ."
msgstr ""

#: A.11-beat-tracking.md:13
msgid "Beat Counting"
msgstr ""

#: A.11-beat-tracking.md:15
msgid ""
"When making music we often want to do a different thing depending on which "
"beat it is. Sonic Pi has a special beat counting system called `tick` to "
"give you precise control over when a beat actually occurs and even supports "
"multiple beats with their own tempos."
msgstr ""

#: A.11-beat-tracking.md:20
msgid ""
"Let's have a play - to advance the beat we just need to call `tick`. Open up "
"a fresh buffer, type in the following and hit Run:"
msgstr ""

#: A.11-beat-tracking.md:23
#, no-wrap
msgid "puts tick #=> 0"
msgstr ""

#: A.11-beat-tracking.md:27
msgid ""
"This will return the current beat: `0`. Notice that even if you press the "
"Run button a few times it will always return `0`. This is because each run "
"starts a fresh beat counting from 0. However, whilst the run is still "
"active, we can advance the beat as many times as we want:"
msgstr ""

#: A.11-beat-tracking.md:32
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts tick #=> 2"
msgstr ""

#: A.11-beat-tracking.md:38
msgid ""
"Whenever you see the symbol `#=>` at the end of a line of code it means that "
"that line will log the text on the right-hand-side. For example, `puts foo "
"#=> 0` means the code `puts foo` prints `0` to the log at that point in the "
"program."
msgstr ""

#: A.11-beat-tracking.md:43
msgid "Checking the Beat"
msgstr ""

#: A.11-beat-tracking.md:45
msgid ""
"We've seen that `tick` does two things. It increments (adds one) and returns "
"the current beat. Sometimes we just want to look at the current beat without "
"having to increment it which we can do via `look`:"
msgstr ""

#: A.11-beat-tracking.md:49
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts look #=> 1\n"
"puts look #=> 1"
msgstr ""

#: A.11-beat-tracking.md:56
msgid ""
"In this code we tick the beat up twice and then call `look` twice. We'll see "
"the following values in the log: `0`, `1`, `1`, `1`. The first two `tick`s "
"returned `0`, then `1` as expected, then the two `look`s just returned the "
"last beat value twice which was `1`."
msgstr ""

#: A.11-beat-tracking.md:64
msgid ""
"So now we can advance the beat with `tick` and check the beat with `look`. "
"What next? We need something to tick over. Sonic Pi uses rings for "
"representing riffs, melodies and rhythms and the tick system has been "
"specifically designed to work very closely with them. In fact, rings have "
"their own dot version of `tick` which does two things. Firstly, it acts like "
"a regular tick and increments the beat. Secondly it looks up the ring value "
"using the beat as the index. Let's take a look:"
msgstr ""

#: A.11-beat-tracking.md:72
#, no-wrap
msgid "puts (ring :a, :b, :c).tick #=> :a"
msgstr ""

#: A.11-beat-tracking.md:76
msgid ""
"`.tick` is a special dot version of `tick` which will return the first value "
"of the ring `:a`. We can grab each of the values in the ring by calling `."
"tick` multiple times:"
msgstr ""

#: A.11-beat-tracking.md:80
#, no-wrap
msgid ""
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts (ring :a, :b, :c).tick #=> :b\n"
"puts (ring :a, :b, :c).tick #=> :c\n"
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts look                   #=> 3"
msgstr ""

#: A.11-beat-tracking.md:88
msgid ""
"Take a look at the log and you'll see `:a`, `:b`, `:c` and then `:a` again. "
"Notice that `look` returns `3`. Calls to `.tick` act just like they are "
"regular calls to `tick` - they increment the local beat."
msgstr ""

#: A.11-beat-tracking.md:93
msgid "A Live Loop Arpeggiator"
msgstr ""

#: A.11-beat-tracking.md:95
msgid ""
"The real power comes when you mix `tick` with rings and `live_loop`s. When "
"combined we have all the tools we need to both build and understand a simple "
"arpegiator. We need just four things:"
msgstr ""

#: A.11-beat-tracking.md:99
msgid "A ring containing the notes we want to loop over."
msgstr ""

#: A.11-beat-tracking.md:100
msgid "A means of incrementing and obtaining the beat."
msgstr ""

#: A.11-beat-tracking.md:101
msgid "The ability to play a note based on the current beat."
msgstr ""

#: A.11-beat-tracking.md:102
msgid "A loop structure to keep the arpegiator repeating."
msgstr ""

#: A.11-beat-tracking.md:104
msgid "These concepts can all be found in the following code:"
msgstr ""

#: A.11-beat-tracking.md:106
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"live_loop :arp do\n"
"  use_synth :dpulse\n"
"  play notes.tick, release: 0.2\n"
"  sleep 0.125\n"
"end"
msgstr ""

#: A.11-beat-tracking.md:116
msgid ""
"Let's look at each of these lines. First we define our ring of notes which "
"we'll continually play. We then create a `live_loop` called `:arp` which "
"loops round for us. Each time round the `live_loop` we set our synth to `:"
"dpulse` and then play the next note in our ring using `.tick`. Remember that "
"this will increment our beat counter and use the latest beat value as an "
"index into our notes ring. Finally, we wait for an eighth of a beat before "
"looping round again."
msgstr ""

#: A.11-beat-tracking.md:124
msgid "Multiple Simultaneous Beats"
msgstr ""

#: A.11-beat-tracking.md:126
msgid ""
"A really important thing to know is that `tick`s are local to the "
"`live_loop`. This means that each `live_loop` has its own independent beat "
"counter. This is much more powerful than having a global metronome and beat. "
"Let's take a look at this in action:"
msgstr ""

#: A.11-beat-tracking.md:131
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"with_fx :reverb do\n"
"  live_loop :arp do\n"
"    use_synth :dpulse\n"
"    play notes.tick + 12, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play notes.tick - 12, release: 0.2\n"
"  sleep 0.75\n"
"end"
msgstr ""

#: A.11-beat-tracking.md:149
msgid "Clashing Beats"
msgstr ""

#: A.11-beat-tracking.md:151
msgid ""
"A big cause of confusion with Sonic Pi's tick system is when people want to "
"tick over multiple rings in the same `live_loop`:"
msgstr ""

#: A.11-beat-tracking.md:154
#, no-wrap
msgid ""
"use_bpm 300\n"
"use_synth :blade\n"
"live_loop :foo do\n"
"  play (ring :e1, :e2, :e3).tick\n"
"  play (scale :e3, :minor_pentatonic).tick\n"
"  sleep 1\n"
"end"
msgstr ""

#: A.11-beat-tracking.md:164
msgid ""
"Even though each `live_loop` has its own independent beat counter, we're "
"calling `.tick` twice within the same `live_loop`. This means that the beat "
"will be incremented twice every time round. This can produce some "
"interesting polyrhythms but is often not what you want. There are two "
"solutions to this problem. One option is to manually call `tick` at the "
"start of the `live_loop` and then use `.look` to look up the current beat in "
"each `live_loop`. The second solution is to pass a unique name to each call "
"to `.tick` such as `.tick(:foo)`. Sonic Pi will then create and track a "
"separate beat counter for each named tick you use. That way you can work "
"with as many beats as you need! See the section on named ticks in 9.4 of the "
"built-in tutorial for more information."
msgstr ""

#: A.11-beat-tracking.md:178
msgid ""
"Let's bring all this knowledge of `tick`s, `ring`s and `live_loop`s together "
"for a final fun example. As usual, don't treat this as a finished piece. "
"Start changing things and play around with it and see what you can turn it "
"into. See you next time..."
msgstr ""

#: A.11-beat-tracking.md:183
#, no-wrap
msgid ""
"use_bpm 240\n"
"notes = (scale :e3, :minor_pentatonic).shuffle\n"
"live_loop :foo do\n"
"  use_synth :blade\n"
"  with_fx :reverb, reps: 8, room: 1 do\n"
"    tick\n"
"    co = (line 70, 130, steps: 32).tick(:cutoff)\n"
"    play (octs :e3, 3).look, cutoff: co, amp: 2\n"
"    play notes.look, amp: 4\n"
"    sleep 1\n"
"  end\n"
"end\n"
"live_loop :bar do\n"
"  tick\n"
"  sample :bd_ada if (spread 1, 4).look\n"
"  use_synth :tb303\n"
"  co = (line 70, 130, steps: 16).look\n"
"  r = (line 0.1, 0.5, steps: 64).mirror.look\n"
"  play notes.look, release: r, cutoff: co\n"
"  sleep 0.5\n"
"end"
msgstr ""

#: A.12-sample-slicing.md:1
msgid "A.12 Sample Slicing"
msgstr ""

#: A.12-sample-slicing.md:3
msgid "Sample Slicing"
msgstr ""

#: A.12-sample-slicing.md:5
msgid ""
"Way back in episode 3 of this Sonic Pi series we looked at how to loop, "
"stretch and filter one of the most famous drum breaks of all time - the Amen "
"Break. In this tutorial we're going to take this one step further and learn "
"how to slice it up, shuffle the slices and glue it back together in a "
"completely new order. If that sounds a bit crazy to you, don't worry, it "
"will all become clear and you'll soon master a powerful new tool for your "
"live coded sets."
msgstr ""

#: A.12-sample-slicing.md:13
msgid "Sound as Data"
msgstr ""

#: A.12-sample-slicing.md:15
msgid ""
"Before we get started let's just take a brief moment to understand how to "
"work with samples. By now, you've all hopefully played with Sonic Pi's "
"powerful sampler. If not, there's no time like the present! Boot up your "
"Raspberry Pi, launch Sonic Pi from the Programming menu, type the following "
"into a fresh buffer and then hit the Run button to hear a pre-recorded drum "
"beat:"
msgstr ""

#: A.12-sample-slicing.md:26
msgid ""
"A recording of a sound is simply represented as data - lots of numbers "
"between -1 and 1 which represent the peaks and troughs of the sound wave. If "
"we play those numbers back in order, we get the original sound. However, "
"what's to stop us from playing them back in a different order and creating a "
"new sound?"
msgstr ""

#: A.12-sample-slicing.md:32
msgid ""
"How are samples actually recorded? It's actually pretty simple once you "
"understand the basic physics of sound. When you make a sound - for example "
"by hitting a drum, the noise travels through the air in a similar fashion to "
"how the surface of a lake ripples when you throw a pebble into it. When "
"those ripples reach your ears, your eardrum moves sympathetically and "
"converts those movements into the sound you hear. If we wish to record and "
"play back the sound, we therefore need a way of capturing, storing and "
"reproducing those ripples. One way is to use a microphone which acts like an "
"eardrum and moves back and forth as the sound ripples hit it. The microphone "
"then converts its position into a tiny electric signal which is then "
"measured many times a second. These measurements are then represented as a "
"series of numbers between -1 and 1."
msgstr ""

#: A.12-sample-slicing.md:46
msgid ""
"If we were to plot a visualisation of the sound it would be a simple graph "
"of data with time on the x axis and microphone/speaker position as a value "
"between -1 and 1 on the y axis. You can see an example of such a graph at "
"the top of the diagram."
msgstr ""

#: A.12-sample-slicing.md:51
msgid "Playing Part of a Sample"
msgstr ""

#: A.12-sample-slicing.md:53
msgid ""
"So, how do we code Sonic Pi to play a sample back in a different order? To "
"answer this question we need to take a look at the `start:` and `finish:` "
"opts for `sample`. These let us control the start and finish positions of "
"our playback of the numbers which represent the sound. The values for both "
"of these opts are represented as a number between `0` and `1` where `0` "
"represents the start of the sample and `1` is the end. So, to play the first "
"half of the Amen Break, we just need to specify a `finish:` of `0.5`:"
msgstr ""

#: A.12-sample-slicing.md:66
msgid ""
"We can add in a `start:` value to play an even smaller section of the sample:"
msgstr ""

#: A.12-sample-slicing.md:68
#, no-wrap
msgid "sample :loop_amen, start: 0.25, finish: 0.5"
msgstr ""

#: A.12-sample-slicing.md:72
msgid ""
"For fun, you can even have the `finish:` opt's value be *before* `start:` "
"and it will play the section backwards:"
msgstr ""

#: A.12-sample-slicing.md:75
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.25"
msgstr ""

#: A.12-sample-slicing.md:79
msgid "Re-ordering Sample Playback"
msgstr ""

#: A.12-sample-slicing.md:81
msgid ""
"Now that we know that a sample is simply a list of numbers that can be "
"played back in any order and also how to play a specific part of a sample we "
"can now start having fun playing a sample back in the 'wrong' order."
msgstr ""

#: A.12-sample-slicing.md:86
msgid ""
"![Amen Slices](../images/tutorial/articles/A.12-sample-slicing/amen_slice."
"png)"
msgstr ""

#: A.12-sample-slicing.md:88
msgid ""
"Let's take our Amen Break and chop it up into 8 equally-sized slices and "
"then shuffle the pieces around. Take a look at the diagram: at the top A) "
"represents the graph of our original sample data. Chopping it into 8 slices "
"gives us B) - notice that we've given each slice a different colour to help "
"distinguish them. You can see each slice's start and finish values at the "
"top. Finally C) is one possible re-ordering of the slices. We can then play "
"this back to create a new beat. Take a look at the code to do this:"
msgstr ""

#: A.12-sample-slicing.md:97
#, no-wrap
msgid ""
"live_loop :beat_slicer do\n"
"  slice_idx = rand_i(8)\n"
"  slice_size = 0.125\n"
"  s = slice_idx * slice_size\n"
"  f = s + slice_size\n"
"  sample :loop_amen, start: s, finish: f\n"
"  sleep sample_duration :loop_amen, start: s, finish: f\n"
"end"
msgstr ""

#: A.12-sample-slicing.md:108
msgid ""
"we choose a random slice to play which should be a random number between 0 "
"and 7 (remember that we start counting at 0). Sonic Pi has a handy function "
"for exactly this: `rand_i(8)`. We then store this random slice index in the "
"variable `slice_idx`."
msgstr ""

#: A.12-sample-slicing.md:113
msgid ""
"We define our `slice_size` which is 1/8 or 0.125. The `slice_size` is "
"necessary for us to convert our `slice_idx` into a value between 0 and 1 so "
"we can use it as our `start:` opt."
msgstr ""

#: A.12-sample-slicing.md:117
msgid ""
"We calculate the start position `s` by multiplying the `slice_idx` by the "
"`slice_size`."
msgstr ""

#: A.12-sample-slicing.md:120
msgid ""
"We calculate the finish position `f` by adding the `slice_size` to the start "
"position `s`."
msgstr ""

#: A.12-sample-slicing.md:123
msgid ""
"We can now play the sample slice by plugging in the `s` and `f` values into "
"the `start:` and `finish:` opts for `sample`."
msgstr ""

#: A.12-sample-slicing.md:126
msgid ""
"Before we play the next slice we need to know how long to `sleep` which "
"should be the duration of the sample slice. Luckily, Sonic Pi has us covered "
"with `sample_duration` which accepts all the same opts as `sample` and "
"simply returns the duration. Therefore, by passing `sample_duration` our "
"`start:` and `finish:` opts, we can find out the duration of a single slice."
msgstr ""

#: A.12-sample-slicing.md:133
msgid ""
"We wrap all of this code in a `live_loop` so that we continue to pick new "
"random slices to play."
msgstr ""

#: A.12-sample-slicing.md:139
msgid ""
"Let's combine everything we've seen so far into a final example which "
"demonstrates how we can take a similar approach to combine randomly sliced "
"beats with some bass to create the start of an interesting track. Now it's "
"your turn - take the code below as a starting point and see if you can take "
"it in your own direction and create something new..."
msgstr ""

#: A.12-sample-slicing.md:145
#, no-wrap
msgid ""
"live_loop :sliced_amen do\n"
"  n = 8\n"
"  s =  line(0, 1, steps: n).choose\n"
"  f = s + (1.0 / n)\n"
"  sample :loop_amen, beat_stretch: 2, start: s, finish: f\n"
"  sleep 2.0  / n\n"
"end\n"
"live_loop :acid_bass do\n"
"  with_fx :reverb, room: 1, reps: 32, amp: 0.6 do\n"
"    tick\n"
"    n = (octs :e0, 3).look - (knit 0, 3 * 8, -4, 3 * 8).look\n"
"    co = rrand(70, 110)\n"
"    synth :beep, note: n + 36, release: 0.1, wave: 0, cutoff: co\n"
"    synth :tb303, note: n, release: 0.2, wave: 0, cutoff: co\n"
"    sleep (ring 0.125, 0.25).look\n"
"  end\n"
"end"
msgstr ""
