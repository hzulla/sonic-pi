# This file is distributed under the same license as the Sonic Pi package.
# Do not edit this file, use Weblate instead.
# Read TRANSLATION.md for more information.

msgid ""
msgstr ""
"Project-Id-Version: Sonic Pi\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: 01-Welcome-to-Sonic-Pi.md:1
#, fuzzy
msgid "1 Welcome to Sonic Pi"
msgstr "1 Sonic Pi へようこそ"

#: 01-Welcome-to-Sonic-Pi.md:3
#, fuzzy
msgid "Welcome friend :-)"
msgstr "Welcome friend:-)"

#: 01-Welcome-to-Sonic-Pi.md:5
#, fuzzy
msgid ""
"Welcome to Sonic Pi. Hopefully you're as excited to get started making crazy s"
"ounds as I am to show you. It's going to be a really *fun* ride where you'll l"
"earn all about music, synthesis, programming, composition, performance and mor"
"e."
msgstr ""
"Sonic Pi（ソニックパイ）へようこそ。これから説明するクレイジーな音造りに、あなたも夢中になることを願っています。音楽、シンセ、プログラミング、作曲、"
"演奏など、これから学ぶことは、本当に刺激的なものになるでしょう。"

#: 01-Welcome-to-Sonic-Pi.md:10
#, fuzzy
msgid ""
"But wait, how rude of me! Let me introduce myself - I'm [Sam Aaron](http://twi"
"tter.com/samaaron) - the chap that created Sonic Pi. You can find me at [@sama"
"aron](http://twitter.com/samaaron) on Twitter and I'd be more than happy to sa"
"y hello to you. You might also be interested in finding out more about my [Liv"
"e Coding Performances](http://facebook.com/livecodersamaaron) where I code wit"
"h Sonic Pi live in front of audiences."
msgstr ""
"でも、ちょっと待ってください。まずは自己紹介が必要でしたね。失礼いたしました！私は、Sonic Piを作成した[Sam Aaron](http://twit"
"ter.com/samaaron)といいます。 Twitter上の[@samaaron](http://twitter.com/samaaron)で見つける"
"ことができますので、連絡くれるとうれしいです。もしかすると、 僕が観客の前で演奏しているライブコーディングのバンド[Meta-eX](http://meta"
"-ex.com)にも興味を持ってもらえるかもしれません。[Meta-eX](http://meta-ex.com)の演奏の中で使っているトラックの一つを、S"
"onic Piの例の中で見つけることができます。"

#: 01-Welcome-to-Sonic-Pi.md:18
#, fuzzy
msgid ""
"If you have any thoughts, or ideas for improving Sonic Pi - please pass them o"
"n - feedback is so helpful. You never know, your idea might be the next big fe"
"ature!"
msgstr ""
"Sonic Piを改善するために、気づいたことや、アイデアでを持っていたら、是非、知らせてください。 フィードバックはとても役立ちます。あなたのアイデアが次"
"の重要な機能になるかもしれません！"

#: 01-Welcome-to-Sonic-Pi.md:22
#, fuzzy
msgid ""
"This tutorial is divided up into sections grouped by category. Whilst I've wri"
"tten it to have an easy learning progression from start to finish, feel very f"
"ree just to dip in and out of sections as you see fit. If you feel that there'"
"s something missing, do let me know and I'll consider it for a future version."
msgstr ""
"最後に、このチュートリアル（使いかた）は、カテゴリ別にグループ化されたセクションに分かれています。 始まりから終わりまで、簡単に学べるように手引きを書いたの"
"で、自由に、色々なセクションを覗いてみてください。 何か、不足している点に気がついたら、将来のバージョンのために検討したいので、知らせてください。"

#: 01-Welcome-to-Sonic-Pi.md:28
msgid ""
"Finally, watching others live code is a really great way to learn. I regularly"
" stream live on [livecoding.tv/samaaron](http://livecoding.tv/samaaron) so ple"
"ase do drop by, say hi and ask me lots of questions :-)"
msgstr ""

#: 01-Welcome-to-Sonic-Pi.md:33
#, fuzzy
msgid "OK, let's get started..."
msgstr "では、早速はじめましょう！"

#: 01.1-Live-Coding.md:1
#, fuzzy
msgid "1.1 Live Coding"
msgstr "1.1 ライブコーディング"

#: 01.1-Live-Coding.md:3 09-Live-Coding.md:3 09.1-Live-Coding-Fundamentals.md:3
#: A.02-live-coding.md:3
#, fuzzy
msgid "Live Coding"
msgstr "ライブコーディング"

#: 01.1-Live-Coding.md:5
#, fuzzy
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write a"
"nd *modify code live* to make music, just like you might perform live with a g"
"uitar. This means that given some practice you can take Sonic Pi on stage and "
"gig with it."
msgstr ""
"Sonic Piの最もエキサイティングな側面のひとつは、まるでギターをライブで演奏するかのように、 ライブでコードを書いて音楽を作ることができることです。つ"
"まり、ステージやコンサートでSonic Piが 使えるということです！"

#: 01.1-Live-Coding.md:10
#, fuzzy
msgid "Free your mind"
msgstr "心を解き放て"

#: 01.1-Live-Coding.md:12
#, fuzzy
msgid ""
"Before we get into the real details of how Sonic Pi works in the rest of this "
"tutorial, I'd like to give you an experience of what it's like to live code. D"
"on't worry if you don't understand much (or any) of this. Just try to hold ont"
"o your seats and enjoy..."
msgstr ""
"これからチュートリアルで、実際のSonic Piの詳しい使い方に入る前に、まず、 ライブコーディングがどんなものか体験してみましょう。あまり（もしくは全然）"
"わからなくても、 心配ご無用！そのまま席についたまま、楽しんでいきましょう。"

#: 01.1-Live-Coding.md:17
#, fuzzy
msgid "A live loop"
msgstr "ライブループ"

#: 01.1-Live-Coding.md:19
#, fuzzy
msgid "Let's get started, copy the following code into an empty buffer above:"
msgstr "さぁ、はじめましょう！下のコードを上の空欄のWorkspace（ワークスペース）にコピーしてみましょう。"

#: 01.1-Live-Coding.md:21
#, no-wrap
#, fuzzy
msgid ""
"live_loop :flibble do\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :flibble do\n"
" sample :bd_haus, rate: 1\n"
" sleep 0.5\n"
"end"

#: 01.1-Live-Coding.md:28
#, fuzzy
msgid ""
"Now, press the `Run` button and you'll hear a nice fast bass drum beating away"
". If at any time you wish to stop the sound just hit the `Stop` button. Althou"
"gh don't hit it just yet... Instead, follow these steps:"
msgstr ""
"左上の`Run`（再生）ボタンを押すと、いい感じの速さでバスドラムの音が聞こえてきます。 `Stop`（停止）ボタンを押せば、いつでも音を止めることができま"
"す。ですが、 まだ`Stop`（停止）ボタンを押さずに、次のステップを実行しましょう。"

#: 01.1-Live-Coding.md:32
#, fuzzy
msgid "Make sure the bass drum sound is still running"
msgstr "-バスドラムがまだ鳴っていることを確認します。"

#: 01.1-Live-Coding.md:33
#, fuzzy
msgid "Change the `sleep` value from `0.5` to something higher like `1`."
msgstr "-`sleep`の値を、`0.5`から、`1`より大きい値に書き換えてみましょう。"

#: 01.1-Live-Coding.md:34
#, fuzzy
msgid "Press the `Run` button again"
msgstr "-`Run`（再生）ボタンをもう一度押します。"

#: 01.1-Live-Coding.md:35
#, fuzzy
msgid "Notice how the drum speed has changed."
msgstr "-ドラムの早さがどのように変わったかを確認してみましょう。"

#: 01.1-Live-Coding.md:36
#, fuzzy
msgid ""
"Finally, *remember this moment*, this is the first time you've live coded with"
" Sonic Pi and it's unlikely to be your last..."
msgstr ""
"-この瞬間を忘れないでください。これが、あなたが初めてSonic Piでライブコーディングをした瞬間です。*この瞬間を忘れないでください。*そしてこれが最後"
"にはならないはず・・・"

#: 01.1-Live-Coding.md:39
#, fuzzy
msgid ""
"Ok, that was simple enough. Let's add something else into the mix. Above `samp"
"le :bd_haus` add the line `sample :ambi_choir, rate: 0.3`. Your code should lo"
"ok like this:"
msgstr ""
"これは簡単でした。では他の要素を加えてみましょう。`sample :bd_haus`の上に、 `sample :ambi_choir, rate: 0.3`"
" を追加してみます。コードはこのようになるはずです。"

#: 01.1-Live-Coding.md:43
#, no-wrap
#, fuzzy
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :flibble do\n"
" sample :ambi_choir, rate: 0.3\n"
" sample :bd_haus, rate: 1\n"
" sleep 1\n"
"end"

#: 01.1-Live-Coding.md:51
#, fuzzy
msgid ""
"Now, play around. Change the rates - what happens when you use high values, or"
" small values or negative values? See what happens when you change the `rate:`"
" value for the `:ambi_choir` sample just slightly (say to 0.29). What happens "
"if you choose a really small `sleep` value? See if you can make it go so fast "
"your computer will stop with an error because it can't keep up (if that happen"
"s, just choose a bigger `sleep` time and hit `Run` again)."
msgstr ""
"では、ちょっと遊んでみましょう。値を変えてみてください。大きな値、小さな値、もしくはマイナスの値にしたとき、 何が起こるでしょうか？では、`:ambi_ch"
"oir` の `rate:` の値をほんの少し（0.29などに）変えた時、どうなるでしょう？ `sleep` の値をすごく小さくすると、どうでしょう？操作が"
"速すぎると、エラーが出て コンピュータが止まってしまいます。これはコンピュータがついていけないからです。 （そんな時は、より大きい値を `sleep` に設"
"定して`Run`ボタンをもう一度押しましょう。）"

#: 01.1-Live-Coding.md:59
#, fuzzy
msgid "Try commenting one of the `sample` lines out by adding a `#` to the beginning:"
msgstr "では、`sample` の行に `#` をつけることで、 「コメント」してみてください。"

#: 01.1-Live-Coding.md:62
#, no-wrap
#, fuzzy
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"#  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :flibble do\n"
" sample :ambi_choir, rate: 0.3\n"
"#  sample :bd_haus, rate: 1\n"
" sleep 1\n"
"end"

#: 01.1-Live-Coding.md:70
#, fuzzy
msgid ""
"Notice how it tells the computer to ignore it, so we don't hear it. This is ca"
"lled a comment. In Sonic Pi we can use comments to remove and add things into "
"the mix."
msgstr ""
"コンピュータに#をつけた行を無視するよう命令したので、聞こえませんね。これはコメントと呼ばれます。 Sonic Piでは、要素を削除したり追加したりするのに"
"コメントを使います。 最後に、楽しむための技をお伝えしましょう。以下のコードを、上の空欄のWorkspace(ワークスペース)にコピーします。 そして、2つ"
"は同時にループ（繰り返し）します。まずは精一杯、体験して楽しみましょう！"

#: 01.1-Live-Coding.md:74
#, fuzzy
msgid ""
"Finally, let me leave you something fun to play with. Take the code below, and"
" copy it into a spare buffer. Now, don't try to understand it too much other t"
"han see that there are two loops - so two things going round at the same time."
" Now, do what you do best - experiment and play around. Here are some suggesti"
"ons:"
msgstr "いくつかを試してみましょう。"

#: 01.1-Live-Coding.md:80
#, fuzzy
msgid "Try changing the blue `rate:` values to hear the sample sound change."
msgstr "`rate:`の青い値を変更し、`sample`の音が変わることを聞いてみましょう。"

#: 01.1-Live-Coding.md:81
#, fuzzy
msgid ""
"Try changing the `sleep` times and hear that both loops can spin round at diff"
"erent rates."
msgstr "`sleep`の時間を変更し、それぞれのループを異なる速度で繰り返すのを聞いてみましょう。"

#: 01.1-Live-Coding.md:83
#, fuzzy
msgid ""
"Try uncommenting the sample line (remove the `#`) and enjoy the sound of the g"
"uitar played backwards."
msgstr "`sample`の行のコメントを解除して（ `#`を削除）、ギターの逆再生を楽しみましょう。"

#: 01.1-Live-Coding.md:85
#, fuzzy
msgid ""
"Try changing any of the blue `mix:` values to numbers between `0` (not in the "
"mix) and `1` (fully in the mix)."
msgstr "いくつかの`mix:` の値を`0` (最小値) から `1` (最大値)の間で変えてみましょう。"

#: 01.1-Live-Coding.md:88
#, fuzzy
msgid ""
"Remember to press `Run` and you'll hear the change next time the loop goes rou"
"nd. If you end up in a pickle, don't worry - hit `Stop`, delete the code in th"
"e buffer and paste a fresh copy in and you're ready to jam again. Making mista"
"kes is how you'll learn the quickest..."
msgstr ""
"`Run` ボタンを押し、次に繰り返しがどう変化したかに耳を傾けることを忘れないでください。 うまくいかなくても気にしないでください。`Stop`ボタンを押"
"して、Workspace内のコードを削除して、 新しいコードをコピーアンドペーストして、再び演奏の準備をすれば良いです。 失敗することがどんなことよりも学習"
"の近道になるのですから。"

#: 01.1-Live-Coding.md:94
#, no-wrap
#, fuzzy
msgid ""
"live_loop :guit do\n"
"  with_fx :echo, mix: 0.3, phase: 0.25 do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"#  sample :guit_em9, rate: -0.5\n"
"  sleep 8\n"
"end\n"
"live_loop :boom do\n"
"  with_fx :reverb, room: 1 do\n"
"    sample :bd_boom, amp: 10, rate: 1\n"
"  end\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :guit do\n"
" with_fx :echo, mix: 0.3, phase: 0.25 do\n"
"   sample :guit_em9, rate: 0.5\n"
" end\n"
"#  sample :guit_em9, rate: -0.5\n"
" sleep 8\n"
"end\n"
"live_loop :boom do\n"
" with_fx :reverb, room: 1 do\n"
"   sample :bd_boom, amp: 10, rate: 1\n"
" end\n"
" sleep 8\n"
"end"

#: 01.1-Live-Coding.md:111
#, fuzzy
msgid ""
"Now, keep playing and experimenting until your curiosity about how this all ac"
"tually works kicks in and you start wondering what else you can do with this. "
"You're now ready to read the rest of the tutorial."
msgstr ""
"さあ、これらが実際にどう動くか好奇心が動き出すまで、 そしてあなたが次に何をしたらいいかを知りたくなるまで、演奏と実験を続けましょう。 さあ、残りのチュート"
"リアルを読む準備ができました。"

#: 01.1-Live-Coding.md:115
#, fuzzy
msgid "So what are you waiting for..."
msgstr "次にあなたを待っているものは・・・"

#: 01.2-Exploring-the-Interface.md:1
#, fuzzy
msgid "1.2 Exploring the Interface"
msgstr "1.2 インターフェースの探索"

#: 01.2-Exploring-the-Interface.md:3
#, fuzzy
msgid "The Sonic Pi Interface"
msgstr "Sonic Pi のインターフェース"

#: 01.2-Exploring-the-Interface.md:5
#, fuzzy
msgid ""
"Sonic Pi has a very simple interface for coding music. Let's spend a little ti"
"me exploring it."
msgstr "Sonic Piは、音楽をコーディング(記述)するための とてもシンプルなインターフェース(操作画面)を持っています。 ちょっと見てみましょう。"

#: 01.2-Exploring-the-Interface.md:8
msgid "![Sonic Pi Interface](../images/tutorial/GUI.png)"
msgstr ""

#: 01.2-Exploring-the-Interface.md:11
#, fuzzy
msgid "*A* - Play Controls"
msgstr "*A* - 演奏の操作"

#: 01.2-Exploring-the-Interface.md:12
#, fuzzy
msgid "*B* - Editor Controls"
msgstr "*B* - 編集の操作"

#: 01.2-Exploring-the-Interface.md:13
#, fuzzy
msgid "*C* - Info and Help"
msgstr "*C* - 情報とヘルプ"

#: 01.2-Exploring-the-Interface.md:14
#, fuzzy
msgid "*D* - Code Editor"
msgstr "*D* - コードエディタ"

#: 01.2-Exploring-the-Interface.md:15
#, fuzzy
msgid "*E* - Prefs Panel"
msgstr "*E* - ログ画面"

#: 01.2-Exploring-the-Interface.md:16
#, fuzzy
msgid "*F* - Log Viewer"
msgstr "*F* - ヘルプシステム"

#: 01.2-Exploring-the-Interface.md:17
msgid "*G* - Help System"
msgstr ""

#: 01.2-Exploring-the-Interface.md:20
#, fuzzy
msgid "A. Play Controls"
msgstr "A. 演奏の操作"

#: 01.2-Exploring-the-Interface.md:22
#, fuzzy
msgid ""
"These pink buttons are the main controls for starting and stopping sounds. The"
"re's the *Run* button for running the code in the editor, *Stop* for stopping "
"all running code, *Save* for saving the code to an external file and *Record* "
"to create a recording (a WAV file) of the sound playing."
msgstr ""
"ここにあるグリーンのボタンで、音を再生したり停止するための主要な操作ができます。 *Run*ボタンは編集画面内のコードを実行します。*Stop*ボタンですべ"
"てのコードの動作を停止します。 *Save*ボタンは外部ファイルにコードを保存し、*Record*ボタンは演奏中の音を (WAV ファイルに)録音します。"

#: 01.2-Exploring-the-Interface.md:28
#, fuzzy
msgid "B. Editor Controls"
msgstr "B. 編集の操作"

#: 01.2-Exploring-the-Interface.md:30
#, fuzzy
msgid ""
"These orange buttons allow you to manipulate the code editor. The *Size +* and"
" *Size -* buttons allow you to make the text bigger and smaller. The *Align* b"
"utton will neaten the code for you to make it look more professional."
msgstr ""
"これらのオレンジ色のボタンで編集画面を操作します。 *Size +*と*Size -*ボタンは文字サイズを大きくしたり小さくします。 *Align* ボタン"
"はより専門的で見やすいコードに整えてくれます。"

#: 01.2-Exploring-the-Interface.md:35
#, fuzzy
msgid "C. Info and Help"
msgstr "C. 情報とヘルプ"

#: 01.2-Exploring-the-Interface.md:37
#, fuzzy
msgid ""
"These blue buttons give you access to information, help and preferences. The *"
"Info* button will open up the information window which contains information ab"
"out Sonic Pi itself - the core team, history, contributors and community. The "
"*Help* button toggles the help system (*G*) and the *Prefs* button toggles the"
" preferences window which allows you to control some basic system parameters."
msgstr ""
"これらの青いボタンで、情報、ヘルプや設定にアクセスします。*Info* ボタンは、 概要、コア、協力者、コミュニティ、ライセンス、ヒストリーといったSoni"
"c Pi自体についての情報を画面に表示します。 *Help*ボタンは*F*のヘルプシステム表示を切り替えます。 また*Prefs*ボタンは基本的なシステムを"
"操作するための設定画面の表示を切り替えます。"

#: 01.2-Exploring-the-Interface.md:44
#, fuzzy
msgid "D. Code Editor"
msgstr "D. コードエディタ"

#: 01.2-Exploring-the-Interface.md:46
#, fuzzy
msgid ""
"This is the area where you'll write your code and compose/perform music. It's "
"a simple text editor where you can write code, delete it, cut and paste, etc. "
"Think of it like a very basic version of Word or Google Docs. The editor will "
"automatically colour words based on their meaning in the code. This may seem s"
"trange at first, but you'll soon find it very useful. For example, you'll know"
" something is a number because it is blue."
msgstr ""
"ここでは音楽を作曲/演奏したりするためのコードを書く領域です。コードを書いたり、消したり、 切り取り、貼り付けなどを行うためのシンプルな編集画面です。Goo"
"gle Docsやワードの基礎版だと思ってください。 編集画面ではコードの意味合いに応じて自動で色つけします。はじめは変わっていると思うかもしれませんが、 "
"とても使いやすくなるはずです。例えば、数値は青色で示されます。"

#: 01.2-Exploring-the-Interface.md:54
#, fuzzy
msgid "E. Prefs Panel"
msgstr "E. ログ画面"

#: 01.2-Exploring-the-Interface.md:56
#, fuzzy
msgid ""
"Sonic Pi supports a number of tweakable preferences which can be accessed by t"
"oggling the *prefs* button in the Info and Help button set. This will toggle t"
"he visibility of the Prefs Panel which includes a number of options to be chan"
"ged. Examples are forcing mono mode, inverting stereo, Toggling log output ver"
"bosity and also a volume slider and audio selector on the Raspberry Pi."
msgstr ""
"コードを走らせた時、ログ画面にはプログラムがどうなっているかについての情報が表示されます。 既定では、正確な再生時間を毎音ごとにメッセージとして見ることがで"
"きます。 コードのデバッグ（欠陥を取り除く作業）に利用でき、コードが何をしているかを理解することにも役立ちます。"

#: 01.2-Exploring-the-Interface.md:63
#, fuzzy
msgid "F. Log Viewer"
msgstr "F. ヘルプシステム"

#: 01.2-Exploring-the-Interface.md:65
#, fuzzy
msgid ""
"When you run your code, information about what the program is doing will be di"
"splayed in the log viewer. By default, you'll see a message for every sound yo"
"u create with the exact time the sound was triggered. This is very useful for "
"debugging your code and understanding what your code is doing."
msgstr ""
"最後は、SonicPiインターフェースのもっとも重要な部分の一つである、画面の下にあるヘルプシステムです。 青い*Help*ボタンによって表示/非表示を切り"
"替えることができます。 ヘルプシステムは、ヘルプと情報を含んでいます。このチュートリアル、入手できるシンセのリスト、 サンプルや実例、効果のリスト、そして音"
"楽をコーディングするために備えているSonic Piの 全機能のリストといった、Sonic Piの全てについてのヘルプと情報があります。"

#: 01.2-Exploring-the-Interface.md:71
msgid "G. Help System"
msgstr ""

#: 01.2-Exploring-the-Interface.md:73
msgid ""
"Finally, one of the most important parts of the Sonic Pi interface is the help"
" system which appears at the bottom of the window. This can be toggled on and "
"off by clicking on the blue *Help* button. The help system contains help and i"
"nformation about all aspects of Sonic Pi including this tutorial, a list of av"
"ailable synths, samples, examples, FX and a full list of all the functions Son"
"ic Pi provides for coding music."
msgstr ""

#: 01.3-Learning-through-Play.md:1
#, fuzzy
msgid "1.3 Learning through Play"
msgstr "1.3 遊びを通した学び"

#: 01.3-Learning-through-Play.md:3
#, fuzzy
msgid "Learning through Play"
msgstr "遊びを通した学び"

#: 01.3-Learning-through-Play.md:5
#, fuzzy
msgid ""
"Sonic Pi encourages you to learn about both computing and music through play a"
"nd experimentation. The most important thing is that you're having fun, and be"
"fore you know it you'll have accidentally learned how to code, compose and per"
"form."
msgstr ""
"SonicPiは、遊びと実験を通して、コンピューティングと音楽の両方を学ぶ手助けをしてくれます。 もっとも大切なことは、楽しむこと。そうすれば、コードや作曲"
"、演奏を、学ぶ前に自然と身につけられるでしょう。"

#: 01.3-Learning-through-Play.md:10
#, fuzzy
msgid "There are no mistakes"
msgstr "間違いはない"

#: 01.3-Learning-through-Play.md:12
#, fuzzy
msgid ""
"Whilst we're on this subject, let me just give you one piece of advice I've le"
"arned over my years of live coding with music - *there are no mistakes, only o"
"pportunities*. This is something I've often heard in relation to jazz but it w"
"orks equally well with live coding. No matter how experienced you are - from a"
" complete beginner to a seasoned Algoraver, you'll run some code that has a co"
"mpletely unexpected outcome. It might sound insanely cool - in which case run "
"with it. However, it might sound totally jarring and out of place. It doesn't "
"matter that it happened - what matters is what you do next with it. Take the s"
"ound, manipulate it and morph it into something awesome. The crowd will go *wi"
"ld*."
msgstr ""
"この章の間に、何年も音楽とライブコーディングを学んできた私から、 ちょっとアドバイスを。「間違いはない、あるのはただ可能性だけ。」これは、しばしばジャズにつ"
"いて言われることですが、ライブコーディングにも同様に言えることです。 経験に関係なく、あなたが全くの初心者でも、熟練のコーディング使いでも、作り出すコードが"
" まったく予期せぬ結果になることがあります。めちゃくちゃクールに聞こえる場合は、そのコードを実行すればいいのですが、しかし、すごく耳障りで場違いに聞こえる場"
"合もあります。 ですが、そうなっても問題ではありません。重要なのは、あなたが次にすべきことです。 音を取り除き、それを操作し、素晴らしいものに変化させるので"
"す。観衆は*熱狂*するでしょう。"

#: 01.3-Learning-through-Play.md:24
#, fuzzy
msgid "Start Simple"
msgstr "シンプルにはじめよう"

#: 01.3-Learning-through-Play.md:26
#, fuzzy
msgid ""
"When you're learning, it's tempting to want to do amazing things *now*. Howeve"
"r, just hold that thought and see it as a distant goal to reach *later*. For n"
"ow, instead think of the *simplest* thing you could write which would be fun a"
"nd rewarding that's a small step towards the amazing thing you have in your he"
"ad. Once you have an idea about that simple step, then try and build it, play "
"with it and then see what new ideas it gives you. Before long you'll be too bu"
"sy having fun and making real progress."
msgstr ""
"学習していると、*今すぐ*すごいことをしたい気持ちに駆られます。しかし、今はその気持ちをこらえ、 それは*後に*到達する遠い目標として持ってください。今のと"
"ころは、あなたの頭の中にあるすごいことに向かう *価値ある小さな一歩*として、楽しくやりがいをもって書くという「最も単純な事」を考えていきましょう。 一度、"
"その誠実に学ぶイメージを持って、試し、それを構築し、そして再生していけば、斬新なアイデアを与えてくれるでしょう。 すぐに、あなたは、楽しみながら、確実に上達"
"をすることに大忙しになっているでしょう。"

#: 01.3-Learning-through-Play.md:35
#, fuzzy
msgid "Just make sure to share your work with others!"
msgstr "でも、みんなと作品をシェア（共有）することは忘れないでください！"

#: 02-Synths.md:1
#, fuzzy
msgid "2 Synths"
msgstr "2 シンセ"

#: 02-Synths.md:3 02.3-Switching-Synths.md:11
#, fuzzy
msgid "Synths"
msgstr "シンセ"

#: 02-Synths.md:5
#, fuzzy
msgid "OK, enough of the intros - let's get into some sound."
msgstr "Sonic Piの紹介はこれくらいにして、さっそく音を試してみましょう！"

#: 02-Synths.md:7
#, fuzzy
msgid ""
"In this section we'll cover the basics of triggering and manipulating synths. "
"Synth is short for synthesiser which is a fancy word for something which creat"
"es sounds. Typically synths are quite complicated to use - especially analog s"
"ynths with many patch wires and modules. However, Sonic Pi gives you much of t"
"hat power in a very simple and approachable manner."
msgstr ""
"この章では、基本的なシンセ（synth）の出し方と操作方法を紹介します。シンセは、 音を作り出すシンセサイザーという響きのよい言葉を短縮したものです。典型的"
"なシンセは、 非常に使うのが複雑です。特にアナログのシンセは、沢山のパッチワイヤーとモジュールがついています。 ですが、Sonic Piでは、とても簡単で親"
"しみやすい方法で、このシンセの力を手に入れることが出来ます。"

#: 02-Synths.md:14
#, fuzzy
msgid ""
"Don't be fooled by the immediate simplicity of Sonic Pi's interface. You can g"
"et very deep into very sophisticated sound manipulation if that's your thing. "
"Hold on to your hats..."
msgstr "Sonic Piの分かりやすくシンプルな操作画面に騙されないでください。 もし使いこなせたら、洗練されたサウンド操作を可能にします。きっと驚くはずです。"

#: 02.1-Your-First-Beeps.md:1
#, fuzzy
msgid "2.1 Your First Beeps"
msgstr "2.1 初めての音"

#: 02.1-Your-First-Beeps.md:3
#, fuzzy
msgid "Your First Beeps"
msgstr "初めての音"

#: 02.1-Your-First-Beeps.md:5
#, fuzzy
msgid "Take a look at the following code:"
msgstr "下記のコードをみてください:"

#: 02.1-Your-First-Beeps.md:7 02.4-Durations-with-Envelopes.md:49
#, no-wrap
msgid "play 70"
msgstr "play 70"

#: 02.1-Your-First-Beeps.md:11
#, fuzzy
msgid ""
"This is where it all starts. Go ahead, copy and paste it into the code window "
"at the top of the app (the big white space under the Run button). Now, press R"
"un..."
msgstr ""
"ここからすべてが始まります。アプリの上部のコードウィンドウ（実行ボタンの下に大きな空白）にコピーして貼り付けます。そして、左上のRunボタンを押してみましょ"
"う。"

#: 02.1-Your-First-Beeps.md:15
#, fuzzy
msgid "Beep!"
msgstr "ビープ音がなった!"

#: 02.1-Your-First-Beeps.md:17
#, fuzzy
msgid "Intense. Press it again. And again. *And again...*"
msgstr "ビックリした？もう一回、押してみましょう。*そしてもう一回..。*"

#: 02.1-Your-First-Beeps.md:19
#, fuzzy
msgid ""
"Woah, crazy, I'm sure you could keep doing that all day. But wait, before you "
"lose yourself in an infinite stream of beeps, try changing the number:"
msgstr "わお！すごい！一日中楽しんで入られそうだけど、でも待って。 ビープ音の無限の流れに夢中になる前に、数値を変えてみましょう。"

#: 02.1-Your-First-Beeps.md:23
#, no-wrap
msgid "play 75"
msgstr "play 75"

#: 02.1-Your-First-Beeps.md:27
#, fuzzy
msgid "Can you hear the difference? Try a lower number:"
msgstr "違いが分かりますか？より低い値も試してみましょう。"

#: 02.1-Your-First-Beeps.md:29
#, no-wrap
msgid "play 60"
msgstr "play 60"

#: 02.1-Your-First-Beeps.md:33
#, fuzzy
msgid ""
"So, lower numbers make lower pitched beeps and higher numbers make higher pitc"
"hed beeps. Just like on a piano, the keys at the lower part of the piano (the "
"left hand side) play lower notes and the keys on the higher part of the piano "
"(the right hand side) play higher notes. In fact, the numbers actually relate "
"to notes on the piano. `play 47` actually means play the 47th note on the pian"
"o. Which means that `play 48` is one note up (the next note to the right). It "
"just so happens that the 4th octave C is number 60. Go ahead and play it: `pla"
"y 60`."
msgstr ""
"つまり、より低い値は低い音程（ピッチ）の音を、より高い値は高い音程（ピッチ）の音を鳴らします。 ちょうどピアノのように、低い部分の鍵盤（左手側）が低い音階を"
"演奏し、高い部分の鍵盤（右手 側）が高い音階を奏でます。実は、数値は実際にピアノの鍵盤と関係しています。`play 47`は、実はピアノの47番目の鍵盤を演"
"奏することを意味しています。`play 48`は一音上がる（右隣りの鍵盤）ということです。第４オクターブはCの60ということになります。 続いて、`play"
" 60`を鳴らしてみましょう。"

#: 02.1-Your-First-Beeps.md:42
#, fuzzy
msgid ""
"*Don't worry* if this means nothing to you - it didn't to me when I first star"
"ted. All that matters right now is that you know that *low numbers make lower "
"beeps* and *high numbers make higher beeps*."
msgstr ""
"もし、これがあたなにとって何の意味かわからなくても*心配しない*でください。 わたしも始めた時は同じでした。いま重要なことは、*低い数値は低い音*を、*高い"
"数値は高い音*を生み出す、ということを知っておくことです。"

#: 02.1-Your-First-Beeps.md:46 08.2-Chords.md:3
#, fuzzy
msgid "Chords"
msgstr "和音"

#: 02.1-Your-First-Beeps.md:48
#, fuzzy
msgid ""
"Playing a note is quite fun, but playing many at the same time can be even bet"
"ter. Try it:"
msgstr "音符を奏でることはとても楽しいですが、同時にたくさんの音符を鳴らすとさらに楽しくなります。 これを試してみましょう。"

#: 02.1-Your-First-Beeps.md:51
#, no-wrap
msgid ""
"play 72\n"
"play 75\n"
"play 79"
msgstr ""
"play 72\n"
"play 75\n"
"play 79"

#: 02.1-Your-First-Beeps.md:57
#, fuzzy
msgid ""
"Jazzy! So, when you write multiple `play`s, they all play at the same time. Tr"
"y it for yourself - which numbers sound good together? Which sound terrible? E"
"xperiment, explore and find out for yourself."
msgstr ""
"華やかです！複数の`play`を書くと、全て同時に演奏されます。自分で試してみましょう. どの数値がいい組み合わせでしょうか？どれがひどい音？経験、探求しな"
"がら、自分自身で 見つけていきましょう。"

#: 02.1-Your-First-Beeps.md:61
#, fuzzy
msgid "Melody"
msgstr "メロディー"

#: 02.1-Your-First-Beeps.md:63
#, fuzzy
msgid ""
"So, playing notes and chords is fun - but how about a melody? What if you want"
"ed to play one note after another and not at the same time? Well, that's easy,"
" you just need to `sleep` between the notes:"
msgstr ""
"音符と和音を演奏するのは楽しいですね。でも、メロディーの演奏はどうすればよいでしょうか？ 一音ずつ、同時ではなく演奏したい場合は？それは簡単です。音符の間に"
"`sleep`を入れば可能です。"

#: 02.1-Your-First-Beeps.md:67
#, no-wrap
msgid ""
"play 72\n"
"sleep 1\n"
"play 75\n"
"sleep 1\n"
"play 79"
msgstr ""
"play 72\n"
"sleep 1\n"
"play 75\n"
"sleep 1\n"
"play 79"

#: 02.1-Your-First-Beeps.md:75
#, fuzzy
msgid ""
"How lovely, a little arpeggio. So what does the `1` mean in `sleep 1`? Well it"
" means the *duration of the sleep*. It actually means sleep for one beat, but "
"for now we can think about it as sleeping for 1 second. So, what if we wanted "
"to make our arpeggio a little faster? Well, we need to use shorter sleep value"
"s. What about a half i.e. `0.5`:"
msgstr ""
"なんて素敵なアルペジオ（和音を続けて弾くこと）！では、`sleep 1`の`1`は何を意味するのでしょうか？これは一拍休む、という意味ですが、とりあえず今は"
"、一秒休む、と考えま しょう。では、アルペジオをもう少し早くしたいと思ったら？それは、短い値を使えばよいのです。 例えば半分の値`0.5`ではどうでしょう？"

#: 02.1-Your-First-Beeps.md:81
#, no-wrap
msgid ""
"play 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"
msgstr ""
"play 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"

#: 02.1-Your-First-Beeps.md:89
#, fuzzy
msgid ""
"Notice how it plays faster. Now, try for yourself, change the times - use diff"
"erent times and notes."
msgstr "早くなりましたね。では、自分で時間を変えてみましょう。違う時間と音符を使ってみましょう。"

#: 02.1-Your-First-Beeps.md:92
#, fuzzy
msgid ""
"One thing to try is in-between notes such as `play 52.3` and `play 52.63`. The"
"re's absolutely no need to stick to standard whole notes. Play around and have"
" fun."
msgstr ""
"たとえば`play 52.3`や` play 52.63`のような中間的な値でも演奏してみてください。 通常の全音符で演奏し続ける必要は、まったくありません"
"。遊んで、楽しみましょう。"

#: 02.1-Your-First-Beeps.md:97
#, fuzzy
msgid "Traditional Note Names"
msgstr "伝統的な音の名前"

#: 02.1-Your-First-Beeps.md:99
#, fuzzy
msgid ""
"For those of you that already know some musical notation (don't worry if you d"
"on't - you don't need it to have fun) you might want to write a melody using n"
"ote names such as C and F# rather than numbers. Sonic Pi has you covered. You "
"can do the following:"
msgstr ""
"みなさんの中で、すでにいくつかの音楽記号を知っている人は、たとえば C とか F# などを使って メロディーを書きたいかも知れません（もしそうでなければ心配"
"無用です、それを楽しむ必要はあり ません）。Sonic Piはそれをカバーしてくれます。以下のことをやってみましょう。"

#: 02.1-Your-First-Beeps.md:104
#, no-wrap
msgid ""
"play :C\n"
"sleep 0.5\n"
"play :D\n"
"sleep 0.5\n"
"play :E"
msgstr ""
"play :C\n"
"sleep 0.5\n"
"play :D\n"
"sleep 0.5\n"
"play :E"

#: 02.1-Your-First-Beeps.md:112
#, fuzzy
msgid ""
"Remember to put the colon `:` in front of your note name so that it goes pink."
" Also, you can specify the octave by adding a number after the note name:"
msgstr ""
"演奏する音階の前にコロン':'を入れることを忘れないでください。コロンを置くと、Cが`:C`のように色が変わります。 また、音名のあとに数値を追加してオクタ"
"ーヴを指定することもできます。"

#: 02.1-Your-First-Beeps.md:116
#, no-wrap
msgid ""
"play :C3\n"
"sleep 0.5\n"
"play :D3\n"
"sleep 0.5\n"
"play :E4"
msgstr ""
"play :C3\n"
"sleep 0.5\n"
"play :D3\n"
"sleep 0.5\n"
"play :E4"

#: 02.1-Your-First-Beeps.md:124
#, fuzzy
msgid ""
"If you want to make a note sharp, add an `s` after the note name such as `play"
" :Fs3` and if you want to make a note flat, add a `b` such as `play :Eb3`."
msgstr ""
"半音♯(シャープ)にしたい場合は、’play :Fs3'のように音名の後に's'を追加します。 半音♭(フラット)にしたい場合は、'play :Eb3'のよ"
"うに'b'を追加します。"

#: 02.1-Your-First-Beeps.md:127
#, fuzzy
msgid "Now go *crazy* and have fun making your own tunes."
msgstr "*夢中*になって、自分の曲を作って楽しみましょう。"

#: 02.2-Synth-Params.md:1
#, fuzzy
msgid "2.2 Synth Options"
msgstr "2.2 シンセのオプション"

#: 02.2-Synth-Params.md:3
#, fuzzy
msgid "Synth Options: Amp and Pan"
msgstr "シンセのオプション：Amp と Pan"

#: 02.2-Synth-Params.md:5
#, fuzzy
msgid ""
"As well as allowing you to control which note to play or which sample to trigg"
"er, Sonic Pi provides a whole range of options to craft and control the sounds"
". We'll be covering many of these in this tutorial and there's extensive docum"
"entation for each in the help system. However, for now we'll introduce two of "
"the most useful: *amplitude* and *pan*. First, let's look at what options actu"
"ally are."
msgstr ""
"Sonic Piはあらゆる音を作りだし、コントロールするためのオプションの全てを提供します。 どんな音符を演奏するのか、そしてどんなサンプルをトリガー（きっ"
"かけ）にするのかはあなた次第です。 このチュートリアルでは、これらの多くをカバーするそれぞれについての詳細なドキュメントが ヘルプシステムにあります。しかし"
"、これから最も有用なのうちの2つ、*Amplitude(振幅)*と*Pan(パン)*を紹介します。 まずはオプションを見てみましょう。"

#: 02.2-Synth-Params.md:13
#, fuzzy
msgid "Options"
msgstr "オプション"

#: 02.2-Synth-Params.md:15
#, fuzzy
msgid ""
"Sonic Pi supports the notion of options (or opts for short) for its synths. Op"
"ts are controls you pass to `play` which modify and control aspects of the sou"
"nd you hear. Each synth has its own set of opts for finely tuning its sound. H"
"owever, there are common sets of opts shared by many sounds such as `amp:` and"
" envelope opts (covered in another section)."
msgstr ""
"Sonic Piはシンセのためにオプションという概念を備えています。 オプションは、あなたが耳にするサウンドの特徴をコントロールしたり、 変更するための手段"
"で、演奏に反映されます。シンセはそれぞれ細かく音を チューニングするためのオプションを持っています。 Sonic Piには、`amp:`（音量）やエンベロー"
"プ・オプション(ほかのセクションで紹介します)のような、 多くのサウンドに共通するオプションを持っています。"

#: 02.2-Synth-Params.md:22
#, fuzzy
msgid ""
"Opts have two major parts, their name (the name of the control) and their valu"
"e (the value you want to set the control at). For example, you might have a op"
"t called `cheese:` and want to set it with a value of `1`."
msgstr ""
"オプションには2つの主要な役割があり、ひとつはその名前(制御の名前)、もうひとつは 数値（あなたが制御したい値）です。例えば、`cheese:`いうオプショ"
"ンがあったとして、 `1`の値にセットしたいとします。"

#: 02.2-Synth-Params.md:27
#, fuzzy
msgid ""
"Opts are passed to calls to `play` by using a comma `,` and then the name of t"
"he opt such as `amp:` (don't forget the colon `:`) and then a space and the va"
"lue of the opt. For example:"
msgstr ""
"オプションは、play`の後にカンマ`,`を入れて、その後、`amp:\\`(コロン : を忘れずに)のような オプションの名前、スペース、そしてオプションの"
"値、というように渡していきます。例えば、"

#: 02.2-Synth-Params.md:31
#, no-wrap
msgid "play 50, cheese: 1"
msgstr "play 50, cheese: 1"

#: 02.2-Synth-Params.md:35
#, fuzzy
msgid "(Note that `cheese:` isn't a valid opt, we're just using it as an example)."
msgstr "(cheese: は無効なオプションです。例として使っています。)"

#: 02.2-Synth-Params.md:37
#, fuzzy
msgid "You can pass multiple opts by separating them with a comma:"
msgstr "カンマを使って区切り、複数のオプションを使用することができます。"

#: 02.2-Synth-Params.md:39
#, no-wrap
msgid "play 50, cheese: 1, beans: 0.5"
msgstr "play 50, cheese: 1, beans: 0.5"

#: 02.2-Synth-Params.md:43
#, fuzzy
msgid "The order of the opts doesn't matter, so the following is identical:"
msgstr "オプションの順番は問題ではないので、以下は同じものです。"

#: 02.2-Synth-Params.md:45
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 1"
msgstr "play 50, beans: 0.5, cheese: 1"

#: 02.2-Synth-Params.md:49
#, fuzzy
msgid ""
"Opts that aren't recognised by the synth are just ignored (like `cheese` and `"
"beans` which are clearly ridiculous opt names!)"
msgstr "シンセで認識されないオプションは無視されます(`cheese` (チーズ)と`beans`(豆)などは明らかに馬鹿げた名前でしょう！)"

#: 02.2-Synth-Params.md:52
#, fuzzy
msgid ""
"If you accidentally use the same opt twice with different values, the last one"
" wins. For example, `beans:` here will have the value 2 rather than 0.5:"
msgstr ""
"もし偶然同じオプションを2回、違う値で使った場合は、最後のものが有効になります。 例えば、ここでの`beans:`は、0.5 ではなく 2 の値が採用されま"
"す。"

#: 02.2-Synth-Params.md:56
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 3, eggs: 0.1, beans: 2"
msgstr "play 50, beans: 0.5, cheese: 3, eggs: 0.1, beans: 2"

#: 02.2-Synth-Params.md:60
#, fuzzy
msgid ""
"Many things in Sonic Pi accept opts, so just spend a little time learning how "
"to use them and you'll be set! Let's play with our first opt: `amp:`."
msgstr ""
"Sonic Piの中の命令には多くのオプションが用意されているので、その使い方に ちょっとだけ時間を使って、習得しましょう！ それでは最初のオプション`am"
"p:`で演奏してみましょう。"

#: 02.2-Synth-Params.md:64 02.4-Durations-with-Envelopes.md:25
#, fuzzy
msgid "Amplitude"
msgstr "アンプ（増幅）"

#: 02.2-Synth-Params.md:66
#, fuzzy
msgid ""
"Amplitude is a computer representation of the loudness of a sound. A *high amp"
"litude produces a loud sound* and a *low amplitude produces a quiet sound*. Ju"
"st as Sonic Pi uses numbers to represent time and notes, it uses numbers to re"
"present amplitude. An amplitude of 0 is silent (you'll hear nothing) whereas a"
"n amplitude of 1 is normal volume. You can even crank up the amplitude higher "
"to 2, 10, 100. However, you should note that when the overall amplitude of all"
" the sounds gets too high, Sonic Pi uses what's called a compressor to squash "
"them all to make sure things aren't too loud for your ears. This can often mak"
"e the sound muddy and strange. So try to use low amplitudes, i.e. in the range"
" 0 to 0.5 to avoid compression."
msgstr ""
"アンプは音の大きさをコンピュータで表したものです。高アンプは大きな音を生成し、 低アンプは静かな音を生み出します。Sonic Piは時間と音符を数字を使って"
"表現するので、 アンプにも数字を使用します。1 の値が通常の音量であるのに対して、0はサイレントです（何もきこえませんよ）。 2、10、100 というふうに"
"、アンプを上げることができます。ただし、全体の音を増幅しすぎると、 大きな音になりすぎないように、Sonic Piはコンプレッサー(圧縮)と呼ばれる 効果を"
"使用して確実な音量に抑えることを覚えておいてください。これは多くの場合、音がこもって 奇妙に聞こえます。ですから、圧縮を防ぐために0から0.5のような値で使"
"用してみてください。"

#: 02.2-Synth-Params.md:79
#, fuzzy
msgid "Amp it up"
msgstr "音量を上げる"

#: 02.2-Synth-Params.md:81
#, fuzzy
msgid ""
"To change the amplitude of a sound, you can use the `amp:` opt. For example, t"
"o play at half amplitude pass 0.5:"
msgstr "音の大きさを変えるために、 amp: オプションを使います。 例として、半分の音量で演奏するために、0.5 にしてみます。"

#: 02.2-Synth-Params.md:84
#, no-wrap
msgid "play 60, amp: 0.5"
msgstr "play 60, amp: 0.5"

#: 02.2-Synth-Params.md:88
#, fuzzy
msgid "To play at double amplitude pass 2:"
msgstr "倍の音量で演奏するために、2 にしてみます。"

#: 02.2-Synth-Params.md:90
#, no-wrap
msgid "play 60, amp: 2"
msgstr "play 60, amp: 2"

#: 02.2-Synth-Params.md:94
#, fuzzy
msgid ""
"The `amp:` opt only modifies the call to `play` it's associated with. So, in t"
"his example, the first call to play is at half volume and the second is back t"
"o the default (1):"
msgstr ""
"`amp:`オプションは、関連付けられている`play`への命令だけを変更します。 ですから、この例では、最初の命令は半分の音量になり、次にはデフォルト（1"
"の値）に戻ります。"

#: 02.2-Synth-Params.md:98
#, no-wrap
msgid ""
"play 60, amp: 0.5\n"
"sleep 0.5\n"
"play 65"
msgstr ""
"play 60, amp: 0.5\n"
"sleep 0.5\n"
"play 65"

#: 02.2-Synth-Params.md:104
#, fuzzy
msgid "Of course, you can use different `amp:` values for each call to play:"
msgstr "もちろん、それぞれの命令で異なった`amp:`の値を設定して演奏することもできます。"

#: 02.2-Synth-Params.md:106
#, no-wrap
msgid ""
"play 50, amp: 0.1\n"
"sleep 0.25\n"
"play 55, amp: 0.2\n"
"sleep 0.25\n"
"play 57, amp: 0.4\n"
"sleep 0.25\n"
"play 62, amp: 1"
msgstr ""
"play 50, amp: 0.1\n"
"sleep 0.25\n"
"play 55, amp: 0.2\n"
"sleep 0.25\n"
"play 57, amp: 0.4\n"
"sleep 0.25\n"
"play 62, amp: 1"

#: 02.2-Synth-Params.md:116
#, fuzzy
msgid "Panning"
msgstr "パンニング"

#: 02.2-Synth-Params.md:118
#, fuzzy
msgid ""
"Another fun opt to use is `pan:` which controls the panning of a sound in ster"
"eo. Panning a sound to the left means that you hear it out of the left speaker"
", and panning it to the right means you hear it out of your right speaker. For"
" our values, we use a -1 to represent fully left, 0 to represent center and 1 "
"to represent fully right in the stereo field. Of course, we're free to use any"
" value between -1 and 1 to control the exact positioning of our sound."
msgstr ""
"もうひとつの面白いオプションは`pan:`です。ステレオで音の位置を制御します。 左に音をパンすることは左のスピーカーから音が聞こえることを意味し、 右にパ"
"ンすれば右のスピーカーから聞こえます。値としては、-1 は最も左、 0 は中心、1 は最も右、というようにステレオの領域で表現することができます。 もちろん"
"、音の正確な位置をコントロールするために、-1 から 1 の間のどの値でも使用することができます。"

#: 02.2-Synth-Params.md:126
#, fuzzy
msgid "Let's play a beep out of the left speaker:"
msgstr "左のスピーカーから音を鳴らしてみましょう。"

#: 02.2-Synth-Params.md:128
#, no-wrap
msgid "play 60, pan: -1"
msgstr "play 60, pan: -1"

#: 02.2-Synth-Params.md:132
#, fuzzy
msgid "Now, let's play it out of the right speaker:"
msgstr "では、右のスピーカーから鳴らします。"

#: 02.2-Synth-Params.md:134
#, no-wrap
msgid "play 60, pan: 1"
msgstr "play 60, pan: 1"

#: 02.2-Synth-Params.md:138
#, fuzzy
msgid "Finally let's play it back out of the center of both (the default position):"
msgstr "最後に元の通り、中心から鳴らしてみます（通常の位置です）。"

#: 02.2-Synth-Params.md:141
#, no-wrap
msgid "play 60, pan: 0"
msgstr "play 60, pan: 0"

#: 02.2-Synth-Params.md:145
#, fuzzy
msgid "Now, go and have fun changing the amplitude and panning of your sounds!"
msgstr "では、続けてあなたの音のアンプやパンを変えて楽しんでみましょう！"

#: 02.3-Switching-Synths.md:1
#, fuzzy
msgid "2.3 Switching Synths"
msgstr "2.3 シンセの切り替え"

#: 02.3-Switching-Synths.md:3
#, fuzzy
msgid "Switching Synths"
msgstr "シンセの切り替え"

#: 02.3-Switching-Synths.md:5
#, fuzzy
msgid ""
"So far we've had quite a lot of fun making beeps. However, you're probably sta"
"rting to get bored of the basic beep noise. Is that all Sonic Pi has to offer?"
" Surely there's more to live coding than just playing beeps? Yes there is, and"
" in this section we'll explore the exciting range of sounds that Sonic Pi has "
"to offer."
msgstr ""
"これまで、ビープ音を鳴らして楽しんできました。けれども、 もしかするとあなたはこのベーシックなビープ音に退屈し始めているかも知れません。 これがSonic "
"piが提供してくれるサウンドの全てなのでしょうか？もちろん、ビープ音だけではなくて、 もっと他にもたくさんのライブコーディングがありますよね？はい、あります"
"。 この章ではSonic Piが作り出すエキサイティングな音の領域へと探検していきましょう。"

#: 02.3-Switching-Synths.md:13
#, fuzzy
msgid ""
"Sonic Pi has a range of instruments it calls synths which is *short for synthe"
"sisers*. Whereas samples represent pre-recorded sounds, synths are capable of "
"generating new sounds depending on how you control them (which we'll explore l"
"ater in this tutorial). Sonic Pi's synths are very powerful and expressive and"
" you'll have a lot of fun exploring and playing with them. First, let's learn "
"how to select the current synth to use."
msgstr ""
"Sonic Piは、シンセサイザーの略であるシンセと呼ばれる楽器の機能を持っています。 サンプルがすでに録音された音であるのに対して、シンセはあなたがそれを"
"コントロールすることに応じて 新しいサウンドを生み出すことができます（このチュートリアルの後半でみていきます）。Sonic Piのシンセは、 パワフルで表現"
"力に富んでいて、探索しながら演奏したり、楽しめるはずです。 最初に、ひとまずここでシンセを使うために、選び方を学んでみましょう。"

#: 02.3-Switching-Synths.md:21
#, fuzzy
msgid "Buzzy saws and prophets"
msgstr "酔っ払いのsawとprophet"

#: 02.3-Switching-Synths.md:23
#, fuzzy
msgid "A fun sound is the *saw wave* - let's give it a try:"
msgstr "面白い音は、*ノコギリ（saw）波*です。試してみましょう。"

#: 02.3-Switching-Synths.md:25
#, no-wrap
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:35
#, fuzzy
msgid "Let's try another sound - the *prophet*:"
msgstr "他の音*prophet*を試してみましょう。"

#: 02.3-Switching-Synths.md:37
#, no-wrap
msgid ""
"use_synth :prophet\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"use_synth :prophet\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:47
#, fuzzy
msgid "How about combining two sounds. First one after another:"
msgstr "2つを一緒にしたらどうでしょう。一方のあとに、もう一方を。"

#: 02.3-Switching-Synths.md:49
#, no-wrap
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"
msgstr ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:60
#, fuzzy
msgid "Now at the same time:"
msgstr "では同時に。"

#: 02.3-Switching-Synths.md:62
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play 38\n"
"sleep 0.25\n"
"use_synth :dsaw\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"
msgstr ""
"use_synth :tb303\n"
"play 38\n"
"sleep 0.25\n"
"use_synth :dsaw\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57\n"
"sleep 0.25"

#: 02.3-Switching-Synths.md:74
#, fuzzy
msgid ""
"Notice that the `use_synth` command only affects the following calls to `play`"
". Think of it like a *big switch* - new calls to `play` will play whatever syn"
"th it's currently pointing to. You can move the switch to a new synth with `us"
"e_synth`."
msgstr ""
"`use_synth`コマンドは、 下の`play`にだけ影響していることに注意してください。 大きなスイッチのようなものだと考えてください。指定したどんな"
"シンセでも、 新しい`play`へ命令として演奏されます。`use_synth`で新しいシンセにスイッチすることができます。"

#: 02.3-Switching-Synths.md:80
#, fuzzy
msgid "Discovering Synths"
msgstr "シンセを見つける"

#: 02.3-Switching-Synths.md:82
#, fuzzy
msgid ""
"To see which synths Sonic Pi has for you to play with take a look at the Synth"
"s option in the far left vertical menu (above Fx). There are over 20 to choose"
" from. Here are a few of my favourites:"
msgstr ""
"演奏するために Sonic Piがどんなシンセを備えているかを見るには、左端のメニュー（効果 の上）にあるシンセオプションを見てください。20以上が用意され"
"ています。これらは、わたしのお気に入りの数種類です。"

#: 02.3-Switching-Synths.md:86
msgid "`:prophet`"
msgstr ""

#: 02.3-Switching-Synths.md:87
msgid "`:dsaw`"
msgstr ""

#: 02.3-Switching-Synths.md:88
msgid "`:fm`"
msgstr ""

#: 02.3-Switching-Synths.md:89
msgid "`:tb303`"
msgstr ""

#: 02.3-Switching-Synths.md:90
msgid "`:pulse`"
msgstr ""

#: 02.3-Switching-Synths.md:92
#, fuzzy
msgid ""
"Now play around with *switching synths during your music*. Have fun combining "
"synths to make new sounds as well as using different synths for different sect"
"ions of your music."
msgstr "*音楽の中でシンセを切り替えて*遊んでみてください。音楽の異なるセクションに違うシンセを使うように、 シンセを組み合わせて新しい音を作って楽しんでください。"

#: 02.4-Durations-with-Envelopes.md:1
#, fuzzy
msgid "2.4 Duration with Envelopes"
msgstr "2.4 エンベロープでのデュレーション"

#: 02.4-Durations-with-Envelopes.md:3
#, fuzzy
msgid "Duration with Envelopes"
msgstr "エンベロープでのデュレーション"

#: 02.4-Durations-with-Envelopes.md:5
#, fuzzy
msgid ""
"In an earlier section, we looked at how we can use the `sleep` command to cont"
"rol when to trigger our sounds. However, we haven't yet been able to control t"
"he duration of our sounds."
msgstr ""
"前半のセクションでは、音を演奏したい時にどのように`sleep`コマンドを 使用するかを見てきました。ですが、わたしたちはまだ音のデュレーション（長さ）につ"
"いて 制御できていませんね。"

#: 02.4-Durations-with-Envelopes.md:9
#, fuzzy
msgid ""
"In order to give us a simple, yet powerful means of *controlling the duration*"
" of our sounds, Sonic Pi provides the notion of an *ADSR amplitude envelope* ("
"we'll cover what ADSR means later in this section). An amplitude envelope offe"
"rs two useful aspects of control:"
msgstr ""
"音のデュレーションを制御するための、パワフルでシンプルな手段として、 Sonic Piには*ADSR amplitude envelope*（ADSR・アン"
"プ・エンベロープ）という 概念があります（ADSRが何を意味するかはこのセクションの後半で紹介します）。 アンプ・エンベロープは制御のための便利な2つの側面"
"を持っています。"

#: 02.4-Durations-with-Envelopes.md:14
#, fuzzy
msgid "control over the duration of a sound"
msgstr "音のデュレーション（長さ）を制御する"

#: 02.4-Durations-with-Envelopes.md:15
#, fuzzy
msgid "control over the amplitude of a sound"
msgstr "音のアンプ（音量）を制御する"

#: 02.4-Durations-with-Envelopes.md:17
#, fuzzy
msgid "Duration"
msgstr "デュレーション"

#: 02.4-Durations-with-Envelopes.md:19
#, fuzzy
msgid ""
"The duration is the length the sound lasts for. A longer duration means that y"
"ou hear the sound for longer. Sonic Pi's sounds all have a controllable amplit"
"ude envelope, and the total duration of that envelope is the duration of the s"
"ound. Therefore, by controlling the envelope you control the duration."
msgstr ""
"デュレーションは音の持続する長さのことです。長いデュレーションは、より長く音が 鳴ることを意味します。Sonic Piの全てのサウンドは、アンプ・エンベロー"
"プで制御でき、 ひとつのエンベロープ(音量や音色の時間的な変化)の長さは、音の長さでもあります。"

#: 02.4-Durations-with-Envelopes.md:27
#, fuzzy
msgid ""
"The ADSR envelope not only controls duration, it also gives you *fine control "
"over the amplitude of the sound*. All audible sounds start and end silent and "
"contain some non-silent part in-between. Envelopes allow you to slide and hold"
" the amplitude of non-silent parts of the sound. It's like giving someone inst"
"ructions on how to turn up and down the volume of a guitar amplifier. For exam"
"ple you might ask someone to \"start at silence, slowly move up to full volume,"
" hold it for a bit, then quickly fall back to silence.\" Sonic Pi allows you to"
" program exactly this behaviour with envelopes."
msgstr ""
"ADSRエンベロープは、デュレーションの制御だけでなく、*アンプ（音量）の緻密な 制御*も可能にします。全てのサウンドは、サイレント（無音）で始まり、間に音"
"があり、 またサイレントで終了します。エンベロープを使用すると、サウンドの音がある部分の音量を スライドさせたり、保持したりすることができます。これは、音楽"
"の音量を上げたり下げたり するのを、誰かに指示するような感じです。例えば、あなたは誰かに「無音で始めて、 ゆっくりとフル・ボリュームにして、少しそのままで、"
"そして一気に無音に戻る。」と頼むとします。 Sonic Piはエンベロープでこれをプログラムできるようにしてくれます。"

#: 02.4-Durations-with-Envelopes.md:37
#, fuzzy
msgid ""
"Just to recap, as we have seen before, an amplitude of 0 is silence and an amp"
"litude of 1 is normal volume."
msgstr "前のセクションで見てきたように、アンプの`0`は無音、`1`は通常の音量です。"

#: 02.4-Durations-with-Envelopes.md:40
#, fuzzy
msgid "Now, let us look at each of the parts of the envelopes in turn."
msgstr "では、エンベロープのそれぞれの部分を順番に見ていきましょう。"

#: 02.4-Durations-with-Envelopes.md:42
#, fuzzy
msgid "Release Phase"
msgstr "リリース・フェーズ（終わるまでの時間）"

#: 02.4-Durations-with-Envelopes.md:44
#, fuzzy
msgid ""
"The only part of the envelope that's used by default is the release time. This"
" is the time it takes for the synth's sound to fade out. All synths have a rel"
"ease time of 1 which means that by default they have a duration of 1 beat (whi"
"ch at the default BPM of 60 is 1 second):"
msgstr ""
"エンベロープのうちデフォルトで使われている唯一の部分はリリース・フェーズです。 通常、全てのシンセのリリース・フェーズ（終わるまでの時間）は1で、 これは終"
"了するまでに1ビート（デフォルトBPMの60の場合には1秒）のデュレーションを持っているということです。"

#: 02.4-Durations-with-Envelopes.md:53
#, fuzzy
msgid ""
"The note will be audible for 1 second. Go ahead and time it :-) This is short "
"hand for the longer more explicit version:"
msgstr "この音は1秒間だけ聞こえます。続いて時間を指定しよう。 上の記述は、次の明示的で長い記述を簡略化したものです。"

#: 02.4-Durations-with-Envelopes.md:56
#, no-wrap
msgid "play 70, release: 1"
msgstr "play 70, release: 1"

#: 02.4-Durations-with-Envelopes.md:60
#, fuzzy
msgid ""
"Notice how this sounds exactly the same (the sound lasts for one second). Howe"
"ver, it's now very easy to change the duration by modifying the value of the `"
"release:` opt:"
msgstr ""
"これも全く同じように（1秒間持続する）音が出たと思います。 しかし、`release:`のオプションを変更することでとても簡単に 持続時間を変更することがで"
"きるようになりました。"

#: 02.4-Durations-with-Envelopes.md:64
#, no-wrap
msgid "play 60, release: 2"
msgstr "play 60, release: 2"

#: 02.4-Durations-with-Envelopes.md:68
#, fuzzy
msgid ""
"We can make the synth sound for a very short amount of time by using a very sm"
"all release time:"
msgstr "また、非常に小さなリリース・フェーズの値を使って、シンセのサウンドをとても短くすることができます。"

#: 02.4-Durations-with-Envelopes.md:71
#, no-wrap
msgid "play 60, release: 0.2"
msgstr "play 60, release: 0.2"

#: 02.4-Durations-with-Envelopes.md:75
#, fuzzy
msgid ""
"The duration of the release of the sound is called the *release phase* and by "
"default is a linear transition (i.e. a straight line). The following diagram i"
"llustrates this transition:"
msgstr ""
"音がリリースされるまでの持続時間はリリース・フェーズと呼ばれていて、 デフォルトではリニア・トランジション（直線的な移行、つまり真っ直ぐ）です。以下の図は、"
"この移行を表したものです。"

#: 02.4-Durations-with-Envelopes.md:79
msgid "![release envelope](../images/tutorial/env-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:81
#, fuzzy
msgid ""
"The vertical line at the far left of the diagram shows that the sound starts a"
"t 0 amplitude, but goes up to full amplitude immediately (this is the attack p"
"hase which we'll cover next). Once at full amplitude it then moves in a straig"
"ht line down to zero taking the amount of time specified by `release:`. *Longe"
"r release times produce longer synth fade outs.*"
msgstr ""
"図の左端の縦の線は、サウンドが`0`の音量(ゼロ・アンプ)からスタートしていることを示しています。 しかし、すぐにフル・アンプに上がります（これは私たちが後"
"で学ぶ、アタック・フェーズというものです）。 いったんフル・アンプになり、それから`release:`で指定した値を取りながら、直線的にゼロに下がります。 "
"*長いリリース・タイムは長いシンセ・フェード・アウト（徐々に消えること）を生成します*。"

#: 02.4-Durations-with-Envelopes.md:88
#, fuzzy
msgid ""
"You can therefore change the duration of your sound by changing the release ti"
"me. Have a play adding release times to your music."
msgstr ""
"これにより、リリース・フェーズを変更して、あなたのサウンドのデュレーションを 変えることができます。自分の音楽にリリース・タイムを追加して演奏してみましょう"
"。"

#: 02.4-Durations-with-Envelopes.md:91
#, fuzzy
msgid "Attack Phase"
msgstr "アタック・フェーズ"

#: 02.4-Durations-with-Envelopes.md:93
#, fuzzy
msgid ""
"By default, the *attack phase* is 0 for all synths which means they move from "
"0 amplitude to 1 immediately. This gives the synth an initial percussive sound"
". However, you may wish to fade your sound in. This can be achieved with the `"
"attack:` opt. Try fading in some sounds:"
msgstr ""
"通常、アタック・フェーズは全てのシンセにおいて`0`です。つまり、`0`アンプから `1`にただちに移動することを意味します。シンセは最初から音が打たれます"
"。 けれども、あなたは音をフェード・イン（徐々に大きく）したいかも知れません。 これは、`attack:`のオプションで実現することができます。いくつかの音"
"をフェード・インしてみましょう。"

#: 02.4-Durations-with-Envelopes.md:98
#, no-wrap
msgid ""
"play 60, attack: 2\n"
"sleep 3\n"
"play 65, attack: 0.5"
msgstr ""
"play 60, attack: 2\n"
"sleep 3\n"
"play 65, attack: 0.5"

#: 02.4-Durations-with-Envelopes.md:104
#, fuzzy
msgid ""
"You may use multiple opts at the same time. For example for a short attack and"
" a long release try:"
msgstr "複数のオプションを使うこともできます。例えば、短いアタック、長いリリースに、変更してみましょう。"

#: 02.4-Durations-with-Envelopes.md:107
#, no-wrap
msgid "play 60, attack: 0.7, release: 4"
msgstr "play 60, attack: 0.7, release: 4"

#: 02.4-Durations-with-Envelopes.md:111
#, fuzzy
msgid ""
"This short attack and long release envelope is illustrated in the following di"
"agram:"
msgstr "この、短いアタックに長いリリースのエンベロープは、以下の図のように表します。"

#: 02.4-Durations-with-Envelopes.md:114
msgid "![attack release envelope](../images/tutorial/env-attack-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:116
#, fuzzy
msgid ""
"Of course, you may switch things around. Try a long attack and a short release"
":"
msgstr "もちろん、ほかに変更することもできます。長いアタックに短いリリースを試してみましょう。"

#: 02.4-Durations-with-Envelopes.md:119
#, no-wrap
msgid "play 60, attack: 4, release: 0.7"
msgstr "play 60, attack: 4, release: 0.7"

#: 02.4-Durations-with-Envelopes.md:123
msgid ""
"![long attack short release envelope](../images/tutorial/env-long-attack-short"
"-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:125
#, fuzzy
msgid ""
"Finally, you can also have both short attack and release times for shorter sou"
"nds."
msgstr "そして、アタックとリリース両方短くして、短いサウンドにもできます。"

#: 02.4-Durations-with-Envelopes.md:128
#, no-wrap
msgid "play 60, attack: 0.5, release: 0.5"
msgstr "play 60, attack: 0.5, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:132
msgid ""
"![short attack short release envelope](../images/tutorial/env-short-attack-sho"
"rt-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:134
#, fuzzy
msgid "Sustain Phase"
msgstr "サステイン・フェーズ（持続時間）"

#: 02.4-Durations-with-Envelopes.md:136
#, fuzzy
msgid ""
"In addition to specifying attack and release times, you may also specify a sus"
"tain time to control the *sustain phase*. This is the time for which the sound"
" is maintained at full amplitude between the attack and release phases."
msgstr ""
"アタック・フェーズとリリース・フェーズの設定に付け加えて、サステイン・フェーズ（持続時間）を 指定することができます。サステイン・フェーズとは、アタックとリ"
"リースの間でフル・アンプの 音が鳴り続ける時間のことです。"

#: 02.4-Durations-with-Envelopes.md:141
#, no-wrap
msgid "play 60, attack: 0.3, sustain: 1, release: 1"
msgstr "play 60, attack: 0.3, sustain: 1, release: 1"

#: 02.4-Durations-with-Envelopes.md:145
msgid "![ASR envelope](../images/tutorial/env-attack-sustain-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:147
#, fuzzy
msgid ""
"The sustain time is useful for important sounds you wish to give full presence"
" in the mix before entering an optional release phase. Of course, it's totally"
" valid to set both the `attack:` and `release:` opts to 0 and just use the sus"
"tain to have absolutely no fade in or fade out to the sound. However, be warne"
"d, a release of 0 can produce clicks in the audio and it's often better to use"
" a very small value such as 0.2."
msgstr ""
"サステイン・フェーズは、オプションのリリース・フェーズに入る前に、ミックスの中で主となる 存在感を与えたい重要なサウンドにとって有効です。もちろん、`att"
"ack:`と`release:`両方のオプションを 0に設定することもとても有効ですし、サウンドに対して、完全にフェード・インなし、 フェード・アウトなしに"
"するためにサステインを使えば良いのです。けれど、注意してください、 0 のリリースはオーディオの中にクリック音を生成します。たいていの場合、0.2のような "
"ごく小さい値を使う方が良いです。"

#: 02.4-Durations-with-Envelopes.md:154
#, fuzzy
msgid "Decay Phase"
msgstr "ディケイ・フェーズ（減衰時間）"

#: 02.4-Durations-with-Envelopes.md:156
#, fuzzy
msgid ""
"For an extra level of control, you can also specify a decay time. This is a ph"
"ase of the envelope that fits between the attack and sustain phases and specif"
"ies a time where the amplitude will drop from the `attack_level:` to the `deca"
"y_level:` (which unless you explicitly set it will be set to the `sustain_leve"
"l:`). By default, the `decay:` opt is 0 and both the attack and sustain levels"
" are 1 so you'll need to specify them for the decay time to have any effect:"
msgstr ""
"そして、今あなたがさらなる制御のレベルを必要としているならば、ディケイ・タイムというものを 設定することもできます。これは、アタックとサステインの間にくるエ"
"ンベロープのフェーズで、 音量が`attack_level:`から`decay_level:`(もしこれを明示的に指定しなければ、この値は `sustain"
"_level:`と同じ値に設定されます)に落ちる時間を指定します。 通常では、`decay:`のオプションは 0 で、アタックとサステインのレベルは両方とも"
" 1 です。ですから、ディケイ・フェーズで効果を得るには、アタック、サステインのレベルも指定しなくてはなりません。"

#: 02.4-Durations-with-Envelopes.md:164
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, sustain_level: 0.4, sustain"
": 1, release: 0.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, sustain_level: 0.4, sustain"
": 1, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:168
msgid "![ADSR envelope](../images/tutorial/env-attack-decay-sustain-release.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:170
#, fuzzy
msgid "Decay Level"
msgstr "ディケイレベル"

#: 02.4-Durations-with-Envelopes.md:172
#, fuzzy
msgid ""
"One last trick is that although the `decay_level:` opt defaults to be the same"
" value as `sustain_level:` you can explicitly set them to different values for"
" full control over the envelope. This allows you to to create envelopes such a"
"s the following:"
msgstr ""
"最後の仕掛けは、`decay_level:`オプションがデフォルトでは`sustain_level:`と同じ値に設定されていて、エンベロープを完全に制御した"
"い場合に明示的に別な値に設定できることです。 これにより次のようなエンベロープを作ることができるでしょう。"

#: 02.4-Durations-with-Envelopes.md:177
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, decay_level: 0.3, sustain: "
"1, sustain_level: 0.4, release: 0.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, decay_level: 0.3, sustain: "
"1, sustain_level: 0.4, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:181
msgid "![ASR envelope](../images/tutorial/env-decay-level.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:183
#, fuzzy
msgid ""
"It's also possible to set the `decay_level:` to be higher than `sustain_level:"
"`:"
msgstr "また`decay_level:`を`sustain_level:`より大きく設定することもできます。"

#: 02.4-Durations-with-Envelopes.md:185
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1, sustain: "
"0.5, sustain_level: 0.8, release: 1.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1, sustain: "
"0.5, sustain_level: 0.8, release: 1.5"

#: 02.4-Durations-with-Envelopes.md:189
msgid "![ASR envelope](../images/tutorial/env-decay-level-2.png)"
msgstr ""

#: 02.4-Durations-with-Envelopes.md:191
#, fuzzy
msgid "ADSR Envelopes"
msgstr "ADSR エンベロープ"

#: 02.4-Durations-with-Envelopes.md:193
#, fuzzy
msgid "So to summarise, Sonic Pi's ADSR envelopes have the following phases:"
msgstr "つまり要約すると、Sonic PiのADSRエンベロープには、以下のフェーズがあります。"

#: 02.4-Durations-with-Envelopes.md:195
#, fuzzy
msgid "*attack* - time from 0 amplitude to the `attack_level`,"
msgstr "*attack*（アタック）- 0 アンプから`attack_level`までの時間"

#: 02.4-Durations-with-Envelopes.md:196
#, fuzzy
msgid "*decay* - time to move amplitude from `attack_level` to `decay_level`,"
msgstr "*decay*（ディケイ）- 音量を`attack_level`から`decay_level`まで移行させる時間"

#: 02.4-Durations-with-Envelopes.md:197
#, fuzzy
msgid "*sustain* - time to move the amplitude from `decay_level` to `sustain_level`,"
msgstr "*sustain*（サステイン）- 音量を`decay_level`から`sustain_level`まで移行させる時間"

#: 02.4-Durations-with-Envelopes.md:198
#, fuzzy
msgid "*release* - time to move amplitude from `sustain_level` to 0"
msgstr "*release*（リリース） - 音量を`sustain_level`から 0 に移行させる時間"

#: 02.4-Durations-with-Envelopes.md:200
#, fuzzy
msgid ""
"It's important to note that the duration of a sound is the summation of the ti"
"mes of each of these phases. Therefore the following sound will have a duratio"
"n of 0.5 + 1 + 2 + 0.5 = 4 beats:"
msgstr ""
"サウンドのデュレーションは、これらのフェーズの合計であることに注意することが大切です。 したがって、以下のサウンドは 0.5 + 1 + 2 + 0.5 ="
" 4 で、4秒のデュレーションになります。"

#: 02.4-Durations-with-Envelopes.md:204
#, no-wrap
msgid ""
"play 60, attack: 0.5, attack_level: 1, decay: 1, sustain_level: 0.4, sustain: "
"2, release: 0.5"
msgstr ""
"play 60, attack: 0.5, attack_level: 1, decay: 1, sustain_level: 0.4, sustain: "
"2, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:208
#, fuzzy
msgid "Now go and have a play adding envelopes to your sounds..."
msgstr "ではあなたのサウンドにエンベロープを追加して演奏してみましょう。"

#: 03-Samples.md:1
msgid "3 Samples"
msgstr ""

#: 03-Samples.md:3
#, fuzzy
msgid "Samples"
msgstr "サンプル"

#: 03-Samples.md:5
#, fuzzy
msgid ""
"Another great way to develop your music is to use pre-recorded sounds. In grea"
"t hip-hop tradition, we call these pre-recorded sounds *samples*. So, if you t"
"ake a microphone outside, go and record the gentle sound of rain hitting canva"
"s, you've just created a sample."
msgstr ""
"あなたの音楽を発展させる方法は他にもあります。すでに録音された音を使うことです。偉大なヒップホップの伝統では、これらのあらかじめ録音された音のことを、*サン"
"プル*と呼びます。つまり、マイクを持って外に出て、雨が優しくキャンバスを打つ音を録音しに行けば、それだけでサンプルを作ることができます。"

#: 03-Samples.md:10
#, fuzzy
msgid ""
"Sonic Pi lets you do lots of fun things with samples. Not only does it ship wi"
"th over 90 public domain samples ready for you to jam with, it lets you play a"
"nd manipulate your own. Let's get to it..."
msgstr ""
"Sonic Piは、サンプルで楽しいことがたくさんできるようになっています。90以上のパブリック・ドメイン（著作権がない）サンプルが、ジャム（即興演奏）する"
"ために同梱されているだけでなく、自分で操作して演奏することも可能にしてくれるのです。さっそくみていきましょう。"

#: 03.1-Triggering-Samples.md:1
#, fuzzy
msgid "3.1 Triggering Samples"
msgstr "3.1 サンプルを使う"

#: 03.1-Triggering-Samples.md:3
#, fuzzy
msgid "Triggering Samples"
msgstr "サンプルを使う"

#: 03.1-Triggering-Samples.md:5
#, fuzzy
msgid ""
"Playing beeps is only the beginning. Something that's a lot of fun is triggeri"
"ng pre-recorded samples. Try it:"
msgstr "ビープ音を演奏するのは最初だけです。もっと面白いのは、録音済みのサンプルを使うことです。やってみましょう。"

#: 03.1-Triggering-Samples.md:8
#, no-wrap
msgid "sample :ambi_lunar_land"
msgstr "sample :ambi_lunar_land"

#: 03.1-Triggering-Samples.md:12
#, fuzzy
msgid ""
"Sonic Pi includes many samples for you to play with. You can use them just lik"
"e you use the `play` command. To play multiple samples and notes just write th"
"em one after another:"
msgstr ""
"Sonic Jam は演奏のためにたくさんのサンプルを持っています。`play`コマンドを使うようにサンプルを使えばよいのです。複数のサンプルで演奏するには"
"、ひとつひとつ、順番に書いていきます。"

#: 03.1-Triggering-Samples.md:16
#, no-wrap
msgid ""
"play 36\n"
"play 48\n"
"sample :ambi_lunar_land\n"
"sample :ambi_drone"
msgstr ""
"play 36\n"
"play 48\n"
"sample :ambi_lunar_land\n"
"sample :ambi_drone"

#: 03.1-Triggering-Samples.md:23
#, fuzzy
msgid "If you want to space them out in time, use the `sleep` command:"
msgstr "もし間を空けたいなら、 sleep を使います。"

#: 03.1-Triggering-Samples.md:25
#, no-wrap
msgid ""
"sample :ambi_lunar_land\n"
"sleep 1\n"
"play 48\n"
"sleep 0.5\n"
"play 36\n"
"sample :ambi_drone\n"
"sleep 1\n"
"play 36"
msgstr ""
"sample :ambi_lunar_land\n"
"sleep 1\n"
"play 48\n"
"sleep 0.5\n"
"play 36\n"
"sample :ambi_drone\n"
"sleep 1\n"
"play 36"

#: 03.1-Triggering-Samples.md:36
#, fuzzy
msgid ""
"Notice how Sonic Pi doesn't wait for a sound to finish before starting the nex"
"t sound. The `sleep` command only describes the separation of the *triggering*"
" of the sounds. This allows you to easily layer sounds together creating inter"
"esting overlap effects. Later in this tutorial we'll take a look at controllin"
"g the *duration* of sounds with envelopes."
msgstr ""
"最初のサウンドが終わる前に、次のサウンドが始まることに注意してください。`sleep`コマンドは、サウンドの開始の間隔だけを記述しています。これによって、簡"
"単にサウンドを重ね合わせて、おもしろいオーバー・ラップ（重複）のエフェクト（効果）を生み出すことができるのです。 このチュートリアルの後半で、エンベロープで"
"サウンドの`duration`(長さ)を制御する方法についてみていきます。"

#: 03.1-Triggering-Samples.md:44
#, fuzzy
msgid "Discovering Samples"
msgstr "サンプルを探す"

#: 03.1-Triggering-Samples.md:46
#, fuzzy
msgid ""
"There are two ways to discover the range of samples provided in Sonic Pi. Firs"
"t, you can use this help system. Click on Samples in the far left vertical men"
"u, choose your category and then you'll see a list of available sounds."
msgstr ""
"Sonic Piが収録しているサンプルの種類を知るには、2つの方法があります。一つ目は、このヘルプシステムを使うことです。下のメニューの中の、`サンプル`を"
"クリックし、カテゴリを選ぶと、使用できるなサウンドのリストが表示されます。"

#: 03.1-Triggering-Samples.md:51
#, fuzzy
msgid ""
"Alternatively you can use the *auto-completion system*. Simply type the start "
"of a sample group such as: `sample :ambi_` and you'll see a drop-down of sampl"
"e names appear for you to select. Try the following category prefixes:"
msgstr ""
"あるいは、オート・コンプリーション（自動補完）システムを使うこともできます。 `sample :ambi_`のような複数のサンプルを束ねるグループ名をタイプ"
"し始めると、同じグループ内から選択できるサンプルの名前がドロップ・ダウンして表れます。以下のサンプル・グループの接頭語を入力してみましょう。"

#: 03.1-Triggering-Samples.md:56
msgid "`:ambi_`"
msgstr ""

#: 03.1-Triggering-Samples.md:57
msgid "`:bass_`"
msgstr ""

#: 03.1-Triggering-Samples.md:58
msgid "`:elec_`"
msgstr ""

#: 03.1-Triggering-Samples.md:59
msgid "`:perc_`"
msgstr ""

#: 03.1-Triggering-Samples.md:60
msgid "`:guit_`"
msgstr ""

#: 03.1-Triggering-Samples.md:61
msgid "`:drum_`"
msgstr ""

#: 03.1-Triggering-Samples.md:62
msgid "`:misc_`"
msgstr ""

#: 03.1-Triggering-Samples.md:63
msgid "`:bd_`"
msgstr ""

#: 03.1-Triggering-Samples.md:65
#, fuzzy
msgid "Now start mixing samples into your compositions!"
msgstr "さあ、あなたの曲でサンプルのミックスを始めてみましょう！"

#: 03.2-Sample-Params.md:1
#, fuzzy
msgid "3.2 Sample Parameters"
msgstr "3.2 サンプル・パラメータ"

#: 03.2-Sample-Params.md:3
#, fuzzy
msgid "Sample Parameters: Amp and Pan"
msgstr "サンプル・パラメータ：アンプとパン"

#: 03.2-Sample-Params.md:5
#, fuzzy
msgid ""
"As we saw with synths, we can easily control our sounds with parameters. Sampl"
"es support exactly the same parameterisation mechanism. Let's revisit our frie"
"nds `amp:` and `pan:`."
msgstr ""
"シンセの項目で見てきたように、パラメータで簡単にサウンドを制御することができます。 サンプルは全く同じパラメータの仕組みを備えています。何度も登場する、`a"
"mp:`と `pan:`をもう一度見てみましょう。"

#: 03.2-Sample-Params.md:9
#, fuzzy
msgid "Amping samples"
msgstr "サンプルをアンピングする"

#: 03.2-Sample-Params.md:11
#, fuzzy
msgid ""
"You can change the amplitude of samples with exactly the same approach you use"
"d for synths:"
msgstr "シンセで使った書き方と全く同じ方法で、サンプルのアンプ（音量）を変えることができます。"

#: 03.2-Sample-Params.md:14
#, no-wrap
msgid "sample :ambi_lunar_land, amp: 0.5"
msgstr "sample :ambi_lunar_land, amp: 0.5"

#: 03.2-Sample-Params.md:18
#, fuzzy
msgid "Panning samples"
msgstr "サンプルをパンする"

#: 03.2-Sample-Params.md:20
#, fuzzy
msgid ""
"We're also able to use the `pan:` parameter on samples. For example, here's ho"
"w we'd play the amen break in the left ear and then half way through play it a"
"gain through the right ear:"
msgstr ""
"サンプルで`pan:`のパラメータを使うこともできます。例えば、定番のドラムフレーズの アーメン・ブレイクを左耳で聞いた後に、半分は通過して再度右耳で聞く方"
"法です。"

#: 03.2-Sample-Params.md:24
#, no-wrap
msgid ""
"sample :loop_amen, pan: -1\n"
"sleep 0.877\n"
"sample :loop_amen, pan: 1"
msgstr ""
"sample :loop_amen, pan: -1\n"
"sleep 0.877\n"
"sample :loop_amen, pan: 1"

#: 03.2-Sample-Params.md:30
#, fuzzy
msgid "Note that 0.877 is half the duration of the `:loop_amen` sample in seconds."
msgstr "0.877 は、`:loop_amen`サンプルの半分の再生時間であることに注意してください。"

#: 03.2-Sample-Params.md:33
#, fuzzy
msgid ""
"Finally, note that if you set some synth defaults with `use_synth_defaults` (w"
"hich we will discuss later), these will be ignored by `sample`."
msgstr "そして、`use_synth_defaults`（あとで説明します）をシンセに設定している場合、 サンプルはこれを無視して再生します。"

#: 03.3-Stretching-Samples.md:1
#, fuzzy
msgid "3.3 Stretching Samples"
msgstr "3.3 サンプルを引き延ばす"

#: 03.3-Stretching-Samples.md:3
#, fuzzy
msgid "Stretching Samples"
msgstr "サンプルを引き延ばす"

#: 03.3-Stretching-Samples.md:5
#, fuzzy
msgid ""
"Now that we can play a variety of synths and samples to create some music, it'"
"s time to learn how to modify both the synths and samples to make the music ev"
"en more unique and interesting. First, let's explore the ability to *stretch* "
"and *squash* samples."
msgstr ""
"すでに私たちは、音楽を作るために様々なシンセやサンプルを演奏することができます。そろそろ、音楽をもっとユニークで面白くするために、シンセとサンプルを編集する"
"方法を学ぶ時間です。まずは、サンプルを引き延ばしたり圧縮する方法をみてみましょう。"

#: 03.3-Stretching-Samples.md:10
#, fuzzy
msgid "Sample Representation"
msgstr "サンプルで表現する"

#: 03.3-Stretching-Samples.md:12
#, fuzzy
msgid ""
"Samples are pre-recorded sounds stored as numbers which represent how to move "
"the speaker cone to reproduce the sound. The speaker cone can move in and out,"
" and so the numbers just need to represent how far in and out the cone needs t"
"o be for each moment in time. To be able to faithfully reproduce a recorded so"
"und the sample typically needs to store many thousands of numbers per second! "
"Sonic Pi takes this list of numbers and feeds them at the right speed to move "
"your computer's speaker in and out in just the right way to reproduce the soun"
"d. However, it's also fun to change the speed with which the numbers are fed t"
"o the speaker to change the sound."
msgstr ""
"サンプルとは、あらかじめ録音されたサウンドで、サウンドを再生するためにスピーカーのコーン（振動板）をどう動かすかを表す数値が格納されています。スピーカーのコ"
"ーンは行ったり来たり（振動）するため、数値は、その時々でコーンがどれくらいの距離を行ったり来たりすべきかをその時々で表す必要があります。録音された音を忠実に"
"再生するために、サンプルは概して1秒間に何千もの数値を格納しておく必要があるのです！Sonic Piはこの数値のリストを使って、適切なスピードでサウンドを再"
"生するための正しい方法をあなたのコンピューターのスピーカーに伝え、振動させるのです。けれども、サウンドを変えるためにスピーカーに与えられる数値のスピードを変"
"えるのも楽しいですよ。"

#: 03.3-Stretching-Samples.md:23
#, fuzzy
msgid "Changing Rate"
msgstr "レートを変える"

#: 03.3-Stretching-Samples.md:25
#, fuzzy
msgid ""
"Let's play with one of the ambient sounds: `:ambi_choir`. To play it with the "
"default rate, you can pass a `rate:` opt to `sample`:"
msgstr ""
"アンビエント・サウンドのひとつ、`:ambi_choir`で演奏してみましょう。デフォルト（既定値）で演奏するには、`sample`に`rate:` のオプ"
"ションを渡します。"

#: 03.3-Stretching-Samples.md:28
#, no-wrap
msgid "sample :ambi_choir, rate: 1"
msgstr "sample :ambi_choir, rate: 1"

#: 03.3-Stretching-Samples.md:32
#, fuzzy
msgid ""
"This plays it at normal rate (1), so nothing special yet. However, we're free "
"to change that number to something else. How about `0.5`:"
msgstr ""
"これはデフォルト（既定値）のレート（速度）1で演奏するので、まだ何も変わったところはありません。ですが、数値を何か他の値に変えてもよいのです。`0.5`はど"
"うでしょう。"

#: 03.3-Stretching-Samples.md:35
#, no-wrap
msgid "sample :ambi_choir, rate: 0.5"
msgstr "sample :ambi_choir, rate: 0.5"

#: 03.3-Stretching-Samples.md:39
#, fuzzy
msgid ""
"Woah! What's going on here? Well, two things. Firstly, the sample takes twice "
"as long to play, secondly the sound is an octave lower. Let's explore these th"
"ings in a little more detail."
msgstr ""
"ワオ！何が起きたのでしょう？そう、2つのことが起こりました。一つ目は、サンプルは再生に2倍の時間をかけていました。二つ目は、サウンドは1オクターブ低くなって"
"いました。もう少し詳しく、これらのことを探ってみましょう。"

#: 03.3-Stretching-Samples.md:43
#, fuzzy
msgid "Let's stretch"
msgstr "引き延ばしてみる"

#: 03.3-Stretching-Samples.md:45
#, fuzzy
msgid ""
"A sample that's fun to stretch and compress is the Amen Break. At normal rate,"
" we might imagine throwing it into a *drum 'n' bass* track:"
msgstr ""
"引き延ばしたり圧縮したりして楽しいサンプルは、定番のアーメン・ブレイクです。 通常のレートでは、*ドラムン・ベース（音楽ジャンルのひとつ）*のトラックを思わ"
"せます。"

#: 03.3-Stretching-Samples.md:48 03.4-Enveloped-Samples.md:17
#: 03.5-Partial-Samples.md:9 A.03-coded-beats.md:33 A.12-sample-slicing.md:22
#, no-wrap
msgid "sample :loop_amen"
msgstr "sample :loop_amen"

#: 03.3-Stretching-Samples.md:52
#, fuzzy
msgid ""
"However by changing the rate we can switch up genres. Try half speed for *old "
"school hip-hop*:"
msgstr ""
":loop_amenですが、レート（速度）を変えると、音楽のジャンルが切り替わったように聞こえます。 半分のスピードにすると、*オールドスクールのヒップホッ"
"プ*に。"

#: 03.3-Stretching-Samples.md:55 03.5-Partial-Samples.md:16
#, no-wrap
msgid "sample :loop_amen, rate: 0.5"
msgstr "sample :loop_amen, rate: 0.5"

#: 03.3-Stretching-Samples.md:59
#, fuzzy
msgid "If we speed it up, we enter *jungle* territory:"
msgstr "スピードを上げると、*ジャングル*のジャンルになりますね。"

#: 03.3-Stretching-Samples.md:61
#, no-wrap
msgid "sample :loop_amen, rate: 1.5"
msgstr "sample :loop_amen, rate: 1.5"

#: 03.3-Stretching-Samples.md:65
#, fuzzy
msgid ""
"Now for our final party trick - let's see what happens if we use a negative ra"
"te:"
msgstr "では、パーティーの最後の仕掛けに、マイナスのレートを使うと何が起きるでしょうか。"

#: 03.3-Stretching-Samples.md:68
#, no-wrap
msgid "sample :loop_amen, rate: -1"
msgstr "sample :loop_amen, rate: -1"

#: 03.3-Stretching-Samples.md:72
#, fuzzy
msgid ""
"Woah! It plays it *backwards*! Now try playing with lots of different samples "
"at different rates. Try very fast rates. Try crazy slow rates. See what intere"
"sting sounds you can produce."
msgstr ""
"ワオ！逆再生！いろいろな異なったサンプルで、異なったレートで演奏してみましょう。ものすごく速い数値や、おかしなくらいゆっくりになる数値を使って、どんなおもし"
"ろいサウンドを作れるか、試してみましょう。"

#: 03.3-Stretching-Samples.md:76
#, fuzzy
msgid "A Simple Explanation of Sample Rate"
msgstr "サンプル・レートの解説"

#: 03.3-Stretching-Samples.md:78
#, fuzzy
msgid ""
"A useful way to think of samples is as springs. Playback rate is like squashin"
"g and stretching the spring. If you play the sample at rate 2, you're *squashi"
"ng the spring* to half its normal length. The sample therefore takes half the "
"amount of time to play as it's shorter. If you play the sample at half rate, y"
"ou're *stretching the spring* to double its length. The sample therefore takes"
" twice the amount of time to play as it's longer. The more you squash (higher "
"rate), the shorter it gets, the more you stretch (lower rate), the longer it g"
"ets."
msgstr ""
"サンプルは、バネのように考えると便利です。再生速度（プレイバック）は、バネを縮めたり伸ばしたりするようなものです。もしサンプルをレート 2 で再生した場合、"
"通常の長さの半分に、*バネを縮める*ことになります。ですので、サンプルは半分の時間で演奏するので、より短くなります。もしサンプルを半分のレートで再生した場合"
"、2倍の長さに*バネを伸ばす*ことになります。そのため、サンプルは再生に2倍の時間をかけるため、より長くなるのです。もっと縮める（レートを上げる）と、短く再"
"生され、さらに伸ばす（レートを下げる）と、さらに長く再生されます。"

#: 03.3-Stretching-Samples.md:87
#, fuzzy
msgid ""
"Compressing a spring increases its density (the number of coils per cm) - this"
" is similar to the sample sounding *higher pitched*. Stretching the spring dec"
"reases its density and is similar to the sound having a *lower pitch*."
msgstr ""
"バネを縮めることは、その密度（1cm あたりのコイルの数）を増やすことです。これは*高いピッチ（音程）*のサンプルに近づくことになります。バネを伸ばすことは"
"、密度を減らすことで、*低いピッチ（音程）*のサウンドに近づいていきます。"

#: 03.3-Stretching-Samples.md:93
#, fuzzy
msgid "The Maths Behind Sample Rate"
msgstr "サンプル・レートの背後にある計算"

#: 03.3-Stretching-Samples.md:95
#, fuzzy
msgid ""
"(This section is provided for those that are interested in the details. Please"
" feel free to skip it...)"
msgstr "（このセクションはさらに細かい部分に興味がある人向けです。飛ばしても構いませんよ・・・。）"

#: 03.3-Stretching-Samples.md:98
#, fuzzy
msgid ""
"As we saw above, a sample is represented by a big long list of numbers represe"
"nting where the speaker should be through time. We can take this list of numbe"
"rs and use it to draw a graph which would look similar to this:"
msgstr ""
"上記で見てきたように、サンプルは、スピーカーが一定の時間でどのように振動すべきかを表現した長大な 数値のリストによって表されています。この数値のリストで、こ"
"れと同じようなグラフを描いてみます。"

#: 03.3-Stretching-Samples.md:103
msgid "![sample graph](../images/tutorial/sample.png)"
msgstr ""

#: 03.3-Stretching-Samples.md:105
#, fuzzy
msgid ""
"You might have seen pictures like this before. It's called the *waveform* of a"
" sample. It's just a graph of numbers. Typically a waveform like this will hav"
"e 44100 points of data per second (this is due to the Nyquist-Shannon sampling"
" theorem). So, if the sample lasts for 2 seconds, the waveform will be represe"
"nted by 88200 numbers which we would feed to the speaker at a rate of 44100 po"
"ints per second. Of course, we could feed it at double rate which would be 882"
"00 points per second. This would therefore take only 1 second to play back. We"
" could also play it back at half rate which would be 22050 points per second t"
"aking 4 seconds to play back."
msgstr ""
"あなたはこれと同じような図を、以前に見たことがあるかも知れません。これはサンプルの*波形*と呼ばれるものです。これは数値のグラフです。このような波形はだいた"
"い、1秒間に44100ポイントのデータを有しています（これはナイキスト・シャノンのサンプリング定理によるものです）。サンプルが2秒間続くなら、スピーカーに1"
"秒間に44100ポイントのレート（長さ）を与えることで88200の数値で表現されます。もちろん、1秒間に88200ポイントで、2倍のレートとすることもできま"
"す。ですので、これは1秒間で再生されます。1秒間に22050ポイントで、半分のレートで再生することも可能です。この場合、4秒で再生されます。"

#: 03.3-Stretching-Samples.md:116
#, fuzzy
msgid "The duration of the sample is affected by the playback rate:"
msgstr "サンプルのデュレーションは、再生するレートに影響を与えます。"

#: 03.3-Stretching-Samples.md:118
#, fuzzy
msgid "Doubling the playback rate halves the playback time,"
msgstr "2倍の再生レートは、再生時間を半分にする"

#: 03.3-Stretching-Samples.md:119
#, fuzzy
msgid "Halving the playback rate doubles the playback time,"
msgstr "半分の再生レートは、再生時間を2倍にする"

#: 03.3-Stretching-Samples.md:120
#, fuzzy
msgid "Using a playback rate of one fourth quadruples the playback time,"
msgstr "4分の1の再生レートは、再生時間を4倍にする"

#: 03.3-Stretching-Samples.md:121
#, fuzzy
msgid "Using a playback rate of 1/10 makes playback last 10 times longer."
msgstr "10分の1の再生レートは、10倍長く再生させる"

#: 03.3-Stretching-Samples.md:123
#, fuzzy
msgid "We can represent this with the formula:"
msgstr "これを以下の数式で表します。"

#: 03.3-Stretching-Samples.md:125
#, no-wrap
msgid "new_sample_duration = (1 / rate) * sample_duration "
msgstr "new_sample_duration = (1 / rate) * sample_duration "

#: 03.3-Stretching-Samples.md:129
#, fuzzy
msgid ""
"Changing the playback rate also affects the pitch of the sample. The frequency"
" or pitch of a waveform is determined by how fast it moves up and down. Our br"
"ains somehow turn fast movement of speakers into high notes and slow movement "
"of speakers into low notes. This is why you can sometimes even see a big bass "
"speaker move as it pumps out super low bass - it's actually moving a lot slowe"
"r in and out than a speaker producing higher notes."
msgstr ""
"再生レートを変えることは、サンプルのピッチ（音程）にも影響します。周波数や波形のピッチがどれくらい速く上下に動くかで決定されます。我々の脳は、どういうわけか"
"、スピーカーの速い動きを高い音階に、遅い動きを低い音階に捉えます。だからあなたは時々、大きなベース・スピーカーが超低音を吐き出すのを見ることができるのです。"
"実際に高い音を出しているときのスピーカーよりも、ゆっくりと振動しているのです。"

#: 03.3-Stretching-Samples.md:137
#, fuzzy
msgid ""
"If you take a waveform and squash it it will move up and down more times per s"
"econd. This will make it sound higher pitched. It turns out that doubling the "
"amount of up and down movements (oscillations) doubles the frequency. So, *pla"
"ying your sample at double rate will double the frequency you hear it*. Also, "
"*halving the rate will halve the frequency*. Other rates will affect the frequ"
"ency accordingly."
msgstr ""
"もし波形を取り出して圧縮したら、1秒間でさらに頻繁に上下します。これがサウンドをより高い音にするのです。 上下の運動を2倍にすると、周波数が2倍になるという"
"ことになります。 そのため、*サンプルを2倍のレートで再生すると、聞こえる周波数が2倍になる*ということです。 また、*レートを半分にすると、周波数が半分に"
"なる*ということでもあります。他のレートはそれに応じて周波数に影響します。"

#: 03.4-Enveloped-Samples.md:1
#, fuzzy
msgid "3.4 Enveloped Samples"
msgstr "3.4 エンベロープ・サンプル"

#: 03.4-Enveloped-Samples.md:3
#, fuzzy
msgid "Enveloped Samples"
msgstr "エンベロープ・サンプル"

#: 03.4-Enveloped-Samples.md:5
#, fuzzy
msgid ""
"It is also possible to modify the *duration* and *amplitude* of a sample using"
" an ADSR envelope. However, this works slightly differently to the ADSR envelo"
"pe available on synths. Sample envelopes only allow you to reduce the amplitud"
"e and duration of a sample - and never to increase it. The sample will stop wh"
"en either the sample has finished playing or the envelope has completed - whic"
"hever is first. So, if you use a very long `release:`, it won't extend the dur"
"ation of the sample."
msgstr ""
"ADSRエンベロープを用いて、サンプルのデュレーション（再生時間）とアンプ（音量）を編集することもできます。しかしながら、シンセのADSRエンベロープとは少"
"しだけ異なったように作用します。サンプルに使用するエンベロープは、サンプルのアンプとデュレーションを減らすことしかできません。決して増やすことはできないので"
"す。サンプルは、それが再生され終わったときか、エンベロープが完了したときのいずれかで停止します。どちらが先でも停止します。非常に長い`release:`を使"
"ったとしても、サンプルのデュレーションは延長されません。"

#: 03.4-Enveloped-Samples.md:13
#, fuzzy
msgid "Amen Envelopes"
msgstr "アーメン・エンベロープ"

#: 03.4-Enveloped-Samples.md:15
#, fuzzy
msgid "Let's return to our trusty friend the Amen Break:"
msgstr "わたしたちのお気に入りのフレーズ、アーメン・ブレイクに戻ります。"

#: 03.4-Enveloped-Samples.md:21
#, fuzzy
msgid ""
"With no opts, we hear the full sample at full amplitude. If we want to fade th"
"is in over 1 second we can use the `attack:` param:"
msgstr ""
"オプションが設定されていない場合、全サンプルがフル・アンプ（最大音量）で聞こえます。 もし1秒間のフェード・インを使いたい場合、`attack:`パラメータ"
"を使います。 （フェード・インとは徐々に音が大きくなることです。）"

#: 03.4-Enveloped-Samples.md:24
#, no-wrap
msgid "sample :loop_amen, attack: 1"
msgstr "sample :loop_amen, attack: 1"

#: 03.4-Enveloped-Samples.md:28
#, fuzzy
msgid "For a shorter fade in, choose a shorter attack value:"
msgstr "もっと短いフェード・インの場合は、`attack:`の値を小さくします。"

#: 03.4-Enveloped-Samples.md:30
#, no-wrap
msgid "sample :loop_amen, attack: 0.3"
msgstr "sample :loop_amen, attack: 0.3"

#: 03.4-Enveloped-Samples.md:34
#, fuzzy
msgid "Auto Sustain"
msgstr "オート・サステイン"

#: 03.4-Enveloped-Samples.md:36
#, fuzzy
msgid ""
"Where the ADSR envelope's behaviour differs from the standard synth envelope i"
"s in the *sustain* value. In the standard synth envelope, the sustain defaulte"
"d to 0 unless you set it manually. With samples, the sustain value defaults to"
" an *automagical* value - the time left to play the rest of the sample. This i"
"s why we hear the full sample when we pass no defaults. If the attack, decay, "
"sustain and release values were all 0 we'd never hear a peep. Sonic Pi therefo"
"re calculates how long the sample is, deducts any attack, decay and release ti"
"mes and uses the result as your sustain time. If the attack, decay and release"
" values add up to more than the duration of the sample, the sustain is simply "
"set to 0."
msgstr ""
"ADSR エンベロープの特徴が標準的なシンセ・エンベロープと異なる点は、*サステイン（持続時間）*の値です。 標準的なシンセのエンベロープでは、もし手動で変"
"更しなければ、 0 に設定されています。ですが、 サンプルでは、サステインの値は通常、*魔法のように全自動*にセットされます。サステインの時間は、サンプルの"
"残りを 演奏するように調整されます。デフォルトの値を渡さないときに、サンプルがフルで流れるのはこのためです。 アタック、ディケイ、サステイン、リリース(この"
"４つの頭文字がADSR)の値が全て 0 のときは、何の音も聞こえません。 Sonic Piはサンプルの長さがどれくらいなのか計算し、アタック、ディケイ、リリ"
"ース・タイムを差し引いて、 あなたのサステイン・タイムの結果を使用します。もし、アタック、ディケイ、リリースの値が サンプルのデュレーションより長く追加され"
"た場合、サステインは 0 にセットされます。"

#: 03.4-Enveloped-Samples.md:48
#, fuzzy
msgid "Fade Outs"
msgstr "フェード・アウト"

#: 03.4-Enveloped-Samples.md:50
#, fuzzy
msgid ""
"To explore this, let's consider our Amen break in more detail. If we ask Sonic"
" Pi how long the sample is:"
msgstr "これまでのことをを求するために、我らがアーメン・ブレイクをさらに詳細にみてみます。Sonic Piにサンプルがどれくらいの長さなのか尋ねてみます。"

#: 03.4-Enveloped-Samples.md:53
#, no-wrap
msgid "print sample_duration :loop_amen"
msgstr "print sample_duration :loop_amen"

#: 03.4-Enveloped-Samples.md:57
#, fuzzy
msgid ""
"It will print out `1.753310657596372` which is the length of the sample in sec"
"onds. Let's just round that to `1.75` for convenience here. Now, if we set the"
" release to `0.75`, something surprising will happen:"
msgstr ""
"1秒間のサンプルの長さは 1.753310657596372 と答えるでしょう。ここでは、便宜的に1.75 としますリリース・タイムを 0.75 にすると、"
"驚くべきことが起こります。"

#: 03.4-Enveloped-Samples.md:61
#, no-wrap
msgid "sample :loop_amen, release: 0.75"
msgstr "sample :loop_amen, release: 0.75"

#: 03.4-Enveloped-Samples.md:65
#, fuzzy
msgid ""
"It will play the first second of the sample at full amplitude before then fadi"
"ng out over a period of 0.75 seconds. This is the *auto sustain* in action. By"
" default, the release always works from the end of the sample. If our sample w"
"as 10.75 seconds long, it would play the first 10 seconds at full amplitude be"
"fore fading out over 0.75s."
msgstr ""
"サンプルの最初の1秒をフル・アンプで再生し、最後の 0.75 秒はフェード・アウトします。これが *オート・サステイン*の動きです。標準では、`releas"
"e:`はいつもサンプルの最後から動作します。 もしサンプルの長さが10.75 秒なら、最初の10秒はフル・アンプで再生し、最後の0.75秒はフェード・アウト"
"します。"

#: 03.4-Enveloped-Samples.md:71
#, fuzzy
msgid "Remember: by default, `release:` fades out at the end of a sample."
msgstr "通常、`release:`はサンプルの最後でフェード・アウトするということを覚えておいてください。"

#: 03.4-Enveloped-Samples.md:73
#, fuzzy
msgid "Fade In and Out"
msgstr "フェード・インとフェード・アウト"

#: 03.4-Enveloped-Samples.md:75
#, fuzzy
msgid ""
"We can use both `attack:` and `release:` together with the auto sustain behavi"
"our to fade both in and out over the duration of the sample:"
msgstr ""
"サンプルのデュレーションの間にフェード・アウトとインを行うには `attack:`と`release:`の両方を使うことができます。オート・サステインの仕組"
"みと一緒に、 使用できます。"

#: 03.4-Enveloped-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, attack: 0.75, release: 0.75"
msgstr "sample :loop_amen, attack: 0.75, release: 0.75"

#: 03.4-Enveloped-Samples.md:82
#, fuzzy
msgid ""
"As the full duration of the sample is 1.75s and our attack and release phases "
"add up to 1.5s, the sustain is automatically set to 0.25s. This allows us to e"
"asily fade the sample in and out."
msgstr ""
"サンプルのアーメンブレイク全体のデュレーションは1.75秒なので、 アタックとリリースの時間が1.5秒まで追加されると、 サステインは自動的に0.25秒にセ"
"ットされます。 これで簡単にサンプルをフェード・イン、アウトすることができます。"

#: 03.4-Enveloped-Samples.md:86
#, fuzzy
msgid "Explicit sustain"
msgstr "明白なサステイン"

#: 03.4-Enveloped-Samples.md:88
#, fuzzy
msgid ""
"We can easily get back to our normal synth ADSR behaviour by manually setting "
"`sustain:` to a value such as 0:"
msgstr "手動で`sustain:`を 0 などにセットして、通常のADSRシンセの挙動に簡単に戻すこともできます。"

#: 03.4-Enveloped-Samples.md:91
#, no-wrap
msgid "sample :loop_amen, sustain: 0, release: 0.75"
msgstr "sample :loop_amen, sustain: 0, release: 0.75"

#: 03.4-Enveloped-Samples.md:95
#, fuzzy
msgid ""
"Now, our sample only plays for 0.75 seconds in total. With the default for `at"
"tack:` and `decay:` at 0, the sample jumps straight to full amplitude, sustain"
"s there for 0s then releases back down to 0 amplitude over the release period "
"- 0.75s."
msgstr ""
"いま、サンプルはトータルで0.75秒間だけ再生されました。`attack:`と`decay:`の通常値0ですので、 サンプルはフル・アンプ（最大音量）に直接"
"変わり、0秒間サスティン(持続)し、リリースの0.75秒間で0アンプに戻ります。"

#: 03.4-Enveloped-Samples.md:100
#, fuzzy
msgid "Percussive cymbals"
msgstr "打楽器のシンバル"

#: 03.4-Enveloped-Samples.md:102
#, fuzzy
msgid ""
"We can use this behaviour to good effect to turn longer sounding samples into "
"shorter, more percussive versions. Consider the sample `:drum_cymbal_open`:"
msgstr "この仕様を、長いサウンドのサンプルを短く、より打楽器的にするために、効果的に使うことができます。 `:drum_cymbal_open`:"

#: 03.4-Enveloped-Samples.md:106
#, no-wrap
msgid "sample :drum_cymbal_open"
msgstr "sample :drum_cymbal_open"

#: 03.4-Enveloped-Samples.md:110
#, fuzzy
msgid ""
"You can hear the cymbal sound ringing out over a period of time. However, we c"
"an use our envelope to make it more percussive:"
msgstr "上のサンプルでは一定時間シンバルの音が鳴っているのが聞こえます。ですが、もっとパーカッシブ（打楽器的）にしてみましょう。"

#: 03.4-Enveloped-Samples.md:113
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0, release: 0.1"
msgstr "sample :drum_cymbal_open, attack: 0.01, sustain: 0, release: 0.1"

#: 03.4-Enveloped-Samples.md:117
#, fuzzy
msgid ""
"You can then emulate hitting the cymbal and then dampening it by increasing th"
"e sustain period:"
msgstr "シンバルを叩いた後のサスティン（持続時間）を増やすことで、響かせるような効果も出すすることができます。"

#: 03.4-Enveloped-Samples.md:120
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1"
msgstr "sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1"

#: 03.4-Enveloped-Samples.md:124
#, fuzzy
msgid ""
"Now go and have fun putting envelopes over the samples. Try changing the rate "
"too for really interesting results."
msgstr "今すぐ、サンプルを楽しくさせるエンベロープをいじってみましょう。 面白い結果を得るために数値を思いきり変更してみましょう。"

#: 03.5-Partial-Samples.md:1
#, fuzzy
msgid "3.5 Partial Samples"
msgstr "3.5 部分的なサンプル"

#: 03.5-Partial-Samples.md:3
#, fuzzy
msgid "Partial Samples"
msgstr "部分的なサンプル"

#: 03.5-Partial-Samples.md:5
#, fuzzy
msgid ""
"This section will conclude our exploration of Sonic Pi's sample player. Let's "
"do a quick recap. So far we've looked at how we can trigger samples:"
msgstr ""
"このセクションでは、Sonic Piのサンプルの再生について私たちが探求してきたことをまとめます。 簡単にまとめてみましょう。 これまで、サンプルを再生する"
"方法をみてきました。"

#: 03.5-Partial-Samples.md:13
#, fuzzy
msgid ""
"We then looked at how we can change the rate of samples such as playing them a"
"t half speed:"
msgstr "まず、サンプルのレート（速さ）を変更する方法を見つけて、このように半分の速度で再生してみました。"

#: 03.5-Partial-Samples.md:20
#, fuzzy
msgid "Next, we looked at how we could fade a sample in (let's do it at half speed):"
msgstr "次に、サンプルを徐々に大きくするフェードインを知りました。 （半分の速度でやってみましょう）"

#: 03.5-Partial-Samples.md:23
#, no-wrap
msgid "sample :loop_amen, rate: 0.5, attack: 1"
msgstr "sample :loop_amen, rate: 0.5, attack: 1"

#: 03.5-Partial-Samples.md:27
#, fuzzy
msgid ""
"We also looked at how we could use the start of a sample percussively by givin"
"g `sustain:` an explicit value and setting both the attack and release to be s"
"hort values:"
msgstr "また、`sustain:`に明確な値とアタックとリリースの両方の短い値を設定することで、 サンプルを打楽器のように使用する方法を見つけました。"

#: 03.5-Partial-Samples.md:31
#, no-wrap
msgid "sample :loop_amen, rate: 2, attack: 0.01, sustain: 0, release: 0.35"
msgstr "sample :loop_amen, rate: 2, attack: 0.01, sustain: 0, release: 0.35"

#: 03.5-Partial-Samples.md:35
#, fuzzy
msgid ""
"However, wouldn't it be nice if we didn't have to always start at the beginnin"
"g of the sample? Wouldn't it also be nice if we didn't have to always finish a"
"t the end of the sample?"
msgstr "では、いつもサンプルの先頭から開始する必要はあるのでしょうか？ そして、いつもサンプルの最後まで終了する必要はあるのでしょうか？"

#: 03.5-Partial-Samples.md:39
#, fuzzy
msgid "Choosing a starting point"
msgstr "開始点の選択"

#: 03.5-Partial-Samples.md:41
#, fuzzy
msgid ""
"It is possible to choose an arbitrary starting point in the sample as a value "
"between 0 and 1 where 0 is the start of the sample, 1 is the end and 0.5 is ha"
"lf way through the sample. Let's try playing only the last half of the amen br"
"eak:"
msgstr ""
"サンプルのどこからでも、好きな場所を選んで音を再生することが可能です。 0はサンプルの開始で、1は終了です。0.5はサンプルの途中です。 アーメンブレイクの"
"最後の半分を再生してみましょう。"

#: 03.5-Partial-Samples.md:46
#, no-wrap
msgid "sample :loop_amen, start: 0.5"
msgstr "sample :loop_amen, start: 0.5"

#: 03.5-Partial-Samples.md:50
#, fuzzy
msgid "How about the last quarter of the sample:"
msgstr "どのようにすればサンプルの最後の1/4を再生できますか？"

#: 03.5-Partial-Samples.md:52
#, no-wrap
msgid "sample :loop_amen, start: 0.75"
msgstr "sample :loop_amen, start: 0.75"

#: 03.5-Partial-Samples.md:56
#, fuzzy
msgid "Choosing a finish point"
msgstr "終了点を選択する"

#: 03.5-Partial-Samples.md:58
#, fuzzy
msgid ""
"Similarly, it is possible to choose an arbitrary finish point in the sample as"
" a value between 0 and 1. Let's finish the amen break half way through:"
msgstr "同様に、サンプルの0から１の間の値を終了点として選ぶことができます。 アーメンブレイクの半分までで終わらせてみましょう。"

#: 03.5-Partial-Samples.md:62 A.12-sample-slicing.md:62
#, no-wrap
msgid "sample :loop_amen, finish: 0.5"
msgstr "sample :loop_amen, finish: 0.5"

#: 03.5-Partial-Samples.md:66
#, fuzzy
msgid "Specifying start and finish"
msgstr "開始と終了の指定"

#: 03.5-Partial-Samples.md:68
#, fuzzy
msgid ""
"Of course, we can combine these two to play arbitrary segments of the audio fi"
"le. How about only a small section in the middle:"
msgstr ""
"もちろん、私たちは好きな部分を再生するために、これまでの開始と終了の２つを組み合わせることができます。 どのようにすれば真ん中あたりの短い場所だけを選べるの"
"でしょうか？"

#: 03.5-Partial-Samples.md:71
#, no-wrap
msgid "sample :loop_amen, start: 0.4, finish: 0.6"
msgstr "sample :loop_amen, start: 0.4, finish: 0.6"

#: 03.5-Partial-Samples.md:75
#, fuzzy
msgid "What happens if we choose a start position after the finish position?"
msgstr "もし、終了位置のあとを、開始位置として選ぶとどうなるでしょう？"

#: 03.5-Partial-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, start: 0.6, finish: 0.4"
msgstr "sample :loop_amen, start: 0.6, finish: 0.4"

#: 03.5-Partial-Samples.md:82
#, fuzzy
msgid "Cool! It plays it backwards!"
msgstr "かっこいい！！！逆再生になりますね！"

#: 03.5-Partial-Samples.md:84
#, fuzzy
msgid "Combining with rate"
msgstr "レートと組み合わせ"

#: 03.5-Partial-Samples.md:86
#, fuzzy
msgid ""
"We can combine this new ability to play arbitrary segments of audio with our f"
"riend `rate:`. For example, we can play a very small section of the middle of "
"the amen break very slowly:"
msgstr "そして新しい機能として、すでに学んだ`rate:`と`start:`(開始)と`finish:`(終了)を使った部分再生を組み合わせることができます。"

#: 03.5-Partial-Samples.md:90
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2"
msgstr "sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2"

#: 03.5-Partial-Samples.md:94
#, fuzzy
msgid "Combining with envelopes"
msgstr "エンベロープとの組み合わせ"

#: 03.5-Partial-Samples.md:96
#, fuzzy
msgid ""
"Finally, we can combine all of this with our ADSR envelopes to produce interes"
"ting results:"
msgstr "そして、面白い結果を創りだすために、ADSRエンベロープと、いままでの全てを組み合わせることができます。"

#: 03.5-Partial-Samples.md:99
#, no-wrap
msgid ""
"sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: "
"1"
msgstr ""
"sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: "
"1"

#: 03.5-Partial-Samples.md:103
#, fuzzy
msgid "Now go and have a play mashing up samples with all of this fun stuff..."
msgstr "今すぐ、サンプルとこれまでに紹介した楽しい内容を組み合わせて演奏してみましょう！"

#: 03.6-External-Samples.md:1
#, fuzzy
msgid "3.6 External Samples"
msgstr "3.6 外部サンプル"

#: 03.6-External-Samples.md:3
#, fuzzy
msgid "External Samples"
msgstr "外部サンプル"

#: 03.6-External-Samples.md:5
#, fuzzy
msgid ""
"Whilst the built-in samples can get you up and started quickly, you might wish"
" to experiment with other recorded sounds in your music. Sonic Pi totally supp"
"orts this. First though, let's have a quick discussion on the portability of y"
"our piece."
msgstr ""
"内蔵のサンプルは、すぐに使用でき、再生することができる一方で、 あなたは別に録音された音を試してみたいと願うかもしれません。 Sonic Piは完全にこの願"
"いを叶えます。 まずは、あなたの部品（録音した音）の携帯性について、確認してみましょう。"

#: 03.6-External-Samples.md:10
msgid "Portability"
msgstr ""

#: 03.6-External-Samples.md:12
#, fuzzy
msgid ""
"When you compose your piece purely with built-in synths and samples, the code "
"is all you need to faithfully reproduce your music. Think about that for a mom"
"ent - that's amazing! A simple piece of text you can email around or stick in "
"a [Gist](https://gist.github.com) represents everything you need to reproduce "
"your sounds. That makes it *really easy to share* with your friends as they ju"
"st need to get hold of the code."
msgstr ""
"あなたが、内臓のシンセやサンプルだけを使って作曲した場合、 コードだけがは、あなたが音楽を忠実に再生ために必要なものになります。でもちょっと 考えてみてくだ"
"さい。それは、実はとても凄いことなのですよね！あなたの音楽を忠実に再現する作品は、 テキストによるシンプルなものなので、電子メールで周りに送ったり、 [Gi"
"st](https://gist.github.com)に埋め込んで公開することができます。コードを持っていれば 友人と本当に簡単に共有することができます。"

#: 03.6-External-Samples.md:19
#, fuzzy
msgid ""
"However, if you start using your own pre-recorded samples, you lose this porta"
"bility. This is because to reproduce your music other people not only need you"
"r code, they need your samples too. This limits the ability for others to mani"
"pulate, mash-up and experiment with your work. Of course this shouldn't stop y"
"ou from using your own samples, it's just something to consider."
msgstr ""
"しかし、もしあなたが、自身で記録したサンプルを使ってしまうと、この携帯性が 失われてしまいます。なぜならば、あなたの音楽を他の人達が再現しようとしても、 あ"
"なたのコードだけでは再生することができず、記録したサンプルが必要になってしまうからです。 この事は、あなたの音楽を他の人が操作したり編集したり、試してみるこ"
"とを制限してしまう ことがあるということです。もちろん、あなた自身が録音したサンプルを使うことを 止めるということではなく、方法（データを送って、正しく共有"
"するなど）に配慮していけばよいという事です。"

#: 03.6-External-Samples.md:26
#, fuzzy
msgid "Local Samples"
msgstr "自分で録音した（ローカルな）サンプル"

#: 03.6-External-Samples.md:28
#, fuzzy
msgid ""
"So how do you play any arbitrary WAV, AIFF or FLAC file on your computer? All "
"you need to do is pass the path of that file to `sample`:"
msgstr ""
"では、どうやって、あなたが録音したWAVファイルやAIFFファイルをコンピュータで再生するのでしょうか？ `sample`のファイルを置く場所を指定（パスを"
"通す）するだけで、再生できるようになります。"

#: 03.6-External-Samples.md:31
#, no-wrap
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""
msgstr ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""

#: 03.6-External-Samples.md:38
#, fuzzy
msgid ""
"Sonic Pi will automatically load and play the sample. You can also pass all th"
"e standard params you're used to passing `sample`:"
msgstr ""
"Sonic Piは自動的にサンプルを読み込んで再生します。あなたは、`sample`に今まで使ってきた全てのパラメータを、あなたが録音した音に使うことができ"
"ます。"

#: 03.6-External-Samples.md:41
#, no-wrap
#, fuzzy
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3"
msgstr ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""

#: 03.7-Sample-Packs.md:1
msgid "3.7 Sample Packs"
msgstr ""

#: 03.7-Sample-Packs.md:3
msgid "Sample Packs"
msgstr ""

#: 03.7-Sample-Packs.md:5
msgid ""
"**Note: this section of the tutorial covers the advanced topic of working with"
" large directories of your own samples. This will be the case if you've downlo"
"aded or bought your own sample packs and wish to use them within Sonic Pi.**"
msgstr ""

#: 03.7-Sample-Packs.md:10
msgid "**Feel free to skip this if you're happy working with the built-in samples.**"
msgstr ""

#: 03.7-Sample-Packs.md:13
msgid ""
"When working with large folders of external samples it can be cumbersome to ha"
"ve to type the whole path every time to trigger an individual sample."
msgstr ""

#: 03.7-Sample-Packs.md:17
msgid "For example, say you have the following folder on your machine:"
msgstr ""

#: 03.7-Sample-Packs.md:19
#, no-wrap
msgid "/path/to/my/samples/"
msgstr "/path/to/my/samples/"

#: 03.7-Sample-Packs.md:23
msgid "When we look inside that folder we find the following samples:"
msgstr ""

#: 03.7-Sample-Packs.md:25 03.7-Sample-Packs.md:86
msgid "`100_A#_melody1.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:26 03.7-Sample-Packs.md:87
msgid "`100_A#_melody2.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:27 03.7-Sample-Packs.md:88
msgid "`100_A#_melody3.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:28 03.7-Sample-Packs.md:89
msgid "`120_A#_melody4.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:29 03.7-Sample-Packs.md:90
msgid "`120_Bb_guit1.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:30 03.7-Sample-Packs.md:91
msgid "`120_Bb_piano1.wav`"
msgstr ""

#: 03.7-Sample-Packs.md:32
msgid "Typically in order to play the piano sample we can use the full path:"
msgstr ""

#: 03.7-Sample-Packs.md:34
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_piano1.wav\""
msgstr "sample \"/path/to/my/samples/120_Bb_piano1.wav\""

#: 03.7-Sample-Packs.md:38
msgid "If we want to then play the guitar sample we can use its full path too:"
msgstr ""

#: 03.7-Sample-Packs.md:40
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_guit.wav\""
msgstr "sample \"/path/to/my/samples/120_Bb_guit.wav\""

#: 03.7-Sample-Packs.md:44
msgid ""
"However, both of these calls to sample requires us to *know* the names of the "
"samples within our directory. What if we just want to listen to each sample in"
" turn quickly?"
msgstr ""

#: 03.7-Sample-Packs.md:48
msgid "Indexing Sample Packs"
msgstr ""

#: 03.7-Sample-Packs.md:50
msgid ""
"If we want to play the first sample in a directory we just need to pass the di"
"rectory's name to `sample` and the index `0` as follows:"
msgstr ""

#: 03.7-Sample-Packs.md:53
#, no-wrap
msgid "sample \"/path/to/my/samples/\", 0"
msgstr "sample \"/path/to/my/samples/\", 0"

#: 03.7-Sample-Packs.md:57
msgid "We can even make a shortcut to our directory path using a variable:"
msgstr ""

#: 03.7-Sample-Packs.md:59
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 0"
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 0"

#: 03.7-Sample-Packs.md:64
msgid ""
"Now, if we want to play the second sample in our directory, we just need to ad"
"d 1 to our index:"
msgstr ""

#: 03.7-Sample-Packs.md:67
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 1"
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 1"

#: 03.7-Sample-Packs.md:72
msgid ""
"Notice that we no longer need to know the names of the samples in the director"
"y - we just need to know the directory itself (or have a shortcut to it). If w"
"e ask for an index which is larger than the number of samples, it simply wraps"
" round just like Rings. Therefore, whatever number we use we're guaranteed to "
"get one of the samples in that directory."
msgstr ""

#: 03.7-Sample-Packs.md:79
msgid "Filtering Sample Packs"
msgstr ""

#: 03.7-Sample-Packs.md:81
msgid ""
"Usually indexing is enough, but sometimes we need more power to sort and organ"
"ise our samples. Luckily many sample packs add useful information in the filen"
"ames. Let's take another look at the sample file names in our directory:"
msgstr ""

#: 03.7-Sample-Packs.md:93
msgid ""
"Notice that in these filenames we have quite a bit of information. Firstly, we"
" have the BPM of the sample (beats per minute) at the start. So, the piano sam"
"ple is at 120 BPM and our first three melodies are at 100 BPM. Also, our sampl"
"e names contain the key. So the guitar sample is in Bb and the melodies are in"
" A#. This information is very useful for mixing in these samples with our othe"
"r code. For example, we know we can only play the piano sample with code that'"
"s in 120 BPM and in the key of Bb."
msgstr ""

#: 03.7-Sample-Packs.md:102
msgid ""
"It turns out that we can use this particular naming convention of our sample s"
"ets in the code to help us filter out the ones we want. For example, if we're "
"working at 120 BPM, we can filter down to all the samples that contain the str"
"ing `\"120\"` with the following:"
msgstr ""

#: 03.7-Sample-Packs.md:107
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\""
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\""

#: 03.7-Sample-Packs.md:112
msgid ""
"This will play us the first match. If we want the second match we just need to"
" use the index:"
msgstr ""

#: 03.7-Sample-Packs.md:115
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", 1"
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", 1"

#: 03.7-Sample-Packs.md:120
msgid ""
"We can even use multiple filters at the same time. For example, if we want a s"
"ample whose filename contains both the substrings \"120\" and \"A#\" we can find i"
"t easily with the following code:"
msgstr ""

#: 03.7-Sample-Packs.md:124
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"A#\""
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"A#\""

#: 03.7-Sample-Packs.md:129
msgid "Finally, we're still free to add our usual opts to the call to `sample`:"
msgstr ""

#: 03.7-Sample-Packs.md:131
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"Bb\", 1, lpf: 70, amp: 2"
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"Bb\", 1, lpf: 70, amp: 2"

#: 03.7-Sample-Packs.md:136
msgid "Sources"
msgstr ""

#: 03.7-Sample-Packs.md:138
msgid ""
"The sample filter pre-arg system understands two types of information: sources"
" and filters. Sources are information used to create the list of potential can"
"didates. A source can take two forms:"
msgstr ""

#: 03.7-Sample-Packs.md:142
msgid "\"/path/to/samples\" - a string representing a valid path to a directory"
msgstr ""

#: 03.7-Sample-Packs.md:143
msgid "\"/path/to/samples/foo.wav\" - a string representing a valid path to a sample"
msgstr ""

#: 03.7-Sample-Packs.md:145
msgid ""
"The `sample` fn will first gather all sources and use them to create a large l"
"ist of candidates. This list is constructed by first adding all valid paths an"
"d then by adding all the valid `.flac`, `.aif`, `.aiff`, `.wav`, `.wave` files"
" contained within the directories."
msgstr ""

#: 03.7-Sample-Packs.md:150
msgid "For example, take a look at the following code:"
msgstr ""

#: 03.7-Sample-Packs.md:152
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"samps2 = \"/path/to/my/samples2/\"\n"
"path = \"/path/to/my/samples3/foo.wav\"\n"
"sample samps, samps2, path, 0"
msgstr ""
"samps = \"/path/to/my/samples/\"\n"
"samps2 = \"/path/to/my/samples2/\"\n"
"path = \"/path/to/my/samples3/foo.wav\"\n"
"sample samps, samps2, path, 0"

#: 03.7-Sample-Packs.md:160
msgid ""
"Here, we're combining the contents of the samples within two directories and a"
"dding a specific sample. If `\"/path/to/my/samples/\"` contained 3 samples and `"
"\"/path/to/my/samples2/\"` contained 12, we'd have 16 potential samples to index"
" and filter (3 + 12 + 1)."
msgstr ""

#: 03.7-Sample-Packs.md:165
msgid ""
"By default, only the sample files within a directory are gathered into the can"
"didate list. Sometimes you might have a number of nested folders of samples yo"
"u wish to search and filter within. You can therefore do a recursive search fo"
"r all samples within all subfolders of a particular folder by adding `**` to t"
"he end of the path:"
msgstr ""

#: 03.7-Sample-Packs.md:171
#, no-wrap
msgid ""
"samps = \"/path/to/nested/samples/**\"\n"
"sample samps, 0"
msgstr ""
"samps = \"/path/to/nested/samples/**\"\n"
"sample samps, 0"

#: 03.7-Sample-Packs.md:176
msgid ""
"Take care though as searching through a very large set of folders may take a l"
"ong time. However, the contents of all folder sources are cached, so the delay"
" will only happen the first time."
msgstr ""

#: 03.7-Sample-Packs.md:180
msgid ""
"Finally, note that the sources *must go first*. If no source is given, then th"
"e set of built-in samples will be selected as the default list of candidates t"
"o work with."
msgstr ""

#: 03.7-Sample-Packs.md:184
msgid "Filters"
msgstr ""

#: 03.7-Sample-Packs.md:186
msgid ""
"Once you have a list of candidates you may use the following filtering types t"
"o further reduce the selection:"
msgstr ""

#: 03.7-Sample-Packs.md:189
msgid ""
"`\"foo\"` Strings will filter on substring occurrence within file name (minus di"
"rectory path and extension)."
msgstr ""

#: 03.7-Sample-Packs.md:190
msgid ""
"`/fo[oO]/` Regular Expressions will filter on pattern matching of file name (m"
"inus directory path and extension)."
msgstr ""

#: 03.7-Sample-Packs.md:191
msgid ""
"`:foo` - Keywords will filter candidates on whether the keyword is a direct ma"
"tch of the filename (minus directory path and extension)."
msgstr ""

#: 03.7-Sample-Packs.md:192
msgid ""
"`lambda{|a| ... }` - Procs with one argument will be treated as a candidate fi"
"lter or generator function. It will be passed the list of current candidates a"
"nd must return a new list of candidates (a list of valid paths to sample files"
")."
msgstr ""

#: 03.7-Sample-Packs.md:193
msgid ""
"`1` - Numbers will select the candidate with that index (wrapping round like a"
" ring if necessary)."
msgstr ""

#: 03.7-Sample-Packs.md:195
msgid ""
"For example, we can filter over all the samples in a directory containing the "
"string `\"foo\"` and play the first matching sample at half speed:"
msgstr ""

#: 03.7-Sample-Packs.md:199
#, no-wrap
msgid "sample \"/path/to/samples\", \"foo\", rate: 0.5"
msgstr "sample \"/path/to/samples\", \"foo\", rate: 0.5"

#: 03.7-Sample-Packs.md:203
msgid ""
"See the help for `sample` for many detailed usage examples. Note that the orde"
"ring of the filters is honoured."
msgstr ""

#: 03.7-Sample-Packs.md:206
msgid "Composites"
msgstr ""

#: 03.7-Sample-Packs.md:208
msgid ""
"Finally, you may use lists wherever you may place a source or filter. The list"
" will be automatically flattened and the contents will be treated as regular s"
"ources and filters. Therefore the following calls to `sample` are semantically"
" equivalent:"
msgstr ""

#: 03.7-Sample-Packs.md:213
#, no-wrap
msgid ""
"sample \"/path/to/dir\", \"100\", \"C#\"\n"
"sample [\"/path/to/dir\", \"100\", \"C#\"]\n"
"sample \"/path/to/dir\", [\"100\", \"C#\"]\n"
"sample [\"/path/to/dir\", [\"100\", [\"C#\"]]]"
msgstr ""
"sample \"/path/to/dir\", \"100\", \"C#\"\n"
"sample [\"/path/to/dir\", \"100\", \"C#\"]\n"
"sample \"/path/to/dir\", [\"100\", \"C#\"]\n"
"sample [\"/path/to/dir\", [\"100\", [\"C#\"]]]"

#: 03.7-Sample-Packs.md:220
msgid "Wrapping Up"
msgstr ""

#: 03.7-Sample-Packs.md:222
msgid ""
"This was an advanced section for people that need real power to manipulate and"
" use sample packs. If most of this section didn't make too much sense, don't w"
"orry. It's likely you don't need any of this functionality just yet. However, "
"you'll know when you do need it and you can come back and re-read this when yo"
"u start working with large directories of samples."
msgstr ""

#: 04-Randomisation.md:1
#, fuzzy
msgid "4 Randomisation"
msgstr "4 ランダム化"

#: 04-Randomisation.md:3
#, fuzzy
msgid "Randomisation"
msgstr "ランダム化"

#: 04-Randomisation.md:5
#, fuzzy
msgid ""
"A great way to add some interest into your music is using some random numbers."
" Sonic Pi has some great functionality for adding randomness to your music, bu"
"t before we start we need to learn a shocking truth: in Sonic Pi *random is no"
"t truly random*. What on earth does this mean? Well, let's see."
msgstr ""
"音楽にすこし面白さを加えるために、ランダムという素晴らしい方法があります。 Sonic Piは音楽にランダム性を追加するためにいくつかの素晴らしい機能を持っ"
"ていますが、 Sonic Piのランダムは、真のランダムではありません。これは一体何を意味しているのでしょう？ 勉強を開始する前に、この衝撃的な真実を見てい"
"きましょう。"

#: 04-Randomisation.md:11
#, fuzzy
msgid "Repeatability"
msgstr "再現性"

#: 04-Randomisation.md:13
#, fuzzy
msgid ""
"A really useful random function is `rrand` which will give you a random value "
"between two numbers - a *min* and a *max*. (`rrand` is short for ranged random"
"). Let's try playing a random note:"
msgstr ""
"たいへん便利なランダム関数に、二つの数字の間 （最小値と最大値）で 乱数（ランダムな値）が得られる`rrand`があります。（rrandはレンジド・ランダム"
"の略です。） ランダムな音階を演奏してみましょう。"

#: 04-Randomisation.md:17
#, no-wrap
#, fuzzy
msgid "play rrand(50, 95)"
msgstr "play rrand(50, 100)"

#: 04-Randomisation.md:21
#, fuzzy
msgid ""
"Ooh, it played a random note. It played note `83.7527`. A nice random note bet"
"ween 50 and 95. Woah, wait, did I just predict the exact random note you got t"
"oo? Something fishy is going on here. Try running the code again. What? It cho"
"se `83.7527` again? That can't be random!"
msgstr "おぉー、ランダムな音階を演奏しましたね。これは、音階`77.4407`を演奏しました。"

#: 04-Randomisation.md:26
#, fuzzy
msgid ""
"The answer is that it is not truly random, it's pseudo-random. Sonic Pi will g"
"ive you random-like numbers in a repeatable manner. This is very useful for en"
"suring that the music you create on your machine sounds identical on everybody"
" else's machine - even if you use some randomness in your composition."
msgstr ""
"50と100との間で素敵なランダム音階はでしたね...でも、ちょっと待ってください、 上記で、私はあなたが再生したランダムな音階を正確に予測していませんか？"
"何か怪しくないですか？ 再度コードを実行してみてください。ランダムのはずが、再び`77.4407`が選ばれましたよね？ 実は、ランダムにすることができないの"
"です！ この答えとなる擬似ランダムとは、真のランダムではないということです。SonicPiは、 反復可能な数としてのランダムを与えます。これは、あなたのマシ"
"ンで作成した音楽が、誰か他の人のマシンで 再生されても同じように聞こえることを確認するのに大変便利な機能です。あなたの曲の中でいくつものランダ ム性を使用し"
"ている場合でも。"

#: 04-Randomisation.md:32
#, fuzzy
msgid ""
"Of course, in a given piece of music, if it 'randomly' chose `83.7527` every t"
"ime, then it wouldn't be very interesting. However, it doesn't. Try the follow"
"ing:"
msgstr ""
"もちろん、音楽に与えられる側面として、もし「ランダム」が`77.4407`を毎回選択した場合、 それは非常に面白くありません。しかし、それはしていません。以"
"下のことを試してみてください。"

#: 04-Randomisation.md:36
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  play rrand(50, 95)\n"
"  sleep 0.5\n"
"end "
msgstr ""
"loop do\n"
" play rrand(50, 100)\n"
" sleep 0.5\n"
"end"

#: 04-Randomisation.md:43
#, fuzzy
msgid ""
"Yes! It finally sounds random. Within a given *run* subsequent calls to random"
" functions will return random values. However, the next run will produce exact"
"ly the same sequence of random values and sound exactly the same. It's as if a"
"ll Sonic Pi code went back in time to exactly the same point every time the Ru"
"n button was pressed. It's the Groundhog Day of music synthesis!"
msgstr ""
"そう！最終的には、ランダムに聞こえますね。ランダム関数へ続いて呼び出されるその後の実行結果は ランダムな値を返します。ただし、また再生する場合は正確に乱数値"
"の同じシーケンスを生成し、 まったく同じ音が鳴ります。Runボタンが押されるたびに、まるですべてのSonic Piコードが毎回、同じ時間に戻るかように蘇りま"
"す。 それはまさにシンセのデジャヴのように繰り返されます！"

#: 04-Randomisation.md:50
#, fuzzy
msgid "Haunted Bells"
msgstr "ホーンテッド・ベル"

#: 04-Randomisation.md:52
#, fuzzy
msgid ""
"A lovely illustration of randomisation in action is the haunted bells example "
"which loops the `:perc_bell` sample with a random rate and sleep time between "
"bell sounds:"
msgstr ""
"ランダム動作を取り入れたゾクッとするようなベルの音を使った楽しい作例です。 繰り返しサンプルのベル音:perc_bellをループさせ、ベル音の再生速度と音の"
"間のsleepにランダムな数値を用いています。"

#: 04-Randomisation.md:56
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  sample :perc_bell, rate: (rrand 0.125, 1.5)\n"
"  sleep rrand(0.2, 2)\n"
"end"
msgstr ""
"loop do\n"
" sample :perc_bell, rate: (rrand 0.125, 1.5)\n"
" sleep rrand(0.2, 2)\n"
"end"

#: 04-Randomisation.md:63
#, fuzzy
msgid "Random cutoff"
msgstr "ランダムなカットオフ"

#: 04-Randomisation.md:65
#, fuzzy
msgid ""
"Another fun example of randomisation is to modify the cutoff of a synth random"
"ly. A great synth to try this out on is the `:tb303` emulator:"
msgstr "ランダム化のもう一つの楽しみ方の例は、ランダムにシンセのカットオフを加えることです。 これを試してみるのに絶好のシンセは、 :tb303 エミュレータです。"

#: 04-Randomisation.md:69
#, no-wrap
#, fuzzy
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play 50, release: 0.1, cutoff: rrand(60, 120)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_synth :tb303\n"
"loop do\n"
" play 50, release: 0.1, cutoff: rrand(60, 120)\n"
" sleep 0.125\n"
"end"

#: 04-Randomisation.md:78
#, fuzzy
msgid "Random seeds"
msgstr "ランダムの種(シード)"

#: 04-Randomisation.md:80
#, fuzzy
msgid ""
"So, what if you don't like this particular sequence of random numbers Sonic Pi"
" provides? Well it's totally possible to choose a different starting point via"
" `use_random_seed`. The default seed happens to be 0, so choose a different se"
"ed for a different random experience!"
msgstr ""
"もし、SonicPiが提供する乱数の特定の配列が気に入らない場合、`use_random_seed`を介すことで 別の開始点を選択することが可能です。シード"
"の標準値は0であるため、異なるランダム体験のために 別のシード番号を入力してみましょう！"

#: 04-Randomisation.md:85
#, fuzzy
msgid "Consider the following:"
msgstr "下記を考えてみてください："

#: 04-Randomisation.md:87
#, no-wrap
#, fuzzy
msgid ""
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""
"5.times do\n"
" play rrand(50, 100)\n"
" sleep 0.5\n"
"end"

#: 04-Randomisation.md:94
#, fuzzy
msgid ""
"Every time you run this code, you'll hear the same sequence of 5 notes. To get"
" a different sequence simply change the seed:"
msgstr "このコードを実行するたびに、 5音階の同じシーケンスが聞けるでしょう。異なるフレーズを聞くには、シードの値を変更します。"

#: 04-Randomisation.md:97
#, no-wrap
#, fuzzy
msgid ""
"use_random_seed 40\n"
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_random_seed 40\n"
"5.times do\n"
" play rrand(50, 100)\n"
" sleep 0.5\n"
"end"

#: 04-Randomisation.md:105
#, fuzzy
msgid ""
"This will produce a different sequence of 5 notes. By changing the seed and li"
"stening to the results you can find something that you like - and when you sha"
"re it with others, they will hear exactly what you heard too."
msgstr ""
"こうして異なる5音階のシーケンスを生成します。シードの値を変更することによって、あなたの好きな フレーズを見つけることができます 他の人と共有するとき、彼ら"
"も、あなたが聞いたものとまったく同様のフレーズを 聞くことができるでしょう。"

#: 04-Randomisation.md:110
#, fuzzy
msgid "Let's have a look at some other useful random functions."
msgstr "有用なランダム関数をもう少し見ていきましょう。"

#: 04-Randomisation.md:113
#, fuzzy
msgid "choose"
msgstr "choose：選択"

#: 04-Randomisation.md:115
#, fuzzy
msgid ""
"A very common thing to do is to choose an item randomly from a list of known i"
"tems. For example, I may want to play one note from the following: 60, 65 or 7"
"2. I can achieve this with `choose` which lets me choose an item from a list. "
"First, I need to put my numbers in a list which is done by wrapping them in sq"
"uare brackets and separating them with commas: `[60, 65, 72]`. Next I just nee"
"d to pass them to `choose`:"
msgstr ""
"一般的な方法は、あらかじめ用意した数値をリストの中からランダムに選択することです。 例えば、60、65または72の中から1音を演奏することができます。`ch"
"oose`を用いれば、 リストから一つの項目をで選択することができます。まず、カンマで区切った番号のリストを角括弧でラップ（包んで）し、 配置する必要があり"
"ます：`[60, 65, 72]`。次にそれらを`choose`に渡す必要があります。"

#: 04-Randomisation.md:122
#, no-wrap
msgid "choose([60, 65, 72])"
msgstr "choose([60, 65, 72])"

#: 04-Randomisation.md:126
#, fuzzy
msgid "Let's hear what that sounds like:"
msgstr "どんな音になるか聞いてみましょう。"

#: 04-Randomisation.md:128
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  play choose([60, 65, 72])\n"
"  sleep 1\n"
"end"
msgstr ""
"loop do\n"
" play choose([60, 65, 72])\n"
" sleep 1\n"
"end"

#: 04-Randomisation.md:135
msgid "rrand"
msgstr ""

#: 04-Randomisation.md:137
#, fuzzy
msgid ""
"We've already seen `rrand`, but let's run over it again. It returns a random n"
"umber between two values exclusively. That means it will never return either t"
"he top or bottom number - always something in between the two. The number will"
" always be a float - meaning it's not a whole number but a fraction of a numbe"
"r. Examples of floats returned by `rrand(20, 110)`:"
msgstr ""
"すでに`rrand`について触れてきましたが、再び実行してみましょう。これは、2つの値の間の乱数（排他的）を返します。 この意味するところは上部または下部の"
"番号いずれの値も含まれません。常に両者の間にある値です。 そして、その番号は常に浮動小数点になります - それは整数ではなく、分数です。 `rrand(20"
", 110)`で返される浮動小数点数の例："

#: 04-Randomisation.md:148
msgid "rrand_i"
msgstr ""

#: 04-Randomisation.md:150
#, fuzzy
msgid ""
"Occasionally you'll want a whole random number, not a float. This is where `rr"
"and_i` comes to the rescue. It works similarly to `rrand` except it may return"
" the min and max values as potential random values (which means it's inclusive"
" rather than exclusive of the range). Examples of numbers returned by `rrand_i"
"(20, 110)` are:"
msgstr ""
"時々、あなたは小数点ではなく、整数の乱数を望むこともあるでしょう。これは`rrand_i`を用いることで 解決できます。それは小数点を除いて`rrand`と"
"同様に最小値および最大値の範囲（この場合、最長値と 最大値も含まれます）に潜在するランダム値を返す動作をします。下記は、`rrand_i(20, 110)`"
"によって返される数値の例です。"

#: 04-Randomisation.md:160
msgid "rand"
msgstr ""

#: 04-Randomisation.md:162
#, fuzzy
msgid ""
"This will return a random float between 0 (inclusive) and the max value you sp"
"ecify (exclusive). By default it will return a value between 0 and one. It's t"
"herefore useful for choosing random `amp:` values:"
msgstr ""
"`rand`は、`0`を含む最小値と最大値未満の間のランダムな浮動小数点数を返します。デフォルト（既定値）では `0`と`1`の間の値を返します。したがって"
"、`amp:`値をランダム化する際に便利です。"

#: 04-Randomisation.md:167
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  play 60, amp: rand\n"
"  sleep 0.25\n"
"end"
msgstr ""
"loop do\n"
" play 60, amp: rand\n"
" sleep 0.25\n"
"end"

#: 04-Randomisation.md:174
msgid "rand_i"
msgstr ""

#: 04-Randomisation.md:176
#, fuzzy
msgid ""
"Similar to the relationship between `rrand_i` and `rrand`, `rand_i` will retur"
"n a random whole number between 0 and the max value you specify."
msgstr "`rrand_i`と`rrand`の関係と同様に`rand_i`は`0`と特定の最大値の間の整数値を返します。"

#: 04-Randomisation.md:179
#, fuzzy
msgid "dice"
msgstr "dice:サイコロ"

#: 04-Randomisation.md:181
#, fuzzy
msgid ""
"Sometimes you want to emulate a dice throw - this is a special case of `rrand_"
"i` where the lower value is always 1. A call to `dice` requires you to specify"
" the number of sides on the dice. A standard dice has 6 sides, so `dice(6)` wi"
"ll act very similarly - returning values of either 1, 2, 3, 4, 5, or 6. Howeve"
"r, just like fantasy role-play games, you might find value in a 4 sided dice, "
"or a 12 sided dice, or a 20 sided dice - perhaps even a 120 sided dice!"
msgstr ""
"ランダムな数字を出す際に、サイコロ投げをまねてみたくなることもあるでしょう。 これは、常に下の値が1である`rrand_i`の特殊なケースです。 `dice"
"`を呼び出す時は、サイコロの面の数を指定する必要があります。 標準的なサイコロは6面で、`dice(6)`では、1 、2 、3 、4 、5 、 または6を返"
"すサイコロと同様の作用をします。しかし、空想のボードゲームのように、 4面、12面、または20面サイコロで値を見つけたいこともあるでしょう。ことによっては1"
"20面のサイコロだって！"

#: 04-Randomisation.md:189
msgid "one_in"
msgstr ""

#: 04-Randomisation.md:191
#, fuzzy
msgid ""
"Finally you may wish to emulate throwing the top score of a dice such as a 6 i"
"n a standard dice. `one_in` therefore returns true with a probability of one i"
"n the number of sides on the dice. Therefore `one_in(6)` will return true with"
" a probability of 1 in 6 or false otherwise. True and false values are very us"
"eful for `if` statements which we will cover in a subsequent section of this t"
"utorial."
msgstr ""
"最後に、サイコロ投げをまねて、例えば６という一番大きな数値を出してみたくなることもあるでしょう。 `one_in`はサイコロの面の数分の1の確率でtrueを"
"返します。したがって`one_in(6)`では6分1の確率でtrue、それ以外の場合はfalseを返します。`true`と`false`の値は、このチュート"
"リアルの次のセクションで説明するif文で非常に有用です。"

#: 04-Randomisation.md:198
#, fuzzy
msgid "Now, go and jumble up your code with some randomness!"
msgstr "さあ、ランダム性を使いこなしてコードをまぜこぜにしていきましょう！"

#: 05-Programming-Structures.md:1
#, fuzzy
msgid "5 Programming Structures"
msgstr "5 プログラミングの構造"

#: 05-Programming-Structures.md:3
#, fuzzy
msgid "Programming Structures"
msgstr "プログラミングの構造"

#: 05-Programming-Structures.md:5
#, fuzzy
msgid ""
"Now that you've learned the basics of creating sounds with `play` and `sample`"
" and creating simple melodies and rhythms by `sleep`ing between sounds, you mi"
"ght be wondering what else the world of code can offer you..."
msgstr ""
"これまでの章で、みなさんは`play`や`sample`コマンドを使ったり、`sleep`を使ってシンプルなメロディーやリズムを作曲することを通して音楽制作"
"(\\*サウンドプログラミング)の基礎を学ぶことができました。 Sonic Piのコードの世界で他にどんなことができるか興味が出てきたことでしょう..."

#: 05-Programming-Structures.md:10
#, fuzzy
msgid ""
"Well, you're in for an exciting treat! It turns out that basic programming str"
"uctures such as looping, conditionals, functions and threads give you amazingl"
"y powerful tools to express your musical ideas."
msgstr ""
"それでは、プログラミングの基礎となるループや条件文、ファンクション（関数やスレッドなどに進みましょう。 音楽的のアイデアを実現させるをびっくりするほど強力な"
"ツールをになることでしょう。"

#: 05-Programming-Structures.md:14
#, fuzzy
msgid "Let's get stuck in with the basics..."
msgstr "それでは、やってみましょう。"

#: 05.1-Blocks.md:1
#, fuzzy
msgid "5.1 Blocks"
msgstr "5.1 ブロック"

#: 05.1-Blocks.md:3
#, fuzzy
msgid "Blocks"
msgstr "ブロック"

#: 05.1-Blocks.md:5
#, fuzzy
msgid ""
"A structure you'll see a lot in Sonic Pi is the block. Blocks allow us to do u"
"seful things with large chunks of code. For example, with synth and sample par"
"ameters we were able to change something that happened on a single line. Howev"
"er, sometimes we want to do something meaningful to a number of lines of code."
" For example, we may wish to loop it, to add reverb to it, to only run it 1 ti"
"me out of 5, etc. Consider the following code:"
msgstr ""
"Sonic Piでよく見る構造はブロック(`block`)といいます。ブロックは沢山のコードを ひとかたまりとして、便利に扱うことができます。 たとえば`s"
"ynth`や`sample`では、その後ろのパラメータによって音を変えることができました。 しかし、場合によってはコード数行に同じ変更内容を反映させたい時な"
"どが出てきます。 たとえばループする時に、5回のうち1回だけリバーブを加えたい場合を考えてみます。"

#: 05.1-Blocks.md:13
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_plip\n"
"sleep 0.5\n"
"play 62"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_plip\n"
"sleep 0.5\n"
"play 62"

#: 05.1-Blocks.md:21
#, fuzzy
msgid ""
"To do something with a chunk of code, we need to tell Sonic Pi where the code "
"block *starts* and where it *ends*. We use `do` for start and `end` for end. F"
"or example:"
msgstr ""
"コードのまとまりを使って何かをしようとするときに、コードのブロックの始まりと終わりをSonic Piに伝える必要があります。その際に`do`を*始まり*に、"
"`end`を*終わり*として使用します。"

#: 05.1-Blocks.md:25
#, no-wrap
#, fuzzy
msgid ""
"do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"do\n"
" play 50\n"
" sleep 0.5\n"
" sample :elec_plip\n"
" sleep 0.5\n"
" play 62\n"
"end"

#: 05.1-Blocks.md:35
#, fuzzy
msgid ""
"However, this isn't yet complete and won't work (try it and you'll get an erro"
"r) as we haven't told Sonic Pi what we want to do with this *do/end block*. We"
" tell Sonic Pi this by writing some special code before the `do`. We'll see a "
"number of these special pieces of code later on in this tutorial. For now, it'"
"s important to know that wrapping your code within `do` and `end` tells Sonic "
"Pi you wish to do something special with that chunk of code."
msgstr ""
"しかし、これではまだ完璧ではないので、実行されません。（動かしてみてもエラーメッセージが出るだけです）。 実行したい*始まり*と*終わり*のブロックをSon"
"ic Piへ伝達が完了していないからです。`do`の前に特別なコードをすこし書くことによってこのブロックをSonic Piに教えることができます。 このチュ"
"ートリアルの後半でこれらの特別なコードを使ったいくつかの事例を紹介していきます。 ひとまず、みなさんが特別なコードを使ってSonic Piを動かしたい場合、"
"`do`と`end`でコードをまとめることが重要であることを覚えておいてください。"

#: 05.2-Iteration-and-Loops.md:1
#, fuzzy
msgid "5.2 Iteration and Loops"
msgstr "5.2 イテレーション（反復）とループ"

#: 05.2-Iteration-and-Loops.md:3
#, fuzzy
msgid "Iteration and Loops"
msgstr "イテレーション（反復）とループ"

#: 05.2-Iteration-and-Loops.md:5
#, fuzzy
msgid ""
"So far we've spent a lot of time looking at the different sounds you can make "
"with `play` and `sample` blocks. We've also learned how to trigger these sound"
"s through time using `sleep`."
msgstr ""
"以前、`play`と`sample`のブロックを使って様々な音を作り出せること勉強しました。また、`sleep`を使うことによって、音の発生する時間をコント"
"ロールする方法も学びました。"

#: 05.2-Iteration-and-Loops.md:9
#, fuzzy
msgid ""
"As you've probably found out, there's a *lot* of fun you can have with these b"
"asic building blocks. However, a whole new dimension of fun opens up when you "
"start using the power of code to structure your music and compositions. In the"
" next few sections we'll explore some of these powerful new tools. First up is"
" iteration and loops."
msgstr ""
"これらの基本的なブロックを使用することで*多く*の楽しさがあることを理解してもらえたのではないかと思います。しかし、音楽を作るための強力なコードを学べば、そ"
"の楽しさの次元はまた新しい段階に向かうでしょう。次のいくつかのセクションではパワフルな新しいツールを探っていきます。はじめはまず「イテレーション（反復）とル"
"ープ」を学びます。"

#: 05.2-Iteration-and-Loops.md:15
#, fuzzy
msgid "Repetition"
msgstr "リピート"

#: 05.2-Iteration-and-Loops.md:17
#, fuzzy
msgid ""
"Have you written some code you'd like to repeat a few times? For example, you "
"might have something like this:"
msgstr "何回か繰り返しを行うためにはどのようにコードを書いたらよいでしょう？例えばこのようなコードです。"

#: 05.2-Iteration-and-Loops.md:20
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"

#: 05.2-Iteration-and-Loops.md:29
#, fuzzy
msgid ""
"What if we wished to repeat this 3 times? Well, we could do something simple a"
"nd just copy and paste it three times:"
msgstr "これを3回繰り返したい場合、どうしたら良いでしょう？単純に考えればコピーして貼り付けを3回繰り返せば可能です。"

#: 05.2-Iteration-and-Loops.md:32
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"

#: 05.2-Iteration-and-Loops.md:55
#, fuzzy
msgid ""
"Now that's a lot of code! What happens if you want to change the sample to `:e"
"lec_plip`? You're going to have to find all the places with the original `:ele"
"c_blup` and switch them over. More importantly, what if you wanted to repeat t"
"he original piece of code 50 times or 1000? Now that would be a lot of code, a"
"nd a lot of lines of code to alter if you wanted to make a change."
msgstr ""
"ちょっと長過ぎますよね。もしサンプルの`:elec_plip`を変更させたい場合、どうしたら良いでしょうか？3ヶ所全部の`:elec_blup` をひとつひ"
"とつ変えなくてはいけません。さらに重要なことですが、繰り返しが50回とか1000回になったとしたらどうでしょう？変更したいコードがすごくたくさんになってしま"
"います。"

#: 05.2-Iteration-and-Loops.md:62
#, fuzzy
msgid "Iteration"
msgstr "イテレーション（反復）"

#: 05.2-Iteration-and-Loops.md:64
#, fuzzy
msgid ""
"In fact, repeating the code should be as easy as saying *do this three times*."
" Well, it pretty much is. Remember our old friend the code block? We can use i"
"t to mark the start and end of the code we'd like to repeat three times. We th"
"en use the special code `3.times`. So, instead of writing *do this three times"
"*, we write `3.times do` - that's not too hard. Just remember to write `end` a"
"t the end of the code you'd like to repeat:"
msgstr ""
"イテレーション（反復）とは、終了条件に達するまで一定の処理を繰り返すことです。実際、コードの繰り返しは`do`を*3回繰り返す*ことで簡単にできます。さあ、"
"はじめましょう。先ほど学んだコードブロックを思い出してください。3回繰り返したいコードのブロックには「始まり」と「終わり」が記されていますね。そんな時にこの"
"特別なコードである`3.times`を使いましょう。同じコードを*3回繰り返す*代わりに、`3.times`を書くことで、とても簡単に出来るようになります。"
"その時にコードの最終行に`end`を書き入れることも忘れないようにしましょう。"

#: 05.2-Iteration-and-Loops.md:72
#, no-wrap
#, fuzzy
msgid ""
"3.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_blup\n"
"  sleep 0.5\n"
"  play 62\n"
"  sleep 0.25\n"
"end"
msgstr ""
"3.times do\n"
" play 50\n"
" sleep 0.5\n"
" sample :elec_blup\n"
" sleep 0.5\n"
" play 62\n"
" sleep 0.25\n"
"end"

#: 05.2-Iteration-and-Loops.md:83
#, fuzzy
msgid ""
"Now isn't that much neater than cutting and pasting! We can use this to create"
" lots of nice repeating structures:"
msgstr "コピーと貼り付けよりを繰り返すより、ずっと美しいコードになったと思いませんか？ このようにブロックを使うと、沢山の繰り返しの構造を作ることが出来るのです。"

#: 05.2-Iteration-and-Loops.md:86
#, no-wrap
#, fuzzy
msgid ""
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end\n"
"8.times do\n"
"  play 55, release: 0.2\n"
"  sleep 0.25\n"
"end\n"
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end"
msgstr ""
"4.times do\n"
" play 50\n"
" sleep 0.5\n"
"end\n"
"8.times do\n"
" play 55, release: 0.2\n"
" sleep 0.25\n"
"end\n"
"4.times do\n"
" play 50\n"
" sleep 0.5\n"
"end"

#: 05.2-Iteration-and-Loops.md:103
#, fuzzy
msgid "Nesting Iterations"
msgstr "イテレーション(反復)のネスティング(入れ子)"

#: 05.2-Iteration-and-Loops.md:105
#, fuzzy
msgid ""
"We can put iterations inside other iterations to create interesting patterns. "
"For example:"
msgstr "繰り返しの構造の中にさらなる繰り返しの機能を入れることによって面白いパターンを作ることが出来ます。例えば"

#: 05.2-Iteration-and-Loops.md:108
#, no-wrap
#, fuzzy
msgid ""
"4.times do\n"
"  sample :drum_heavy_kick\n"
"  2.times do\n"
"    sample :elec_blip2, rate: 2\n"
"    sleep 0.25\n"
"  end\n"
"  sample :elec_snare\n"
"  4.times do\n"
"    sample :drum_tom_mid_soft\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"4.times do\n"
" sample :drum_heavy_kick\n"
" 2.times do\n"
"   sample :elec_blip2, rate: 2\n"
"   sleep 0.25\n"
" end\n"
" sample :elec_snare\n"
" 4.times do\n"
"   sample :drum_tom_mid_soft\n"
"   sleep 0.125\n"
" end\n"
"end"

#: 05.2-Iteration-and-Loops.md:123
#, fuzzy
msgid "Looping"
msgstr "ループ（終わりのない繰り返し）"

#: 05.2-Iteration-and-Loops.md:125
#, fuzzy
msgid ""
"If you want something to repeat a lot of times, you might find yourself using "
"really large numbers such as `1000.times do`. In this case, you're probably be"
"tter off asking Sonic Pi to repeat forever (at least until you press the stop "
"button!). Let's loop the amen break forever:"
msgstr ""
"もしすごくたくさんの繰り返しをしたい場合、`1000.times do`のようにすごく大きな数値の繰り返しをさせることになってしまいます。こういった場合は、"
"おそらく（stopボタンを押すまで）無限に繰り返す機能がほしいと思うでしょう。さあ、アーメンブレークのサンプルを無限にループさせてみましょう。"

#: 05.2-Iteration-and-Loops.md:130
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  sample :loop_amen\n"
"  sleep sample_duration :loop_amen\n"
"end"
msgstr ""
"loop do\n"
" sample :loop_amen\n"
" sleep sample_duration :loop_amen\n"
"end"

#: 05.2-Iteration-and-Loops.md:137
#, fuzzy
msgid ""
"The important thing to know about loops is that they act like black holes for "
"code. Once the code enters a loop it can never leave until you press stop - it"
" will just go round and round the loop forever. This means if you have code af"
"ter the loop you will *never* hear it. For example, the cymbal after this loop"
" will never play:"
msgstr ""
"loopについて知っておかなくてはならない重要な点は、これはコードの中でブラックホールのように動いてしまう点です。一度loop機能が動いてしまうと、`sto"
"p`ボタンを押さない限り*永遠*に再生されるということです。つまり、これはloopの外にあるもコードは、いつまでたっても聞くことが出来ないということを意味し"
"ています。例えば、下の例で言うと、シンバルの音はloopの外にあるため、いつまでも動くことはありません。"

#: 05.2-Iteration-and-Loops.md:143
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"sample :drum_cymbal_open"
msgstr ""
"loop do\n"
" play 50\n"
" sleep 1\n"
"end\n"
"sample :drum_cymbal_open"

#: 05.2-Iteration-and-Loops.md:152
#, fuzzy
msgid "Now, get structuring your code with iteration and loops!"
msgstr "さあ、これで回数を指定するイテレーション(反復)と永遠に繰り返すループのコーディング方法を理解することができましたね!"

#: 05.3-Conditionals.md:1
#, fuzzy
msgid "5.3 Conditionals"
msgstr "5.3 条件文"

#: 05.3-Conditionals.md:3
#, fuzzy
msgid "Conditionals"
msgstr "条件文"

#: 05.3-Conditionals.md:5
#, fuzzy
msgid ""
"A common thing you'll likely find yourself wanting to do is to not only play a"
" random note (see the previous section on randomness) but also make a random d"
"ecision and based on the outcome run some code or some other code. For example"
", you might want to randomly play a drum or a cymbal. We can achieve this with"
" an `if` statement."
msgstr ""
"やってみたいと思うことのひとつに、ランダムに音を出すこと（前章参照）だけでなく、いくつかのコードをランダムに決め、それを選択していくというアイデアも出てくる"
"と思います。例えば、ドラムとシンバルをランダムに鳴らしたい場合、`if`という言葉を使うとこれを実現できるようになります。"

#: 05.3-Conditionals.md:11
#, fuzzy
msgid "Flipping a Coin"
msgstr "コイントス"

#: 05.3-Conditionals.md:13
#, fuzzy
msgid ""
"So, let's flip a coin: if it's heads, play a drum, if it's tails, play a cymba"
"l. Easy. We can emulate a coin flip with our `one_in` function (introduced in "
"the section on randomness) specifying a probability of 1 in 2: `one_in(2)`. We"
" can then use the result of this to decide between two pieces of code, the cod"
"e to play the drum and the code to play the cymbal:"
msgstr ""
"それではコインをトス（投げる）してみましょう。もしもコインが表であればドラムを鳴らし、裏であればシンバルを鳴らします。簡単ですね。コイントスの機能は `on"
"e_in` という機能（ランダムのセクションで紹介しています）によって実現されます。2つのうちの1つというように条件を細かく指定するときには `one_in"
"(2)`と記述すると、ドラムを鳴らすコードとシンバルを鳴らす2つのコードどちらかを決められるようになります。"

#: 05.3-Conditionals.md:20
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"  end\n"
"  \n"
"  sleep 0.5\n"
"  \n"
"end"
msgstr ""
"loop do\n"
" if one_in(2)\n"
"   sample :drum_heavy_kick\n"
" else\n"
"   sample :drum_cymbal_closed\n"
" end\n"
"  sleep 0.5\n"
" end"

#: 05.3-Conditionals.md:34
#, fuzzy
msgid "Notice that `if` statements have three parts:"
msgstr "if文は3つのパートを持っていることに注目してみましょう。"

#: 05.3-Conditionals.md:36
#, fuzzy
msgid "The question to ask"
msgstr "条件付け"

#: 05.3-Conditionals.md:37
#, fuzzy
msgid "The first choice of code to run (if the answer to the question is yes)"
msgstr "はじめの選択によって実行されるコード（条件が正しかった場合）"

#: 05.3-Conditionals.md:38
#, fuzzy
msgid "The second choice of code to run (if the answer to the question is no)"
msgstr "次の選択によって実行されるコード（条件が間違っていた場合）"

#: 05.3-Conditionals.md:40
#, fuzzy
msgid ""
"Typically in programming languages, the notion of yes is represented by the te"
"rm `true` and the notion of no is represented by the term `false`. So we need "
"to find a question that will give us a `true` or `false` answer which is exact"
"ly what `one_in` does."
msgstr ""
"典型的なプログラム言語では、概ね、真（正しいという意味）を`true`で表現し、偽（正しくない場合）は`false`と表記します。そのため、 `one_in"
"` 対する明確な回答として、`true`か`false`かを選択できる質問が必要となります。"

#: 05.3-Conditionals.md:45
#, fuzzy
msgid ""
"Notice how the first choice is wrapped between the `if` and the `else` and the"
" second choice is wrapped between the `else` and the `end`. Just like do/end b"
"locks you can put multiple lines of code in either place. For example:"
msgstr ""
"はじめの選択では `if` と `else` の間に挟まれたプログラムが実行され、そして2番目の選択では`else` と `end`の間が実行されるというこ"
"とに注目しましょう。それは複数行のコードをまとめる*do/end*ブロックにとても似ていますね。例えば、"

#: 05.3-Conditionals.md:50
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"    sleep 0.5\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"    sleep 0.25\n"
"  end\n"
"  \n"
"end"
msgstr ""
"loop do\n"
" if one_in(2)\n"
"   sample :drum_heavy_kick\n"
"   sleep 0.5\n"
" else\n"
"   sample :drum_cymbal_closed\n"
"   sleep 0.25\n"
" end\n"
"end"

#: 05.3-Conditionals.md:64
#, fuzzy
msgid ""
"This time we're sleeping for a different amount of time depending on which cho"
"ice we make."
msgstr "`sleep 0.5`や`sleep 0.25`など、異なる休符時間を持つ場合、そのどちらかに応じることになります。"

#: 05.3-Conditionals.md:68
msgid "Simple if"
msgstr ""

#: 05.3-Conditionals.md:70
#, fuzzy
msgid ""
"Sometimes you want to optionally execute just one line of code. This is possib"
"le by placing `if` and then the question at the end. For example:"
msgstr "時には、任意のコードを1行だけ実行したいときがあるでしょう。これもifとその後ろに条件を記述することで可能です。例えば、"

#: 05.3-Conditionals.md:73
#, no-wrap
#, fuzzy
msgid ""
"use_synth :dsaw\n"
"loop do\n"
"  play 50, amp: 0.3, release: 2\n"
"  play 53, amp: 0.3, release: 2 if one_in(2)\n"
"  play 57, amp: 0.3, release: 2 if one_in(3)\n"
"  play 60, amp: 0.3, release: 2 if one_in(4)\n"
"  sleep 1.5\n"
"end"
msgstr ""
"use_synth :dsaw\n"
"loop do\n"
" play 50, amp: 0.3, release: 2\n"
" play 53, amp: 0.3, release: 2 if one_in(2)\n"
" play 57, amp: 0.3, release: 2 if one_in(3)\n"
" play 60, amp: 0.3, release: 2 if one_in(4)\n"
" sleep 1.5\n"
"end"

#: 05.3-Conditionals.md:85
#, fuzzy
msgid ""
"This will play chords of different numbers with the chance of each note playin"
"g having a different probability."
msgstr "上のコードでは、それぞれの音符が持つ別の確率によって、異なる数のコード(和音)を奏でるでしょう。"

#: 05.4-Threads.md:1
#, fuzzy
msgid "5.4 Threads"
msgstr "5.4 スレッド"

#: 05.4-Threads.md:3
#, fuzzy
msgid "Threads"
msgstr "スレッド"

#: 05.4-Threads.md:5
#, fuzzy
msgid ""
"So you've made your killer bassline and a phat beat. How do you play them at t"
"he same time? One solution is to weave them together manually - play some bass"
", then a bit of drums, then more bass... However, the timing soon gets hard to"
" think about, especially when you start weaving in more elements."
msgstr ""
"それでは、強烈なベースラインとかっこいいビートを作った場合、どのようにしてそれらを同時に鳴らしたらいいでしょう？一つの回答としては、手動でそれらを同時に鳴ら"
"す事です―まず、いくつかのベースを演奏し、その後にいくつかのドラム、またその後にベースというように…しかしながら、すぐに沢山の楽器を処理することが難しいこと"
"に気づくでしょう。"

#: 05.4-Threads.md:11
#, fuzzy
msgid ""
"What if Sonic Pi could weave things for you automatically? Well, it can, and y"
"ou do it with a special thing called a *thread*."
msgstr "もし、Sonic Piが自動的にそれらを作り出せるとしたら？*thread*(スレッド)と呼ばれる特別な命令によってそれが可能になります。"

#: 05.4-Threads.md:14
#, fuzzy
msgid "Infinite Loops"
msgstr "無限の繰り返し"

#: 05.4-Threads.md:16
#, fuzzy
msgid ""
"To keep this example simple, you'll have to imagine that this is a phat beat a"
"nd a killer bassline:"
msgstr "このシンプルな例で、強烈なベースラインとかっこいいビートが期待できてしまうのです。"

#: 05.4-Threads.md:19
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  sample :drum_heavy_kick\n"
"  sleep 1\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""
"loop do\n"
" sample :drum_heavy_kick\n"
" sleep 1\n"
"end\n"
"loop do\n"
" use_synth :fm\n"
" play 40, release: 0.2\n"
" sleep 0.5\n"
"end"

#: 05.4-Threads.md:32
#, fuzzy
msgid ""
"As we've discussed previously, loops are like *black holes* for the program. O"
"nce you enter a loop you can never exit from it until you hit stop. How do we "
"play both loops at the same time? We have to tell Sonic Pi that we want to sta"
"rt something at the same time as the rest of the code. This is where threads c"
"ome to the rescue."
msgstr ""
"ループはプログラムの*ブラックホール*のようだと以前にお話しました。 一度ループを入れると、stopボタンを押さない限り、そこから抜け出せなくなります。 で"
"は、どうしたら同時にふたつの繰り返しを演奏することが出来るでしょう？ 私たちは、同時にそれらのコードをタイミングを合わせスタートさせるようにSonic Pi"
"に伝えなくてはいけません。これがスレッドを使った解決方法なのです。"

#: 05.4-Threads.md:38
#, fuzzy
msgid "Threads to the Rescue"
msgstr "スレッドを使った解決方法"

#: 05.4-Threads.md:40
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""
"in_thread do\n"
" loop do\n"
"   sample :drum_heavy_kick\n"
"   sleep 1\n"
" end\n"
"end\n"
"loop do\n"
" use_synth :fm\n"
" play 40, release: 0.2\n"
" sleep 0.5\n"
"end"

#: 05.4-Threads.md:55
#, fuzzy
msgid ""
"By wrapping the first loop in an `in_thread` do/end block we tell Sonic Pi to "
"run the contents of the do/end block at *exactly* the same time as the next st"
"atement after the do/end block (which happens to be the second loop). Try it a"
"nd you'll hear both the drums and the bassline weaved together!"
msgstr ""
"はじめの*do/end*ブロックを`in_thread`で囲むことで、次にくる*do/end*ブロックを*ぴったりと*同時にループさせるようにSonic P"
"iに命令することができます。 それではドラムとベースラインを同時に鳴らすことに挑戦してみましょう！"

#: 05.4-Threads.md:61
#, fuzzy
msgid "Now, what if we wanted to add a synth on top. Something like:"
msgstr "そして、もう一つの音を追加したいので、先ほどのように繰り返しを入れてみましょう。"

#: 05.4-Threads.md:63
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""
"in_thread do\n"
" loop do\n"
"   sample :drum_heavy_kick\n"
"   sleep 1\n"
" end\n"
"end\n"
"loop do\n"
" use_synth :fm\n"
" play 40, release: 0.2\n"
" sleep 0.5\n"
"end\n"
"loop do\n"
" use_synth :zawa\n"
" play 52, release: 2.5, phase: 2, amp: 0.5\n"
" sleep 2\n"
"end"

#: 05.4-Threads.md:84
#, fuzzy
msgid ""
"Now we have the same problem as before. The first loop is played at the same t"
"ime as the second loop due to the `in_thread`. However, *the third loop is nev"
"er reached*. We therefore need another thread:"
msgstr ""
"前と同じ問題が出てきましたね。`in_thread`によって最初の繰り返しと2つ目の繰り返しが同時に演奏されています。しかし3番目の繰り返しが演奏されません"
"。ですので以下のように、もう一つのスレッドが必要となります。"

#: 05.4-Threads.md:88
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    use_synth :fm\n"
"    play 40, release: 0.2\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""
"in_thread do\n"
" loop do\n"
"   sample :drum_heavy_kick\n"
"   sleep 1\n"
" end\n"
"end\n"
"in_thread do\n"
" loop do\n"
"   use_synth :fm\n"
"   play 40, release: 0.2\n"
"   sleep 0.5\n"
" end\n"
"end\n"
"loop do\n"
" use_synth :zawa\n"
" play 52, release: 2.5, phase: 2, amp: 0.5\n"
" sleep 2\n"
"end"

#: 05.4-Threads.md:111
#, fuzzy
msgid "Runs as threads"
msgstr "スレッッドとして実行する"

#: 05.4-Threads.md:113
#, fuzzy
msgid ""
"What may surprise you is that when you press the Run button, you're actually c"
"reating a new thread for the code to run. This is why pressing it multiple tim"
"es will layer sounds over each other. As the runs themselves are threads, they"
" will automatically weave the sounds together for you."
msgstr ""
"驚くべきことに`Run`ボタンを押すということは、実際にはコードを実行するための新しいスレッドを作っていることになります。 そのために複数回`Run`ボタン"
"を押すことは、互いの上に音を階層化することになります。`Run`それ自体がスレッドであるために、音を自動的に紡ぎ合わせることになるのです。"

#: 05.4-Threads.md:119
#, fuzzy
msgid "Scope"
msgstr "スコープ"

#: 05.4-Threads.md:121
#, fuzzy
msgid ""
"As you learn how to master Sonic Pi, you'll learn that threads are the most im"
"portant building blocks for your music. One of the important jobs they have is"
" to isolate the notion of *current settings* from other threads. What does thi"
"s mean? Well, when you switch synths using `use_synth` you're actually just sw"
"itching the synth in the *current thread* - no other thread will have their sy"
"nth switched. Let's see this in action:"
msgstr ""
"Sonic Piをマスターしようとするとき、スレッドが、音楽のために最も重要な構成要素であることに 気がつくでしょう。重要な役割の一つとして、他のスレッドか"
"ら現在の設定セッティングを 分離することがあります。どういうことかというと、例えば`use_synth`を使ってシンセの種類を変更する時、 現在のスレッド中"
"にあるシンセだけを変更します。他のどのスレッドも変更しません。 そのことを確認してみましょう。"

#: 05.4-Threads.md:129
#, no-wrap
#, fuzzy
msgid ""
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  use_synth :tb303\n"
"  play 50\n"
"end\n"
"sleep 1\n"
"play 50"
msgstr ""
"play 50\n"
"sleep 1\n"
"in_thread do\n"
" use_synth :tb303\n"
" play 50\n"
"end\n"
"sleep 1\n"
"play 50"

#: 05.4-Threads.md:142
#, fuzzy
msgid ""
"Notice how the middle sound was different to the others? The `use_synth` state"
"ment only affected the thread it was in and not the outer main run thread."
msgstr "真ん中の音だけがほかのものと違うことに注目してみましょう。`use_synth`の宣言はスレッドの中だけに影響し、スレッドの外にあるものには影響しません。"

#: 05.4-Threads.md:146
#, fuzzy
msgid "Inheritance"
msgstr "インヘリタンス(継承機能)"

#: 05.4-Threads.md:148
#, fuzzy
msgid ""
"When you create a new thread with `in_thread`, the new thread will automatical"
"ly inherit all of the current settings from the current thread. Let's see that"
":"
msgstr "`in_thread`を使って新しいスレッドを作ると、そのスレッドには現在の スレッドの全ての設定が自動的に継承されます。ではその機能を見てみましょう。"

#: 05.4-Threads.md:152
#, no-wrap
#, fuzzy
msgid ""
"use_synth :tb303\n"
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  play 55\n"
"end"
msgstr ""
"use_synth :tb303\n"
"play 50\n"
"sleep 1\n"
"in_thread do\n"
" play 55\n"
"end"

#: 05.4-Threads.md:162
#, fuzzy
msgid ""
"Notice how the second note is played with the `:tb303` synth even though it wa"
"s played from a separate thread? Any of the settings modified with the various"
" `use_*` functions will behave in the same way."
msgstr ""
"2番目の音符は、それが別のスレッドから再生されたにもかかわらず `:tb303` シンセで演奏されることに注目してください。 `use_*` 関数を使ったい"
"かなる設定も同様に作用するでしょう。"

#: 05.4-Threads.md:166
#, fuzzy
msgid ""
"When threads are created, they inherit all the settings from their parent but "
"they don't share any changes back."
msgstr "スレッドが作成されると、彼らの親から（前述の）すべての設定を継承しますが、スレッド以降の変更を共有することはありません。"

#: 05.4-Threads.md:169
#, fuzzy
msgid "Naming Threads"
msgstr "スレッドの命名"

#: 05.4-Threads.md:171
#, fuzzy
msgid "Finally, we can give our threads names:"
msgstr "最後に、スレッドに名前つける機能を覚えましょう。"

#: 05.4-Threads.md:173
#, no-wrap
#, fuzzy
msgid ""
"in_thread(name: :bass) do\n"
"  loop do\n"
"    use_synth :prophet\n"
"    play chord(:e2, :m7).choose, release: 0.6\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread(name: :drums) do\n"
"  loop do\n"
"    sample :elec_snare\n"
"    sleep 1\n"
"  end\n"
"end"
msgstr ""
"in_thread(name: :bass) do\n"
" loop do\n"
"   use_synth :prophet\n"
"   play chord(:e2, :m7).choose, release: 0.6\n"
"   sleep 0.5\n"
" end\n"
"end\n"
"in_thread(name: :drums) do\n"
" loop do\n"
"   sample :elec_snare\n"
"   sleep 1\n"
" end\n"
"end"

#: 05.4-Threads.md:190
#, fuzzy
msgid ""
"Look at the log pane when you run this code. See how the log reports the name "
"of the thread with the message?"
msgstr "このコードが動作した時、ログ画面を見てみましょう。レポートの中にスレッドの名前が表示されることがわかります。"

#: 05.4-Threads.md:193
#, no-wrap
#, fuzzy
msgid ""
"[Run 36, Time 4.0, Thread :bass]\n"
" |- synth :prophet, {release: 0.6, note: 47}"
msgstr ""
"[Run 36, Time 4.0, Thread :bass]\n"
"|- synth :prophet, {release: 0.6, note: 47}"

#: 05.4-Threads.md:198
#, fuzzy
msgid "Only One Thread per Name Allowed"
msgstr "名前を許された一つだけのスレッド"

#: 05.4-Threads.md:200
#, fuzzy
msgid ""
"One last thing to know about named threads is that only one thread of a given "
"name may be running at the same time. Let's explore this. Consider the followi"
"ng code:"
msgstr ""
"名前付きのスレッドについて知っておくべき最後のひとつは、名前の付いた１つのスレッドだけが同時に実行されることです。 では以下を見てみましょう。次のコードを考"
"えてみてください。"

#: 05.4-Threads.md:204
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
" loop do\n"
"   sample :loop_amen\n"
"   sleep sample_duration :loop_amen\n"
" end\n"
"end"

#: 05.4-Threads.md:213
#, fuzzy
msgid ""
"Go ahead and paste that into a buffer and press the Run button. Press it again"
" a couple of times. Listen to the cacophony of multiple amen breaks looping ou"
"t of time with each other. Ok, you can press Stop now."
msgstr ""
"ワークスペースに上記のスレッドを貼り付けて、`Run`ボタンを押します。 数回押してみましょう。複数のアーメン・ブレイクが不協和音として反復されるでしょう。"
" もういいですよね。`stop`ボタンを押しましょう。"

#: 05.4-Threads.md:217
#, fuzzy
msgid ""
"This is the behaviour we've seen again and again - if you press the Run button"
", sound layers on top of any existing sound. Therefore if you have a loop and "
"press the Run button three times, you'll have three layers of loops playing si"
"multaneously."
msgstr ""
"この動作はこれまで何度も見てきました。`Runボタンを押すと、一番上のレイヤーにあるサウンドが鳴ります。 このためループが含まれている場合、`Run\\`ボタ"
"ンを押すことを3回続けると、3つのレイヤーが一斉に実行されます。"

#: 05.4-Threads.md:222
#, fuzzy
msgid "However, with named threads it is different:"
msgstr "ただし、名前付きのスレッドでそれは異なります。"

#: 05.4-Threads.md:224
#, no-wrap
#, fuzzy
msgid ""
"in_thread(name: :amen) do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""
"in_thread(name: :amen) do\n"
" loop do\n"
"   sample :loop_amen\n"
"   sleep sample_duration :loop_amen\n"
" end\n"
"end"

#: 05.4-Threads.md:233
#, fuzzy
msgid ""
"Try pressing the Run button multiple times with this code. You'll only ever he"
"ar one amen break loop. You'll also see this in the log:"
msgstr ""
"このコードで`Run`ボタン複数回、押してみてください。ひとつのアーメン・ブレークのループのみが聞こえるでしょう。 そして下記のテキストがログ画面に表示され"
"ます。"

#: 05.4-Threads.md:236
#, no-wrap
msgid "==> Skipping thread creation: thread with name :amen already exists."
msgstr "==> Skipping thread creation: thread with name :amen already exists."

#: 05.4-Threads.md:240
#, fuzzy
msgid ""
"Sonic Pi is telling you that a thread with the name `:amen` is already playing"
", so it's not creating another."
msgstr "Sonic Pi は、`:amen`という名前があるスレッドが既に存在するため、別のものを作成しませんと伝えています。"

#: 05.4-Threads.md:243
#, fuzzy
msgid ""
"This behaviour may not seem immediately useful to you now - but it will be ver"
"y handy when we start to live code..."
msgstr "この動作はすぐに使う必要性はないように思えますが、ライブコーディングを始めると、非常に便利なものになるでしょう。"

#: 05.5-Functions.md:1
#, fuzzy
msgid "5.5 Functions"
msgstr "5.5 関数"

#: 05.5-Functions.md:3
#, fuzzy
msgid "Functions"
msgstr "ファンクション（関数）"

#: 05.5-Functions.md:5
#, fuzzy
msgid ""
"Once you start writing lots of code, you may wish to find a way to organise an"
"d structure things to make them tidier and easier to understand. Functions are"
" a very powerful way to do this. They give us the ability to give a name to a "
"bunch of code. Let's take a look."
msgstr ""
"一度、膨大なコードを書き始めると、それらの構造をより簡単かつ整理された状態で把握できるように、構築しまとめたいと感じることになるでしょう。`ファンクション`"
"（関数）はそんなことをとても効果的に成し遂げる方法です。この関数を使うとコードのまとまりに対して名前をつけることも可能になります。早速、見ていきましょう。"

#: 05.5-Functions.md:10
#, fuzzy
msgid "Defining functions"
msgstr "関数の定義"

#: 05.5-Functions.md:12
#, no-wrap
#, fuzzy
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 2\n"
"end"
msgstr ""
"define :foo do\n"
" play 50\n"
" sleep 1\n"
" play 55\n"
" sleep 2\n"
"end"

#: 05.5-Functions.md:21
#, fuzzy
msgid ""
"Here, we've defined a new function called `foo`. We do this with our old frien"
"d the do/end block and the magic word `define` followed by the name we wish to"
" give to our function. We didn't have to call it `foo`, we could have called i"
"t anything we want such as `bar`, `baz` or ideally something meaningful to you"
" like `main_section` or `lead_riff`."
msgstr ""
"ここでは`foo`と呼ばれている新しい関数を見ていきます。これは以前から出てきている*do/end*ブロックと、`define`という魔法の言葉とともに働き"
"ます。しかし`bar`や`baz`や、`main_section`や`lead_riff`のようなある程度の意味を持った関数が呼び出せれば、`foo`を呼び"
"出す必要はありませんでした。"

#: 05.5-Functions.md:27
#, fuzzy
msgid ""
"Remember to prepend a colon `:` to the name of your function when you define i"
"t."
msgstr "それを定義するとき、関数の名前に`:`(コロン)を付加することを忘れないでください。"

#: 05.5-Functions.md:30
#, fuzzy
msgid "Calling functions"
msgstr "関数の呼び出し"

#: 05.5-Functions.md:32
#, fuzzy
msgid "Once we have defined our function we can call it by just writing its name:"
msgstr "いったん一つの関数を定義すると、ただ名前を書くことでそれを呼びだすことができます。"

#: 05.5-Functions.md:35
#, no-wrap
#, fuzzy
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 0.5\n"
"end\n"
"foo\n"
"sleep 1\n"
"2.times do\n"
"  foo\n"
"end"
msgstr ""
"define :foo do\n"
" play 50\n"
" sleep 1\n"
" play 55\n"
" sleep 0.5\n"
"end\n"
"foo\n"
"sleep 1\n"
"2.times do\n"
" foo\n"
"end"

#: 05.5-Functions.md:52
#, fuzzy
msgid ""
"We can even use `foo` inside iteration blocks or anywhere we may have written "
"`play` or `sample`. This gives us a great way to express ourselves and to crea"
"te new meaningful words for use in our compositions."
msgstr ""
"`foo`は、イテレーション(繰り返し)ブロック内の`play`や`sample`などの書かれたコード内やどこからでも使うことができます。 この関数は、楽曲"
"の中で自分自身を新しい意味ある言葉として定義し、それ自身を表現する際に非常に優れた方法です。"

#: 05.5-Functions.md:56
#, fuzzy
msgid "Functions are remembered across runs"
msgstr "領域を超えた関数の利用"

#: 05.5-Functions.md:58
#, fuzzy
msgid ""
"So far, every time you've pressed the Run button, Sonic Pi has started from a "
"completely blank slate. It knows nothing except for what is in the buffer. You"
" can't reference code in another buffer or another thread. However, functions "
"change that. When you define a function, Sonic Pi *remembers* it. Let's try it"
". Delete all the code in your buffer and replace it with:"
msgstr ""
"これまでのところ、`Run`ボタンを押すたびに、Sonic Piを完全に白紙の状態からはじめました。 これまでワークスペースをなぜとり除いているかについては"
"触れてきませんでした。 これは１つのワークスペースのみで再生されていたからで、別のワークスペース または別のスレッド内のコードを参照することはできなかったか"
"らです。 しかし、関数はそれを変えることができます。あなたが関数を定義すると、 Sonic Piはそれを覚えることができます。では、ちょっとやってみましょう"
"。 まずワークスペースにあるすべてのコードを消して、`foo`と名づけたものに変更します。"

#: 05.5-Functions.md:65
#, no-wrap
msgid "foo"
msgstr "foo"

#: 05.5-Functions.md:69
#, fuzzy
msgid ""
"Press the Run button - and hear your function play. Where did the code go? How"
" did Sonic Pi know what to play? Sonic Pi just remembered your function - so e"
"ven after you deleted it from the buffer, it remembered what you had typed. Th"
"is behaviour only works with functions created using `define` (and `defonce`)."
msgstr ""
"`Run`ボタンを押して、関数の`foo`が再生されることを確認してください。 コードはどこにいったのでしょう？また、Sonic Piは、実行の仕方を どの"
"ように知っていたのでしょうか？Sonic Piはワークスペースを消したあとでも、 あなたが打ち込んだ関数を覚えていて、定義した関数ををしっかりと再生してみせ"
"たのです。 この動作は`define`もしくは`defonce`を使用した時にだけ働く機能です。"

#: 05.5-Functions.md:75
#, fuzzy
msgid "Parameterised functions"
msgstr "変数化された関数"

#: 05.5-Functions.md:77
#, fuzzy
msgid ""
"You might be interested in knowing that just like you can pass min and max val"
"ues to `rrand`, you can teach your functions to accept arguments. Let's take a"
" look:"
msgstr "最小値と最大値の情報をrrandへ渡すように、変動する引数を受け取る面白い関数をご紹介しましょう。 それでは見てみましょう。"

#: 05.5-Functions.md:81
#, no-wrap
#, fuzzy
msgid ""
"define :my_player do |n|\n"
"  play n\n"
"end\n"
"my_player 80\n"
"sleep 0.5\n"
"my_player 90"
msgstr ""
"define :my_player do |n|\n"
" play n\n"
"end\n"
"my_player 80\n"
"sleep 0.5\n"
"my_player 90"

#: 05.5-Functions.md:91
#, fuzzy
msgid ""
"This isn't very exciting, but it illustrates the point. We've created our own "
"version of `play` called `my_player` which is parameterised."
msgstr "この点を解説するのはとても難しいのですが、ポイントを説明します。 `play`を`my_player`という関数として定義します。"

#: 05.5-Functions.md:94
#, fuzzy
msgid ""
"The parameters need to go after the `do` of the `define` do/end block, surroun"
"ded by vertical goalposts `|` and separated by commas `,`. You may use any wor"
"ds you want for the parameter names."
msgstr ""
"この変数は`define`で括られた*do/end*ブロックのdoの後に記述する必要があります。 変数は、垂直のバー`|`で囲み、複数の変数を扱う場合はカン"
"マ `,`で分割し、 変数の名前はどんな言葉でもつけることが出来ます。"

#: 05.5-Functions.md:98
#, fuzzy
msgid ""
"The magic happens inside the `define` do/end block. You may use the parameter "
"names as if they were real values. In this example I'm playing note `n`. You c"
"an consider the parameters as a kind of promise that when the code runs, they "
"will be replaced with actual values. You do this by passing a parameter to the"
" function when you call it. I do this with `my_player 80` to play note 80. Ins"
"ide the function definition, `n` is now replaced with 80, so `play n` turns in"
"to `play 80`. When I call it again with `my_player 90`, `n` is now replaced wi"
"th 90, so `play n` turns into `play 90`."
msgstr ""
"この魔法は、`define`を使い*do/end*ブロック内で行われます。 また、実行されるための値のような変数名を使うことも出来ます。 この例で言うと、`"
"n`という関数になります。コードが起動した際のひとつの約束ごととして、 変数はその領域に記憶されている実際の数値に置き換えられます。 あなたが関数を呼び出し"
"た際は、この数値を関数に置き換えて実行することが出来るのです。 この`my_player 80`というのは、音階80の音を鳴らすということです。 関数の定義"
"の中で、`n`はすぐに`80`に置き換えられます。 そして`play n`は`play 80`となるのです。また次に`my_player 90`という関数を"
"呼び出す際には、 `n`はすぐさま`90`に置き換えられ、`play n`は`play 90`として再生されます。"

#: 05.5-Functions.md:108
#, fuzzy
msgid "Let's see a more interesting example:"
msgstr "それではさらにおもしろい例を見てみましょう。"

#: 05.5-Functions.md:110
#, no-wrap
#, fuzzy
msgid ""
"define :chord_player do |root, repeats| \n"
"  repeats.times do\n"
"    play chord(root, :minor), release: 0.3\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"chord_player :e3, 2\n"
"sleep 0.5\n"
"chord_player :a3, 3\n"
"chord_player :g3, 4\n"
"sleep 0.5\n"
"chord_player :e3, 3"
msgstr ""
"define :chord_player do |root, repeats|\n"
" repeats.times do\n"
"   play chord(root, :minor), release: 0.3\n"
"   sleep 0.5\n"
" end\n"
"end\n"
"chord_player :e3, 2\n"
"sleep 0.5\n"
"chord_player :a3, 3\n"
"chord_player :g3, 4\n"
"sleep 0.5\n"
"chord_player :e3, 3"

#: 05.5-Functions.md:126
#, fuzzy
msgid ""
"Here I used `repeats` as if it was a number in the line `repeats.times do`. I "
"also used `root` as if it was a note name in my call to `play`."
msgstr ""
"ここでは `repeats.times do`という行の中で一つの数値のように `repeats` が使われます。 また、 `play` を呼び出した際の音"
"階の名前と同様に `root` が使われています。"

#: 05.5-Functions.md:129
#, fuzzy
msgid ""
"See how we're able to write something very expressive and easy to read by movi"
"ng a lot of our logic into a function!"
msgstr "関数によって、高度な表現と沢山の構造を簡単に読み込ませることが出来るということがわかりましたね！"

#: 05.6-Variables.md:1
#, fuzzy
msgid "5.6 Variables"
msgstr "5.6 変数値"

#: 05.6-Variables.md:3
#, fuzzy
msgid "Variables"
msgstr "変数値"

#: 05.6-Variables.md:5
#, fuzzy
msgid ""
"A useful thing to do in your code is to create names for things. Sonic Pi make"
"s this very easy, you write the name you wish to use, an equal sign (`=`), the"
"n the thing you want to remember:"
msgstr ""
"コードを書いていく中で役に立つことは、覚えやすい名前を作成することです。 Sonic Piはこれをとても簡単に作ることができます。あなたが使用したいと思う名"
"前に続けて、 等号のイコール(`=`)を書き、そのあとに覚えておきたい名前を書きます。"

#: 05.6-Variables.md:9
#, no-wrap
msgid "sample_name = :loop_amen"
msgstr "sample_name = :loop_amen"

#: 05.6-Variables.md:13
#, fuzzy
msgid ""
"Here, we've 'remembered' the symbol `:loop_amen` in the variable `sample_name`"
". We can now use `sample_name` everywhere we might have used `:loop_amen`. For"
" example:"
msgstr ""
"ここで変数`sample_name`は`:loop_amen`という記号として記憶されます。 sample_nameを使うときはどこでも`:loop_ame"
"n`を使ったことになるのです。 例、"

#: 05.6-Variables.md:17
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name"
msgstr ""
"sample_name = :loop_amen\n"
"sample sample_name"

#: 05.6-Variables.md:22
#, fuzzy
msgid ""
"There are three main reasons for using variables in Sonic Pi: communicating me"
"aning, managing repetition and capturing the results of things."
msgstr "Sonic Piでは変数を使う際、3つの主要な使い方があります。意味の伝達、繰り返しの操作、そして結果の獲得です。"

#: 05.6-Variables.md:26
#, fuzzy
msgid "Communicating Meaning"
msgstr "意味の伝達"

#: 05.6-Variables.md:28
#, fuzzy
msgid ""
"When you write code it's easy to just think you're telling the computer how to"
" do stuff - as long as the computer understands it's OK. However, it's importa"
"nt to remember that it's not just the computer that reads the code. Other peop"
"le may read it too and try to understand what's going on. Also, you're likely "
"to read your own code in the future and try to understand what's going on. Alt"
"hough it might seem obvious to you now - it might not be so obvious to others "
"or even your future self!"
msgstr ""
"コードを書くとき、あなたはコンピュータが理解しOKを出してくれることだけを考え、どのようにコンピュータに伝えて動作させるのかを意識するだけであれば、それは簡"
"単な事ですね。しかし、覚えておかなくてはいけない大事なことは、コンピュータがコードを読むということだけではないということです。他の人もそれを読み、何が起こっ"
"ているか理解をしようとするでしょう。あなた自身も将来、自分の書いたコードを見返して、どんなことをしたのか？理解する必要がある時が来るかもしれません。たぶん確"
"実にあなたにも他の人にも、そういったことが起こるのです!"

#: 05.6-Variables.md:36
#, fuzzy
msgid ""
"One way to help others understand what your code is doing is to write comments"
" (as we saw in a previous section). Another is to use meaningful variable name"
"s. Look at this code:"
msgstr ""
"あなたのコードがどのように動いているのか他人が理解をするためにコメントを書く（前章で確認できます）という方法があります。もう一つの方法として、理解しやすい変"
"数名を使うという方法があります。"

#: 05.6-Variables.md:40
#, no-wrap
msgid "sleep 1.7533"
msgstr "sleep 1.7533"

#: 05.6-Variables.md:44
#, fuzzy
msgid ""
"Why does it use the number `1.7533`? Where did this number come from? What doe"
"s it mean? However, look at this code:"
msgstr ""
"上の例だけを見ると、なぜ `1.7533`という数値を使ったのでしょう？その数値はどこから来たのか？それは何を意味しているのか？という疑問がわきます。しかし"
"、次のコードを見てみましょう。"

#: 05.6-Variables.md:47
#, no-wrap
msgid ""
"loop_amen_duration = 1.7533\n"
"sleep loop_amen_duration"
msgstr ""
"loop_amen_duration = 1.7533\n"
"sleep loop_amen_duration"

#: 05.6-Variables.md:52
#, fuzzy
msgid ""
"Now, it's much clearer what `1.7533` means: it's the duration of the sample `:"
"loop_amen`! Of course, you might say why not simply write:"
msgstr ""
"こう書くとすぐに `1.7533` がサンプル音源`:loop_amen`の長さであるということがわかりますね。もちろん、下記のように一行に書くことも可能で"
"す。"

#: 05.6-Variables.md:55
#, no-wrap
msgid "sleep sample_duration(:loop_amen)"
msgstr "sleep sample_duration(:loop_amen)"

#: 05.6-Variables.md:59
#, fuzzy
msgid "Which, of course, is a very nice way of communicating the intent of the code."
msgstr "どちらを用いたとしても、コードの意味がよりわかりやすいものになりました。"

#: 05.6-Variables.md:62
#, fuzzy
msgid "Managing Repetition"
msgstr "繰り返しの操作"

#: 05.6-Variables.md:64
#, fuzzy
msgid ""
"Often you see a lot of repetition in your code and when you want to change thi"
"ngs, you have to change it in a lot of places. Take a look at this code:"
msgstr "コードの中では沢山の繰り返しが頻繁に見られます。また、もし何かを変更したいときは、膨大な場所を変更する必要も出てきます。次のコードをみて下さい。"

#: 05.6-Variables.md:68
#, no-wrap
msgid ""
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)\n"
"sample :loop_amen, rate: 0.5\n"
"sleep sample_duration(:loop_amen, rate: 0.5)\n"
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)"
msgstr ""
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)\n"
"sample :loop_amen, rate: 0.5\n"
"sleep sample_duration(:loop_amen, rate: 0.5)\n"
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)"

#: 05.6-Variables.md:77
#, fuzzy
msgid ""
"We're doing a lot of things with `:loop_amen`! What if we wanted to hear what "
"it sounded like with another loop sample such as `:loop_garzul`? We'd have to "
"find and replace all `:loop_amen`s with `:loop_garzul`. That might be fine if "
"you have lots of time - but what if you're performing on stage? Sometimes you "
"don't have the luxury of time - especially if you want to keep people dancing."
msgstr ""
"`:loop_amen`によって沢山の事ができるのです！もし`:loop_garzul`のような他のサンプルの繰り返しによる音が聞きたい場合はどうしましょう"
"？そうするにはすべての`:loop_amen`を探しだして`:loop_garzul`に変更する必要があります。そんな変更ができる沢山の時間があればいいんで"
"すが…もし仮にあなたがステージの上で演奏している最中だったらどうでしょう？特にみんなのダンスを止めないために、変更するためのそんな優雅な時間はないかもしれま"
"せん。"

#: 05.6-Variables.md:84
#, fuzzy
msgid "What if you'd written your code like this:"
msgstr "下記のようなコードを書いたとして、"

#: 05.6-Variables.md:86
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)\n"
"sample sample_name, rate: 0.5\n"
"sleep sample_duration(sample_name, rate: 0.5)\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)"
msgstr ""
"sample_name = :loop_amen\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)\n"
"sample sample_name, rate: 0.5\n"
"sleep sample_duration(sample_name, rate: 0.5)\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)"

#: 05.6-Variables.md:96
#, fuzzy
msgid ""
"Now, that does exactly the same as above (try it). It also gives us the abilit"
"y to just change one line `sample_name = :loop_amen` to `sample_name = :loop_g"
"arzul` and we change it in many places through the magic of variables."
msgstr ""
"そして、これは試しの前述のものと同様のものです。これも`sample_name = :loop_amenをsample_name = :loop_garzu"
"l`に一行を変更する機能を備えています。つまりこのように変数の魔法によって多くのポイントを変更させることができるのです。"

#: 05.6-Variables.md:101
#, fuzzy
msgid "Capturing Results"
msgstr "結果の獲得"

#: 05.6-Variables.md:103
#, fuzzy
msgid ""
"Finally, a good motivation for using variables is to capture the results of th"
"ings. For example, you may wish to do things with the duration of a sample:"
msgstr "最後に、変数を使う優れた理由はそのコードの結果の獲得をするということです。例えば、サンプル音源の長さを使って何かを行いたい時など。"

#: 05.6-Variables.md:107
#, no-wrap
msgid "sd = sample_duration(:loop_amen)"
msgstr "sd = sample_duration(:loop_amen)"

#: 05.6-Variables.md:111
#, fuzzy
msgid "We can now use `sd` anywhere we need the duration of the `:loop_amen` sample."
msgstr "上記のように書くことで、今、`:loop_amen`というサンプルの長さが必要な時、どこにでも`sd`を使うことが出来るようになります。"

#: 05.6-Variables.md:114
#, fuzzy
msgid ""
"Perhaps more importantly, a variable allows us to capture the result of a call"
" to `play` or `sample`:"
msgstr "おそらくもっと重要なのは、変数は、playやsampleの結果をキャプチャすることができることです。"

#: 05.6-Variables.md:117
#, no-wrap
msgid "s = play 50, release: 8"
msgstr "s = play 50, release: 8"

#: 05.6-Variables.md:121
#, fuzzy
msgid ""
"Now we have caught and remembered `s` as a variable, which allows us to contro"
"l the synth as it is running:"
msgstr "またこのように書くことで `s` が変数として記憶され、シンセをコントロールすることを許容するようになります。"

#: 05.6-Variables.md:124
#, no-wrap
msgid ""
"s = play 50, release: 8\n"
"sleep 2\n"
"control s, note: 62"
msgstr ""
"s = play 50, release: 8\n"
"sleep 2\n"
"control s, note: 62"

#: 05.6-Variables.md:130
#, fuzzy
msgid "We'll look into controlling synths in more detail in a later section."
msgstr "また、後の章ではもっと詳しくシンセをコントロールすることも学びます。"

#: 05.7-Thread-Synchronisation.md:1
#, fuzzy
msgid "5.7 Thread Synchronisation"
msgstr "5.7 スレッドの同期"

#: 05.7-Thread-Synchronisation.md:3
#, fuzzy
msgid "Thread Synchronisation"
msgstr "スレッドの同期"

#: 05.7-Thread-Synchronisation.md:5
#, fuzzy
msgid ""
"Once you have become sufficiently advanced live coding with a number of functi"
"ons and threads simultaneously, you've probably noticed that it's pretty easy "
"to make a mistake in one of the threads which kills it. That's no big deal, be"
"cause you can easily restart the thread by hitting Run. However, when you rest"
"art the thread it is now *out of time* with the original threads."
msgstr ""
"一度、関数やスレッドを使用したとても高度なライブコーディングを行うと、おそらくスレッド内にある間違いを直すことが、とても簡単なことを理解できるでしょう。あな"
"たはコードを起動してスレッドを再スタートさせることが容易にできるので、それは全然大したことではないのでしょう。しかし、スレッドを再スタートさせるときは、元々"
"のスレッドとは調子がずれる事になります。"

#: 05.7-Thread-Synchronisation.md:12
#, fuzzy
msgid "Inherited Time"
msgstr "継続時間"

#: 05.7-Thread-Synchronisation.md:14
#, fuzzy
msgid ""
"As we discussed earlier, new threads created with `in_thread` inherit all of t"
"he settings from the parent thread. This includes the current time. This means"
" that threads are always in time with each other when started simultaneously."
msgstr ""
"以前話した時に、新しいスレッドが`in_thread`として作られると元のスレッドのすべてのセッティングが継続されることを学びました。これは現在の時間を含ん"
"でいます。つまり、スレッドが同時にスタートするときには常に他のスレッドと同期していることを意味しています。"

#: 05.7-Thread-Synchronisation.md:19
#, fuzzy
msgid ""
"However, when you start a thread on its own it starts with its own time which "
"is unlikely to be in sync with any of the other currently running threads."
msgstr "しかし、１つのスレッドを起動したときは、それは独自の時間で再生されるので、他の現在実行中のスレッドと同期していることはほとんどありません。"

#: 05.7-Thread-Synchronisation.md:23
#, fuzzy
msgid "Cue and Sync"
msgstr "Cue と Sync"

#: 05.7-Thread-Synchronisation.md:25
#, fuzzy
msgid ""
"Sonic Pi provides a solution to this problem with the functions `cue` and `syn"
"c`."
msgstr "Sonic Pi は`cue`と`sync`という関数を使ってこの問題の解決方法を提供します。"

#: 05.7-Thread-Synchronisation.md:28
#, fuzzy
msgid ""
"`cue` allows us to send out heartbeat messages to all other threads. By defaul"
"t the other threads aren't interested and ignore these heartbeat messages. How"
"ever, you can easily register interest with the `sync` function."
msgstr ""
"`cue`はすべての他のスレッドに向けてビートメッセージを送ることができます。初期状態の他のスレッドでは、これらのビートのメッセージは関係付けられず、無視さ"
"れます。しかし、`sync`関数を使えば、あなたは簡単にこの関連付けを登録することができるのです。"

#: 05.7-Thread-Synchronisation.md:33
#, fuzzy
msgid ""
"The important thing to be aware of is that `sync` is similar to `sleep` in tha"
"t it stops the current thread from doing anything for a period of time. Howeve"
"r, with `sleep` you specify how long you want to wait while with `sync` you do"
"n't know how long you will wait - as `sync` waits for the next `cue` from anot"
"her thread which may be soon or a long time away."
msgstr ""
"`sync`という機能は、一定の時間、実行中のスレッドを止める`sleep`という関数と非常に似ていることに気づくことが重要です。しかし、`sleep`では"
"どのくらい休止させるかを決めることができましたが、`sync`ではそれを決めることができず、`sync`は長さに関わらず、次の`cue` が出てくるまで待つ"
"のです。"

#: 05.7-Thread-Synchronisation.md:40
#, fuzzy
msgid "Let's explore this in a little more detail:"
msgstr "それでは、もうちょっと詳しくみていきましょう。"

#: 05.7-Thread-Synchronisation.md:42
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
" loop do\n"
"   cue :tick\n"
"   sleep 1\n"
" end\n"
"end\n"
"in_thread do\n"
" loop do\n"
"   sync :tick\n"
"   sample :drum_heavy_kick\n"
" end\n"
"end"

#: 05.7-Thread-Synchronisation.md:58
#, fuzzy
msgid ""
"Here we have two threads - one acting like a metronome, not playing any sounds"
" but sending out `:tick` heartbeat messages every beat. The second thread is s"
"ynchronising on `tick` messages and when it receives one it inherits the time "
"of the `cue` thread and continues running."
msgstr ""
"ここではふたつのスレッドが使われています。ひとつは音はなりませんがメトロノームのような機能として `:tick` を使って一秒ごとにビートの情報を送っていま"
"す。2つ目のスレッドはは`tick`の情報と同期し、そのビートの情報を受け取った際に、 `cue` のスレッドの時間に情報を引き継ぎ、起動を続けます。"

#: 05.7-Thread-Synchronisation.md:63
#, fuzzy
msgid ""
"As a result, we will hear the `:drum_heavy_kick` sample exactly when the other"
" thread sends the `:tick` message, even if the two threads didn't start their "
"execution at the same time:"
msgstr ""
"この結果、`:drum_heavy_kick`のサンプル音源は、厳密に同時のスタートでないふたつのスレッドであったとしても、他のスレッドに `:tick` "
"からの情報をきっちり受け取って正確にビートを刻んだ音が聞けるはずです。"

#: 05.7-Thread-Synchronisation.md:67
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"sleep(0.3)\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
" loop do\n"
"   cue :tick\n"
"   sleep 1\n"
" end\n"
"end\n"
"sleep(0.3)\n"
"in_thread do\n"
" loop do\n"
"   sync :tick\n"
"   sample :drum_heavy_kick\n"
" end\n"
"end"

#: 05.7-Thread-Synchronisation.md:85
#, fuzzy
msgid ""
"That naughty `sleep` call would typically make the second thread out of phase "
"with the first. However, as we're using `cue` and `sync`, we automatically syn"
"c the threads bypassing any accidental timing offsets."
msgstr ""
"このちょっとやっかいな `sleep(0.3)`は一つ目のスレッドとはあまり関係のない2つ目のスレッドを作り出してしまいます。しかしながら、`cue`や`s"
"ync`を使えば、タイミングがずれてしまうようなアクシデントを回避してくれます。"

#: 05.7-Thread-Synchronisation.md:90
#, fuzzy
msgid "Cue Names"
msgstr "Cueの名前"

#: 05.7-Thread-Synchronisation.md:92
#, fuzzy
msgid ""
"You are free to use whatever name you'd like for your `cue` messages - not jus"
"t `:tick`. You just need to ensure that any other threads are `sync`ing on the"
" correct name - otherwise they'll be waiting for ever (or at least until you p"
"ress the Stop button)."
msgstr ""
"`cue`には`:tick`以外のどんな好きな名前でも付けられます。その際には他のスレッドと動機させるために必ず正しい名前を使用する必要があります。もし違っ"
"た場合、永遠に（もしくはストップボタンを押すまで）それは`cue`の情報を待ち続けることになります。"

#: 05.7-Thread-Synchronisation.md:97
#, fuzzy
msgid "Let's play with a few `cue` names:"
msgstr "それでは`cue`の名前付けを見てみましょう。"

#: 05.7-Thread-Synchronisation.md:99
#, no-wrap
#, fuzzy
msgid ""
"in_thread do\n"
"  loop do \n"
"    cue [:foo, :bar, :baz].choose\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do \n"
"    sync :foo \n"
"    sample :elec_beep\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :bar\n"
"    sample :elec_flip\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :baz\n"
"    sample :elec_blup\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
" loop do\n"
"   cue [:foo, :bar, :baz].choose\n"
"   sleep 0.5\n"
" end\n"
"end\n"
"in_thread do\n"
" loop do\n"
"   sync :foo\n"
"   sample :elec_beep\n"
" end\n"
"end\n"
"in_thread do\n"
" loop do\n"
"   sync :bar\n"
"   sample :elec_flip\n"
" end\n"
"end\n"
"in_thread do\n"
" loop do\n"
"   sync :baz\n"
"   sample :elec_blup\n"
" end\n"
"end"

#: 05.7-Thread-Synchronisation.md:129
#, fuzzy
msgid ""
"Here we have a main `cue` loop which is randomly sending one of the heartbeat "
"names `:foo`, `:bar` or `:baz`. We then also have three loop threads syncing o"
"n each of those names independently and then playing a different sample. The n"
"et effect is that we hear a sound every 0.5 beats as each of the `sync` thread"
"s is randomly synced with the `cue` thread and plays its sample."
msgstr ""
"ここではメインの`cue`でビートメッセージをランダムに`:foo`と`:bar`、`:baz`に送るよう設定しています。それから3つのスレッドがそれぞれ独"
"自に同期して、それぞれ設定されたサンプルの音を再生します。この関係付けられた結果から、`cue`のスレッドによって、それぞれが同期しながら0.5秒刻みに\\`"
"syncスレッドの音がランダムに再生され、そしてサンプルが再生されます。"

#: 05.7-Thread-Synchronisation.md:136
#, fuzzy
msgid ""
"This of course also works if you order the threads in reverse as the `sync` th"
"reads will simply sit and wait for the next `cue`."
msgstr "逆に`sync`スレッドを次の`cue`まで居座り続けさせ待たせるように、 それらのスレッドに送るように設定しても、もちろんそれは動作します。"

#: 06-FX.md:1
#, fuzzy
msgid "6 FX"
msgstr "6 効果"

#: 06-FX.md:3
#, fuzzy
msgid "Studio FX"
msgstr "スタジオ エフェクト"

#: 06-FX.md:5
#, fuzzy
msgid ""
"One of the most rewarding and fun aspects of Sonic Pi is the ability to easily"
" add studio effects to your sounds. For example, you may wish to add some reve"
"rb to parts of your piece, or some echo or perhaps even distort or wobble your"
" basslines."
msgstr ""
"Sonic Piには、あなたの作ったサウンドに簡単にスタジオ·エフェクトを追加できるという最もやりがいのある楽しい側面があります。たとえば、部分的にリバーブ"
"を追加したり、エコーやディストーション(歪み)、ワブルベース（ベース音にフィルターLFOを掛け、断続的な音にすること）を加えることができます。"

#: 06-FX.md:10
#, fuzzy
msgid ""
"Sonic Pi provides a very simple yet powerful way of adding FX. It even allows "
"you to chain them (so you can pass your sounds through distortion, then echo a"
"nd then reverb) and also control each individual FX unit with opts (in a simil"
"ar way to giving params to synths and samples). You can even modify the opts o"
"f the FX whilst it's still running. So, for example, you could increase the re"
"verb on your bass throughout the track..."
msgstr ""
"Sonic Piには、エフェクト（効果）を追加する非常にシンプルで強力な方法があります。それも、あなたが作った音にディストーション(歪み)を通し、その後エコ"
"ー、さらにリバーブと、それらをチェーン（連結）させ、また、シンセやサンプルにオプションを与えるのと同様の方法でエフェクトユニットのオプションを個別に制御する"
"ことができ、実行されている間でも、オプションを変更することも可能です。だから、例えば、トラックのいたるところでベースのリバーブを強くするということができるの"
"です。"

#: 06-FX.md:18
#, fuzzy
msgid "Guitar Pedals"
msgstr "ギター エフェクター"

#: 06-FX.md:20
#, fuzzy
msgid ""
"If all of this sounds a bit complicated, don't worry. Once you play around wit"
"h it a little, it will all become quite clear. Before you do though, a simple "
"analogy is that of guitar FX pedals. There are many kinds of FX pedals you can"
" buy. Some add reverb, others distort etc. A guitarist will plug his or her gu"
"itar into one FX pedal - i.e. distortion -, then take another cable and connec"
"t (chain) a reverb pedal. The output of the reverb pedal can then be plugged i"
"nto the amplifier:"
msgstr ""
"もし、この話が少し複雑に聞こえる場合でも、心配は無用です。一度、少し触れてみれば、すぐに理解することができることでしょう。いわば、ギターのエフェクターのよう"
"なものをイメージしてください。購入できるギターエフェクターには多くの種類がありますが、リバーブ、ディストーションなど幾つかを数珠繋ぎに追加することができます"
"。ギタリストは、自分のギターにエフェクターの一つ（ディストーションなど）を接続し、そして別のケーブルでリバーブエフェクターに繋ぎます。そしてリバーブエフェク"
"ターの出口はギターアンプに繋ぐことができるわけです。"

#: 06-FX.md:29
#, no-wrap
#, fuzzy
msgid "Guitar -> Distortion -> Reverb -> Amplifier"
msgstr "ギター -> ディストーション -> リバーブ -> アンプ"

#: 06-FX.md:33
#, fuzzy
msgid ""
"This is called FX chaining. Sonic Pi supports exactly this. Additionally, each"
" pedal often has dials and sliders to allow you to control how much distortion"
", reverb, echo etc. to apply. Sonic Pi also supports this kind of control. Fin"
"ally, you can imagine a guitarist playing whilst someone plays with the FX con"
"trols whilst they're playing. Sonic Pi also supports this - but instead of nee"
"ding someone else to control things for you, that's where the computer steps i"
"n."
msgstr ""
"これをエフェクトチェーンと呼びます。Sonic Piは正にこれをサポートしています。さらに、ディストーション、リバーブ、エコーなどのエフェクターの多くは、ど"
"のくらい効果を加えるのか、制御できるようなダイヤルやスライダを持っていて、Sonic Piもこの種の制御をサポートしているということです。ついに、あなたはギ"
"タリストがエフェクターを使いながらギターを演奏する姿を想像することができていることでしょう。ただ、Sonic Piでは、それをコントロールするために他の何か"
"を必要としません。それがコンピュータが代役を務めているのです。"

#: 06-FX.md:42
#, fuzzy
msgid "Let's explore FX!"
msgstr "さあ、エフェクトを探究していきましょう！"

#: 06.1-Adding-FX.md:1
#, fuzzy
msgid "6.1 Adding FX"
msgstr "6.1 エフェクトの追加"

#: 06.1-Adding-FX.md:3
#, fuzzy
msgid "Adding FX"
msgstr "エフェクトの追加"

#: 06.1-Adding-FX.md:5
#, fuzzy
msgid ""
"In this section we'll look at a couple of FX: reverb and echo. We'll see how t"
"o use them, how to control their opts and how to chain them."
msgstr ""
"このセクションでは、エフェクター「リバーブとエコー」の組み合わせを見ていきます。 それらをどのようにチェーン接続するか、どのように制御するのか、これらの使用"
"方法について説明します。"

#: 06.1-Adding-FX.md:9
#, fuzzy
msgid ""
"Sonic Pi's FX system uses blocks. So if you haven't read section 5.1 you might"
" want to take a quick look and then head back."
msgstr "Sonic Piのエフェクトシステムは、ブロックを使用します。 セクション5.1を読んでいなければ、戻って目を通してください。"

#: 06.1-Adding-FX.md:12
#, fuzzy
msgid "Reverb"
msgstr "リバーブ"

#: 06.1-Adding-FX.md:14
#, fuzzy
msgid ""
"If we want to use reverb we write `with_fx :reverb` as the special code to our"
" block like this:"
msgstr "リバーブを使用する場合、この様に特殊なコード`with_fx :reverb`をブロックに書きます。"

#: 06.1-Adding-FX.md:17
#, no-wrap
#, fuzzy
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :reverb do\n"
" play 50\n"
" sleep 0.5\n"
" sample :elec_plip\n"
" sleep 0.5\n"
" play 62\n"
"end"

#: 06.1-Adding-FX.md:27
#, fuzzy
msgid ""
"Now play this code and you'll hear it played with reverb. It sounds good, does"
"n't it! Everything sounds pretty nice with reverb."
msgstr "早速コードを実行してリバーブを聞いてみましょう。いいでしょ！音全体が残響効果で素晴らしくなります。"

#: 06.1-Adding-FX.md:30
#, fuzzy
msgid "Now let's look what happens if we have code outside the do/end block:"
msgstr "さあ、次はブロックの外にコードを書いて何が起こるか見てみましょう。"

#: 06.1-Adding-FX.md:32
#, no-wrap
#, fuzzy
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""
"with_fx :reverb do\n"
" play 50\n"
" sleep 0.5\n"
" sample :elec_plip\n"
" sleep 0.5\n"
" play 62\n"
"end\n"
"sleep 1\n"
"play 55"

#: 06.1-Adding-FX.md:45
#, fuzzy
msgid ""
"Notice how the final `play 55` isn't played with reverb. This is because it is"
" *outside* the do/end block, so it isn't captured by the reverb FX."
msgstr ""
"どうして最後の `play 55`にリバーブが適用されないのでしょうか。 それはブロックの*外部*に書かれているため、リバーブエフェクトは適応されないのです"
"。"

#: 06.1-Adding-FX.md:48
#, fuzzy
msgid ""
"Similarly, if you make sounds before the do/end block, they also won't be capt"
"ured:"
msgstr "*do/end*ブロックの手前で音を生成する場合も同様にリバーブは適用されません。"

#: 06.1-Adding-FX.md:51
#, no-wrap
#, fuzzy
msgid ""
"play 55\n"
"sleep 1\n"
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""
"play 55\n"
"sleep 1\n"
"with_fx :reverb do\n"
" play 50\n"
" sleep 0.5\n"
" sample :elec_plip\n"
" sleep 0.5\n"
" play 62\n"
"end\n"
"sleep 1\n"
"play 55"

#: 06.1-Adding-FX.md:67
#, fuzzy
msgid "Echo"
msgstr "Echo：エコー"

#: 06.1-Adding-FX.md:69
#, fuzzy
msgid "There are many FX to choose from. How about some echo?"
msgstr "選択できる効果は他にもたくさんあります。エコーはどうでしょうか?"

#: 06.1-Adding-FX.md:71
#, no-wrap
#, fuzzy
msgid ""
"with_fx :echo do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo do\n"
" play 50\n"
" sleep 0.5\n"
" sample :elec_plip\n"
" sleep 0.5\n"
" play 62\n"
"end"

#: 06.1-Adding-FX.md:81
#, fuzzy
msgid ""
"One of the powerful aspects of Sonic Pi's FX blocks is that they may be passed"
" opts similar to opts we've already seen with `play` and `sample`. For example"
" a fun echo opt to play with is `phase:` which represents the duration of a gi"
"ven echo in beats. Let's make the echo slower:"
msgstr ""
"Sonic Piのエフェクトブロックの強力な側面の一つは、既に`play`と`sample`で見てきたように、 オプションと同様の数値が渡されることです。た"
"とえば、エコーの楽しいオプションは、 秒単位で遅れを示す`phase`で表され、エコーの長さを指定します。 下記のコードで、音の響きをゆっくりにしてみましょ"
"う。"

#: 06.1-Adding-FX.md:87
#, no-wrap
#, fuzzy
msgid ""
"with_fx :echo, phase: 0.5 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.5 do\n"
" play 50\n"
" sleep 0.5\n"
" sample :elec_plip\n"
" sleep 0.5\n"
" play 62\n"
"end"

#: 06.1-Adding-FX.md:97
#, fuzzy
msgid "Let's also make the echo faster:"
msgstr "エコーの遅れを早くしてみましょう。"

#: 06.1-Adding-FX.md:99
#, no-wrap
#, fuzzy
msgid ""
"with_fx :echo, phase: 0.125 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.125 do\n"
" play 50\n"
" sleep 0.5\n"
" sample :elec_plip\n"
" sleep 0.5\n"
" play 62\n"
"end"

#: 06.1-Adding-FX.md:109
#, fuzzy
msgid ""
"Let's make the echo take longer to fade away by setting the `decay:` time to 8"
" beats:"
msgstr "エコーが８秒間の時間でフェードアウトする様に、`decay`を設定してみましょう。"

#: 06.1-Adding-FX.md:112
#, no-wrap
#, fuzzy
msgid ""
"with_fx :echo, phase: 0.5, decay: 8 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.5, decay: 8 do\n"
" play 50\n"
" sleep 0.5\n"
" sample :elec_plip\n"
" sleep 0.5\n"
" play 62\n"
"end"

#: 06.1-Adding-FX.md:122
#, fuzzy
msgid "Nesting FX"
msgstr "エフェクトの入れ子"

#: 06.1-Adding-FX.md:124
#, fuzzy
msgid ""
"One of the most powerful aspects of the FX blocks is that you can nest them. T"
"his allows you to very easily chain FX together. For example, what if you want"
"ed to play some code with echo and then with reverb? Easy, just put one inside"
" the other:"
msgstr ""
"ブロック効果の中で最も強力な側面の一つは、入れ子ができるということです。 これはとても簡単にエフェクト同士を連結することができます。たとえば、あなたはどのよ"
"うにエコーとリバーブの両方を適応さますか？ その答えは単純です。一つの効果の内側にもう一方を配置するだけです。"

#: 06.1-Adding-FX.md:129
#, no-wrap
#, fuzzy
msgid ""
"with_fx :reverb do\n"
"  with_fx :echo, phase: 0.5, decay: 8 do\n"
"    play 50\n"
"    sleep 0.5\n"
"    sample :elec_blup\n"
"    sleep 0.5\n"
"    play 62\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
" with_fx :echo, phase: 0.5, decay: 8 do\n"
"   play 50\n"
"   sleep 0.5\n"
"   sample :elec_blup\n"
"   sleep 0.5\n"
"   play 62\n"
" end\n"
"end"

#: 06.1-Adding-FX.md:141
#, fuzzy
msgid ""
"Think about the audio flowing from the inside out. The sound of all the code w"
"ithin the inner do/end block such as `play 50` is first sent to the echo FX an"
"d the sound of the echo FX is in turn sent out to the reverb FX."
msgstr ""
"オーディオの流れについて逆側から追ってみましょう。`play 50`を含む`block`の*do/end*ブロック内のコード全ては、最初にエコーエフェクトに"
"送られ、その音がリバーブエフェクトへと順に送られていきます。"

#: 06.1-Adding-FX.md:146
#, fuzzy
msgid ""
"We may use very deep nestings for crazy results. However, be warned, the FX ca"
"n use a lot of resources and when you nest them you're effectively running mul"
"tiple FX simultaneously. So be sparing with your use of FX especially on low p"
"owered platforms such as the Raspberry Pi."
msgstr ""
"クレイジーなサウンドを得るために非常に深く入れ子を使用することができます。しかし、一度にたくさんのエフェクトを入れ子で実行すると多くのリソースを必要とするた"
"め、注意してください。そのため、特にラズベリーパイのような低電力供給のプラットフォームではエフェクトの使用を節約することも必要です。"

#: 06.1-Adding-FX.md:151
#, fuzzy
msgid "Discovering FX"
msgstr "エフェクターの発見"

#: 06.1-Adding-FX.md:153
#, fuzzy
msgid ""
"Sonic Pi ships with a large number of FX for you to play with. To find out whi"
"ch ones are available, click on FX in the far left of this help system and you"
"'ll see a list of available options. Here's a list of some of my favourites:"
msgstr ""
"Sonic Piは、あなたが演奏するためにたくさんのエフェクターを搭載しています。どういった効果が使えるのかを見つけ出すためには、ヘルプシステム画面の下にあ"
"る効果ボタンをクリックし、利用可能なリストを見てください。ここに私のお気に入りを記載しておきます。"

#: 06.1-Adding-FX.md:158
msgid "wobble,"
msgstr ""

#: 06.1-Adding-FX.md:159
msgid "reverb,"
msgstr ""

#: 06.1-Adding-FX.md:160
msgid "echo,"
msgstr ""

#: 06.1-Adding-FX.md:161
msgid "distortion,"
msgstr ""

#: 06.1-Adding-FX.md:162
msgid "slicer"
msgstr ""

#: 06.1-Adding-FX.md:164
#, fuzzy
msgid "Now go crazy and add FX everywhere for some amazing new sounds!"
msgstr "さあ、エフェクターを追加して驚きの新しいサウンドの虜となってくだい！"

#: 06.2-FX-in-Practice.md:1
#, fuzzy
msgid "6.2 FX in Practice"
msgstr "6.2 エフェクトの実践"

#: 06.2-FX-in-Practice.md:3
#, fuzzy
msgid "FX in Practice"
msgstr "エフェクトの実践"

#: 06.2-FX-in-Practice.md:5
#, fuzzy
msgid ""
"Although they look deceptively simple on the outside, FX are actually quite co"
"mplex beasts internally. Their simplicity often entices people to overuse them"
" in their pieces. This may be fine if you have a powerful machine, but if - li"
"ke me - you use a Raspberry Pi to jam with, you need to be careful about how m"
"uch work you ask it to do if you want to ensure the beats keep flowing."
msgstr ""
"外観は一見シンプルですが、 エフェクト内部は実際には異常に複雑なモンスターです。そのシンプルさは、しばしば、この機能を酷使させようと誘惑します。もしもあなた"
"が強力なマシンを持っている場合は問題は無いかもしれませんが、ラズベリーパイで動作させる場合、確実にビートを刻み続けるようにしたいのであれば、どのくらいの負荷"
"をかけているのか注意する必要があります。"

#: 06.2-FX-in-Practice.md:12
#, fuzzy
msgid "Consider this code:"
msgstr "このコードを考えてみましょう。"

#: 06.2-FX-in-Practice.md:14
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
" with_fx :reverb do\n"
"   play 60, release: 0.1\n"
"   sleep 0.125\n"
" end\n"
"end"

#: 06.2-FX-in-Practice.md:23
#, fuzzy
msgid ""
"In this code we're playing note 60 with a very short release time, so it's a s"
"hort note. We also want reverb so we've wrapped it in a reverb block. All good"
" so far. Except..."
msgstr ""
"このコードは非常に短いリリースタイムで音符`60`を演奏します。そして、リバーブを加えたいために、コードをリバーブで囲んでいます。問題はなさそうには見えます"
"が…。"

#: 06.2-FX-in-Practice.md:27
#, fuzzy
msgid ""
"Let's look at what the code does. First we have a `loop` which means everythin"
"g inside of it is repeated forever. Next we have a `with_fx` block. This means"
" we will create a new reverb FX *every time we loop*. This is like having a se"
"parate FX reverb pedal for every time you pluck a string on a guitar. It's coo"
"l that you can do this, but it's not always what you want. For example, this c"
"ode will struggle to run nicely on a Raspberry Pi. All the work of creating th"
"e reverb and then waiting until it needs to be stopped and removed is all hand"
"led by `with_fx` for you, but this takes CPU power which may be precious."
msgstr ""
"コードが何をするかを見ていきましょう。まず、`loop`は内側のすべてが永遠に繰り返すことを意味します。次に、`with_fx`ブロックがあります。これはル"
"ープが繰り返される度に、新しいリバーブエフェクトを作成することを意味します。ギターの弦を弾くたびに別々のリバーブエフェクターを用意して演奏しているようなもの"
"です。そんなことができたらかっこいいかもしれませんが、それはあなたが望むものとは限らないということです。たとえば、次のコードは、ラズベリーパイで実行させるた"
"めにはとても労力を要します。リバーブは`with_fx`によって制御され、停止か消去されるまで、生成され続け、スム−ズな演奏に必要とする大切なCPUパワーを"
"奪うことになりかねません。"

#: 06.2-FX-in-Practice.md:37
#, fuzzy
msgid ""
"How do we make it more similar to a traditional setup where our guitarist has "
"just *one* reverb pedal which all sounds pass through? Simple:"
msgstr "ギタリストのように、すべての音が1つのリバーブエフェクターを通る従来の設定と同様の流れを作るには、どうしたら良いでしょうか？ 以下、サンプルです。"

#: 06.2-FX-in-Practice.md:41
#, no-wrap
#, fuzzy
msgid ""
"with_fx :reverb do\n"
"  loop do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
" loop do\n"
"   play 60, release: 0.1\n"
"   sleep 0.125\n"
" end\n"
"end"

#: 06.2-FX-in-Practice.md:50
#, fuzzy
msgid ""
"We put our loop *inside* the `with_fx` block. This way we only create a single"
" reverb for all notes played in our loop. This code is a lot more efficient an"
"d would work fine on a Raspberry Pi."
msgstr ""
"`with_fx` ブロックの内部に`loop`を配置しす。この方法では、ループ内すべての音符の再生にリバーブを一つだけ作成します。このコードは効率的で、ラ"
"ズベリーパイで正常に動作します。"

#: 06.2-FX-in-Practice.md:54
#, fuzzy
msgid "A compromise is to use `with_fx` over an iteration within a loop:"
msgstr "`loop`内の繰り返しの上位に`with_fx`を使うことで折り合いを付けます。"

#: 06.2-FX-in-Practice.md:56
#, no-wrap
#, fuzzy
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    16.times do\n"
"      play 60, release: 0.1\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
" with_fx :reverb do\n"
"   16.times do\n"
"     play 60, release: 0.1\n"
"     sleep 0.125\n"
"   end\n"
" end\n"
"end"

#: 06.2-FX-in-Practice.md:67
#, fuzzy
msgid ""
"This way we've lifted the `with_fx` out of the inner part of the `loop` and we"
"'re now creating a new reverb every 16 notes."
msgstr "`loop`の外部に`with_fx`を引き上げることで、16の音程ごとに新しいリバーブを作成しています。"

#: 06.2-FX-in-Practice.md:70
msgid ""
"This is such a common pattern that `with_fx` supports an opt to do exactly thi"
"s but without having to write the `16.times` block:"
msgstr ""

#: 06.2-FX-in-Practice.md:73
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb, reps: 16 do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb, reps: 16 do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:82
msgid ""
"Both the `reps: 16` and `16.times do` examples will behave identically. The `r"
"eps: 16` essentially repeats the code in the `do/end` block 16 times so you ca"
"n use them both interchangeably and choose the one that feels best for you."
msgstr ""

#: 06.2-FX-in-Practice.md:87
#, fuzzy
msgid ""
"Remember, there are no mistakes, just possibilities. However, some of these ap"
"proaches will have a different sound and also different performance characteri"
"stics. So play around and use the approach that sounds best to you whilst also"
" working within the performance constraints of your platform."
msgstr ""
"これらの異なるアプローチからは、違うサウンド、また異なる性能をもたらします。だから、間違いでもなく可能性であることを覚えておいてください。あなたのプラットフ"
"ォームに応じた制約の中で、最も適切に働くアプローチを使いわけながら演奏を心がけましょう。"

#: 07-Control.md:1
#, fuzzy
msgid "7 Control"
msgstr "7 コントロール"

#: 07-Control.md:3
#, fuzzy
msgid "Controlling running sounds"
msgstr "演奏中のサウンド制御"

#: 07-Control.md:5
#, fuzzy
msgid ""
"So far we've looked at how you can trigger synths and samples, and also how to"
" change their default opts such as amplitude, pan, envelope settings and more."
" Each sound triggered is essentially its own sound with its own list of option"
"s set for the duration of the sound."
msgstr ""
"これまでの章では、どのようにシンセやサンプルを扱い、アンプ（増幅）、パン、エンベロープなどのオプションを変更するのかを見てきました。呼び出された個々の音には"
"、元来、音の継続時間を設定するデュレーションオプションが備わっています。"

#: 07-Control.md:11
#, fuzzy
msgid ""
"Wouldn't it also be cool if you could change a sound's opts whilst it's still "
"playing, just like you might bend a string of a guitar whilst it's still vibra"
"ting?"
msgstr "もしも演奏中にギターの弦を歪めビブラートさせるように、オプションを変更できたなら、それってクールではないでしょうか？"

#: 07-Control.md:15
#, fuzzy
msgid "You're in luck - this section will show you how to do exactly this."
msgstr "あなたは幸運です-このセクションでは、まさしくそれをどのように行うのかを紹介します。"

#: 07.1-Controlling-Running-Synths.md:1
#, fuzzy
msgid "7.1 Controlling Running Synths"
msgstr "7.1 演奏中のシンセ制御"

#: 07.1-Controlling-Running-Synths.md:3
#, fuzzy
msgid "Controlling Running Synths"
msgstr "演奏中のシンセ制御"

#: 07.1-Controlling-Running-Synths.md:5
#, fuzzy
msgid ""
"So far we've only concerned ourselves with triggering new sounds and FX. Howev"
"er, Sonic Pi gives us the ability to manipulate and control currently running "
"sounds. We do this by using a variable to capture a reference to a synth:"
msgstr ""
"これまでは、新しいサウンドとエフェクトを引き起こす方法について触れてきたただけ見てきましたが、Sonic Piは、演奏中の音を操り、処理する機能を備えていま"
"す。シンセ扱うためには、変数を用います。"

#: 07.1-Controlling-Running-Synths.md:10
#, no-wrap
msgid "s = play 60, release: 5"
msgstr "s = play 60, release: 5"

#: 07.1-Controlling-Running-Synths.md:14
#, fuzzy
msgid ""
"Here, we have a run-local variable `s` which represents the synth playing note"
" 60. Note that this is *run-local* - you can't access it from other runs like "
"functions."
msgstr "これはローカル変数`s`が音符60の演奏を処理することを表しています。 このローカル変数は、例えば別の関数といった他の機能からアクセスすることはできません。"

#: 07.1-Controlling-Running-Synths.md:18
#, fuzzy
msgid "Once we have `s`, we can start controlling it via the `control` function:"
msgstr "一度`s`を用意すれば`control`関数を介して制御することができます。"

#: 07.1-Controlling-Running-Synths.md:21 07.3-Sliding-Parameters.md:13
#, no-wrap
msgid ""
"s = play 60, release: 5\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""
"s = play 60, release: 5\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"

#: 07.1-Controlling-Running-Synths.md:31
#, fuzzy
msgid ""
"The thing to notice is that we're not triggering 4 different synths here - we'"
"re just triggering one synth and then change the pitch 3 times afterwards, whi"
"le it's playing."
msgstr "演奏している間に、1つのシンセのみを呼び出し、3回ピッチを変更します。ここで注目すべき点は、4つの異なるシンセを呼び出していないということです。"

#: 07.1-Controlling-Running-Synths.md:35
#, fuzzy
msgid ""
"We can pass any of the standard opts to `control`, so you can control things l"
"ike `amp:`, `cutoff:` or `pan:`."
msgstr ""
"標準的なオプション（関数）は`control`へ渡すことができます。そして`amp:`, `cutoff:`あるいは`pan:`のようなオプションを制御する"
"ことができます。"

#: 07.1-Controlling-Running-Synths.md:38
#, fuzzy
msgid "Non-controllable Options"
msgstr "制御不可能なオプション"

#: 07.1-Controlling-Running-Synths.md:40
#, fuzzy
msgid ""
"Some of the opts can't be controlled once the synth has started. This is the c"
"ase for all the ADSR envelope parameters. You can find out which opts are cont"
"rollable by looking at their documentation in the help system. If the document"
"ation says *Can not be changed once set*, you know it's not possible to contro"
"l the opt after the synth has started."
msgstr ""
"一度シンセが開始されると、一部のオプションは制御することができなくなります。ADSRエンベロープ·パラメータがこれに該当します。そのオプションが制御可能かは"
"、ヘルプシステムのドキュメントを参照してください。ドキュメントに「設定を変更することは出来ません」というコメントがある場合、シンセが開始した後にオプションを"
"制御することはできません。"

#: 07.2-Controlling-FX.md:1
#, fuzzy
msgid "7.2 Controlling FX"
msgstr "7.2 エフェクトの制御"

#: 07.2-Controlling-FX.md:3
#, fuzzy
msgid "Controlling FX"
msgstr "エフェクトの制御"

#: 07.2-Controlling-FX.md:5
#, fuzzy
msgid ""
"It is also possible to control FX, although this is achieved in a slightly dif"
"ferent way:"
msgstr "エフェクトも、少々異なる方法をとりますが、制御する事が出来ます。"

#: 07.2-Controlling-FX.md:8
#, no-wrap
#, fuzzy
msgid ""
"with_fx :reverb do |r|\n"
"  play 50\n"
"  sleep 0.5\n"
"  control r, mix: 0.7\n"
"  play 55\n"
"  sleep 1\n"
"  control r, mix: 0.9\n"
"  sleep 1\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :reverb do |r|\n"
" play 50\n"
" sleep 0.5\n"
" control r, mix: 0.7\n"
" play 55\n"
" sleep 1\n"
" control r, mix: 0.9\n"
" sleep 1\n"
" play 62\n"
"end"

#: 07.2-Controlling-FX.md:21
#, fuzzy
msgid ""
"Instead of using a variable, we use the goalpost parameters of the do/end bloc"
"k. Inside the `|` bars, we need to specify a unique name for our running FX wh"
"ich we then reference from the containing do/end block. This behaviour is iden"
"tical to using parameterised functions."
msgstr ""
"変数を使用する代わりに、*do/end*プロックのゴールポストパラメータを使用します。”`|`”と”`|`”の間に、エフェクターを実行するためのユニークな名"
"前を指定する必要があります。この動作は、パラメーター化された関数を使用する場合と同じです。"

#: 07.2-Controlling-FX.md:26
#, fuzzy
msgid "Now go and control some synths and FX!"
msgstr "さあ、シンセやエフェクトをコントロールしてみよう！"

#: 07.3-Sliding-Parameters.md:1
#, fuzzy
msgid "7.3 Sliding Options"
msgstr "7.3 オプションのスライド"

#: 07.3-Sliding-Parameters.md:3
#, fuzzy
msgid "Sliding Opts"
msgstr "オプションのスライド"

#: 07.3-Sliding-Parameters.md:5
#, fuzzy
msgid ""
"Whilst exploring the synth and FX opts, you might have noticed that there are "
"a number of opts ending with `_slide`. You might have even tried calling them "
"and seeing no effect. This is because they're not normal parameters, they're s"
"pecial opts that only work when you control synths as introduced in the previo"
"us section."
msgstr ""
"シンセやエフェクトの引数を探索しながら、`_slide`で終わるオプションがあることに気づいたかもしれません。それらを呼び出しても、何の効果を示さなかった可"
"能性があります。これは正常のオプションではなく、前回のセクションで紹介したように、シンセを制御するときのみ動作をする特別なオプションです。"

#: 07.3-Sliding-Parameters.md:11
#, fuzzy
msgid "Consider the following example:"
msgstr "次の例を考えてみましょう。"

#: 07.3-Sliding-Parameters.md:23
#, fuzzy
msgid ""
"Here, you can hear the synth pitch changing immediately on each `control` call"
". However, we might want the pitch to slide between changes. As we're controll"
"ing the `note:` parameter, to add slide, we need to set the `note_slide` param"
"eter of the synth:"
msgstr ""
"ここでは、各`control`の呼び出し後、すぐにシンセのピッチの変更を聞くことができますが、ピッチが変化する間にスライドさせたくなるかもしれません。その場"
"合、スライドを追加するために、`note:`オプションを制御するように、シンセの`note_slide`オプションを追加する必要があります。"

#: 07.3-Sliding-Parameters.md:28
#, no-wrap
msgid ""
"s = play 60, release: 5, note_slide: 1\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""
"s = play 60, release: 5, note_slide: 1\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"

#: 07.3-Sliding-Parameters.md:38
#, fuzzy
msgid ""
"Now we hear the notes being bent between the `control` calls. It sounds nice, "
"doesn't it? You can speed up the slide by using a shorter time such as `note_s"
"lide: 0.2` or slow it down by using a longer slide time."
msgstr ""
"`control`の呼び出しの間の音程が滑らかに繋がっていることがわかるはずです。いい感じではないでしょうか。`note_slide: 0.2` よりも短い"
"スライド時間を使うことで、スライドをスピードアップすることができますし、もっと長い時間を使ってテンポを遅くすることができます。"

#: 07.3-Sliding-Parameters.md:43
msgid ""
"Every parameter that can be controlled has a corresponding `_slide` parameter "
"for you to play with."
msgstr ""

#: 07.3-Sliding-Parameters.md:46
#, fuzzy
msgid "Sliding is sticky"
msgstr "ネバネバするスライド"

#: 07.3-Sliding-Parameters.md:48
#, fuzzy
msgid ""
"Once you've set a `_slide` parameter on a running synth, it will be remembered"
" and used every time you slide the corresponding parameter. To stop sliding yo"
"u must set the `_slide` value to 0 before the next `control` call."
msgstr ""
"一度、実行しているシンセの `_slide`オプションを設定したら、それは記憶され、 対応するオプションがスライドする度に使用されます。 スライドを停止する"
"ためには、次の`control`を呼び出す前に`0`に`_slide`値を設定する必要があります。"

#: 07.3-Sliding-Parameters.md:53
#, fuzzy
msgid "Sliding FX Opts"
msgstr "エフェクト・オプションのスライド"

#: 07.3-Sliding-Parameters.md:55
#, fuzzy
msgid "It is also possible to slide FX opts:"
msgstr "また、エフェクトオプションをスライドさせることも可能です。"

#: 07.3-Sliding-Parameters.md:57
#, no-wrap
#, fuzzy
msgid ""
"with_fx :wobble, phase: 1, phase_slide: 5 do |e|\n"
"  use_synth :dsaw\n"
"  play 50, release: 5\n"
"  control e, phase: 0.025\n"
"end"
msgstr ""
"with_fx :wobble, phase: 1, phase_slide: 5 do |e|\n"
" use_synth :dsaw\n"
" play 50, release: 5\n"
" control e, phase: 0.025\n"
"end"

#: 07.3-Sliding-Parameters.md:65
#, fuzzy
msgid ""
"Now have fun sliding things around for smooth transitions and flowing control."
".."
msgstr "さあ、操作に従って、滑らかな変調を楽しみましょう。"

#: 08-Data-Structures.md:1
#, fuzzy
msgid "8 Data Structures"
msgstr "8 データ構造"

#: 08-Data-Structures.md:3
#, fuzzy
msgid "Data Structures"
msgstr "データ構造"

#: 08-Data-Structures.md:5
#, fuzzy
msgid "A very useful tool in a programmer's toolkit is a data structure."
msgstr "プログラマーのツールキットで非常に有益なツールはデータ構造です。"

#: 08-Data-Structures.md:7
#, fuzzy
msgid ""
"Sometimes you may wish to represent and use more than one thing. For example, "
"you may find it useful to have a series of notes to play one after another. Pr"
"ogramming languages have data structures to allow you do exactly this."
msgstr ""
"時には、複数の要素を使用して表現したい場合があるでしょう。たとえば、それが次々に演奏される連続した音符が便利だと気づくこともあるでしょう。プログラミング言語"
"は、こういったことを正確に行うためのデータ構造を持っています。"

#: 08-Data-Structures.md:12
#, fuzzy
msgid ""
"There are many exciting and exotic data structures available to programmers - "
"and people are always inventing new ones. However, for now we only really need"
" to consider a very simple data structure - the list."
msgstr ""
"プログラマが利用できるデータ構造はとてもエキサイティングで魅力的なもので、人々は常に新しい発明をしています。しかし、今の私たちは実際には非常に単純なデータ構"
"造リストを考慮する必要があります。"

#: 08-Data-Structures.md:16
#, fuzzy
msgid ""
"Let's look at it in more detail. We'll cover its basic form and then also how "
"lists can be used to represent scales and chords."
msgstr ""
"より詳細にそれを見てみましょう。まずは、その基本的な形式を学習し、続いて、リストはどのようにスケール(音階)やコード（和音）を表現するために使用されるのかを"
"学習していきましょう。"

#: 08.1-Lists.md:1
#, fuzzy
msgid "8.1 Lists"
msgstr "8.1 リスト"

#: 08.1-Lists.md:3
#, fuzzy
msgid "Lists"
msgstr "リスト"

#: 08.1-Lists.md:5
#, fuzzy
msgid ""
"In this section we'll take a look at a data structure which is very useful - t"
"he list. We met it very briefly before in the section on randomisation when we"
" randomly chose from a list of notes to play:"
msgstr ""
"このセクションでは、非常に有益なデータ構造であるリストについてみていきます。すでに大まかな方法で、音符をリストから無作為に選ぶことをランダムの章で触れました"
"。"

#: 08.1-Lists.md:9
#, no-wrap
msgid "play choose([50, 55, 62])"
msgstr "play choose([50, 55, 62])"

#: 08.1-Lists.md:13
#, fuzzy
msgid ""
"In this section we'll explore using lists to also represent chords and scales."
" First let's recap how we might play a chord. Remember that if we don't use `s"
"leep`, sounds all happen at the same time:"
msgstr ""
"ここでは、コードやスケールを表現するためにリストの使い方についてみていきます。最初に、コードを演奏する方法をおさらいしてみましょう。sleepを使用しない場"
"合、すべての音が同時に演奏されることを思い出してください。"

#: 08.1-Lists.md:17
#, no-wrap
msgid ""
"play 52\n"
"play 55\n"
"play 59"
msgstr ""
"play 52\n"
"play 55\n"
"play 59"

#: 08.1-Lists.md:23
#, fuzzy
msgid "Let's look at other ways to represent this code."
msgstr "このコードの別の表現方法を見てみましょう。"

#: 08.1-Lists.md:25
#, fuzzy
msgid "Playing a List"
msgstr "リストの実行"

#: 08.1-Lists.md:27
#, fuzzy
msgid ""
"One option is to place all the notes in a list: `[52, 55, 59]`. Our friendly `"
"play` function is smart enough to know how to play a list of notes. Try it:"
msgstr ""
"1つの方法として、\\[52, 55, 59\\]のように、すべての音符をリストに配置することがです。使いやすいplay機能は、リストになった音符をどのように演"
"奏するかをすぐに理解します。試してください。"

#: 08.1-Lists.md:31
#, no-wrap
msgid "play [52, 55, 59]"
msgstr "play [52, 55, 59]"

#: 08.1-Lists.md:35
#, fuzzy
msgid ""
"Ooh, that's already nicer to read. Playing a list of notes doesn't stop you fr"
"om using any of the parameters as normal:"
msgstr "おー、これは読みやすいですね。音符リストの演奏は、通常のパラメータのいずれも妨げになりません。"

#: 08.1-Lists.md:38
#, no-wrap
msgid "play [52, 55, 59], amp: 0.3"
msgstr "play [52, 55, 59], amp: 0.3"

#: 08.1-Lists.md:42
#, fuzzy
msgid ""
"Of course, you can also use the traditional note names instead of the MIDI num"
"bers:"
msgstr "もちろん、MIDIの代わりに元来の音符の名前を使うこともできます。"

#: 08.1-Lists.md:45
#, no-wrap
msgid "play [:E3, :G3, :B3]"
msgstr "play [:E3, :G3, :B3]"

#: 08.1-Lists.md:49
#, fuzzy
msgid ""
"Now those of you lucky enough to have studied some music theory might recognis"
"e that chord as *E Minor* played in the 3rd octave."
msgstr "多少の音楽理論の知識を持っている方なら、幸運なことに3オクターブで*Eマイナー*のコードが演奏されたことがわかるでしょう。"

#: 08.1-Lists.md:52
#, fuzzy
msgid "Accessing a List"
msgstr "リストへのアクセス"

#: 08.1-Lists.md:54
#, fuzzy
msgid ""
"Another very useful feature of a list is the ability to get information out of"
" it. This may sound a bit strange, but it's no more complicated than someone a"
"sking you to turn a book to page 23. With a list, you'd say, what's the elemen"
"t at index 23? The only strange thing is that in programming indexes usually s"
"tart at 0 not 1."
msgstr ""
"もう一つの非常に便利なリストの機能として、リストから情報を取得する機能です。これは少し奇妙に聞こえるかもしれなませんが、本の23ページを開いてくださいと誰か"
"に頼まれることよりも簡単なことです。リストの場合は、インデックス23の要素は何ですか？と尋ねればいいのです。唯一、奇妙なことは、プログラミングのインデックス"
"は通常、1ではなく0から開始されることです。"

#: 08.1-Lists.md:60
#, fuzzy
msgid "With list indexes we don't count 1, 2, 3... Instead we count 0, 1, 2..."
msgstr "リストのインデックスは1,2,3と数える代わりに、0,1,2と数えていきます。"

#: 08.1-Lists.md:62
#, fuzzy
msgid "Let's look at this in a little more detail. Take a look at this list:"
msgstr "それではもう少し詳細にみてみましょう。"

#: 08.1-Lists.md:64
#, no-wrap
msgid "[52, 55, 59]"
msgstr "[52, 55, 59]"

#: 08.1-Lists.md:68
#, fuzzy
msgid ""
"There's nothing especially scary about this. Now, what's the second element in"
" that list? Yes, of course, it's `55`. That was easy. Let's see if we can get "
"the computer to answer it for us too:"
msgstr ""
"これは特に難しいことは何もありません。リストの2番目の要素は何でしょうか？そう、もちろん`55`です。簡単ですね。それでは、同様にコンピュータが答えることが"
"できるかどうかを見てみましょう。"

#: 08.1-Lists.md:72 08.4-Rings.md:12
#, no-wrap
msgid "puts [52, 55, 59][1]"
msgstr "puts [52, 55, 59][1]"

#: 08.1-Lists.md:76
#, fuzzy
msgid ""
"OK, that looks a bit weird if you've never seen anything like it before. Trust"
" me though, it's not too hard. There are three parts to the line above: the wo"
"rd `puts` , our list `52, 55, 59` and our index `[1]`. Firstly we're saying `p"
"uts` because we want Sonic Pi to print the answer out for us in the log. Next,"
" we're giving it our list, and finally our index is asking for the second elem"
"ent. We need to surround our index with square brackets and because counting s"
"tarts at `0`, the index for the second element is `1`. Look:"
msgstr ""
"以前にこのようなものを見たことがない場合、少し奇妙に見えるかもしれませんが、大丈夫。私を信頼してください。難しいことはありません。上記の行には、`puts`"
"という命令、リストの`52, 55, 59` 、インデックスが`[1 ]`の3つの部分があります。まずはじめに、Sonic Piへログの中から答えを出力させ"
"るためputsを命令します。次にリストを与えています。そして最後に第２の要素を問い合わせています。角括弧でインデックスを囲む必要があり、カウントは0で始まる"
"ので、2番目の要素のインデックスは1となります。下記、みてみましょう。"

#: 08.1-Lists.md:85
#, no-wrap
#, fuzzy
msgid ""
"# indexes:  0   1   2\n"
"           [52, 55, 59]"
msgstr ""
"# indexes:  0   1   2\n"
"          [52, 55, 59]"

#: 08.1-Lists.md:90
#, fuzzy
msgid ""
"Try running the code `puts [52, 55, 59][1]` and you'll see `55` pop up in the "
"log. Change the index `1` to other indexes, try longer lists and think about h"
"ow you might use a list in your next code jam. For example, what musical struc"
"tures might be represented as a series of numbers..."
msgstr ""
"コード`puts [52, 55, 59][1]` を実行してみてください。ログに55とポップアップされるでしょう。インデックス `1` を別のインデックス"
"に変えてみてください。さらに長い`list`を与えて、どのように次のコードで使うのかを考えてみてください。なんらかの音楽の構造として音符の連続を表現すること"
"ができるのではないでしょうか。"

#: 08.2-Chords.md:1
#, fuzzy
msgid "8.2 Chords"
msgstr "8.2 コード(和音)"

#: 08.2-Chords.md:5
#, fuzzy
msgid ""
"Sonic Pi has built-in support for chord names which will return lists. Try it "
"for yourself:"
msgstr "Sonic Piは和音名のリストを返す機能を内蔵しています。実際に試してみましょう。"

#: 08.2-Chords.md:8
#, no-wrap
msgid "play chord(:E3, :minor)"
msgstr "play chord(:E3, :minor)"

#: 08.2-Chords.md:12
#, fuzzy
msgid ""
"Now, we're really getting somewhere. That looks a lot more pretty than the raw"
" lists (and is easier to read for other people). So what other chords does Son"
"ic Pi support? Well, a *lot*. Try some of these:"
msgstr ""
"さあ、本当に動きましたね。そのままのリストよりも美しく見えますねそして人間にとっても読みやすいでしょう。では、どんな和音をSonic Pi はサポートをして"
"いるのでしょうか。沢山あります。下記のように、いくつかのコードを試してみましょう。"

#: 08.2-Chords.md:16
msgid "`chord(:E3, :m7)`"
msgstr ""

#: 08.2-Chords.md:17
msgid "`chord(:E3, :minor)`"
msgstr ""

#: 08.2-Chords.md:18
msgid "`chord(:E3, :dim7)`"
msgstr ""

#: 08.2-Chords.md:19
msgid "`chord(:E3, :dom7)`"
msgstr ""

#: 08.2-Chords.md:21
#, fuzzy
msgid "Arpeggios"
msgstr "アルペジオ"

#: 08.2-Chords.md:23
#, fuzzy
msgid "We can easily turn chords into arpeggios with the function `play_pattern`:"
msgstr "`play_pattern`関数で簡単にコード（和音）からアルベジオ(和音を構成する音を一音ずつ順番に弾いていく奏法)に変更して演奏を行うことができます。"

#: 08.2-Chords.md:26
#, no-wrap
msgid "play_pattern chord(:E3, :m7)"
msgstr "play_pattern chord(:E3, :m7)"

#: 08.2-Chords.md:30
#, fuzzy
msgid ""
"Ok, that's not so fun - it played it really slowly. `play_pattern` will play e"
"ach note in the list separated with a call to `sleep 1` between each call to `"
"play`. We can use another function `play_pattern_timed` to specify our own tim"
"ings and speed things up:"
msgstr ""
"でも、それはとてもゆっくりと演奏をしているので、あまり楽しくないかもしれません。`play_pattern`は、区切られたリスト内の各音符を再生する度に`s"
"leep 1` を呼び出して演奏します。`play_pattern_timed`関数を使用することで独自のタイミングと速度を指定することがきます。"

#: 08.2-Chords.md:35
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m7), 0.25"
msgstr "play_pattern_timed chord(:E3, :m7), 0.25"

#: 08.2-Chords.md:39
#, fuzzy
msgid "We can even pass a list of times which it will treat as a circle of times:"
msgstr "時間のリスト化は、時間周期として取り扱うことができるでしょう。"

#: 08.2-Chords.md:42
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m13), [0.25, 0.5]"
msgstr "play_pattern_timed chord(:E3, :m13), [0.25, 0.5]"

#: 08.2-Chords.md:46
#, fuzzy
msgid "This is the equivalent to:"
msgstr "これは下記と同等です。"

#: 08.2-Chords.md:48
#, no-wrap
msgid ""
"play 52\n"
"sleep 0.25\n"
"play 55\n"
"sleep 0.5\n"
"play 59\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.5\n"
"play 66\n"
"sleep 0.25\n"
"play 69\n"
"sleep 0.5\n"
"play 73"
msgstr ""
"play 52\n"
"sleep 0.25\n"
"play 55\n"
"sleep 0.5\n"
"play 59\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.5\n"
"play 66\n"
"sleep 0.25\n"
"play 69\n"
"sleep 0.5\n"
"play 73"

#: 08.2-Chords.md:64
#, fuzzy
msgid "Which would you prefer to write?"
msgstr "どちらの書き方を好みますか？"

#: 08.3-Scales.md:1
#, fuzzy
msgid "8.3 Scales"
msgstr "8.3 スケール(音階)"

#: 08.3-Scales.md:3
#, fuzzy
msgid "Scales"
msgstr "スケール(音階)"

#: 08.3-Scales.md:5
#, fuzzy
msgid ""
"Sonic Pi has support for a wide range of scales. How about playing a C3 major "
"scale?"
msgstr "Sonic Piは広い範囲の音階を演奏できます。C3メジャースケールの再生はどのように行うのでしょうか？"

#: 08.3-Scales.md:8
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major), 0.125, release: 0.1"
msgstr "play_pattern_timed scale(:c3, :major), 0.125, release: 0.1"

#: 08.3-Scales.md:12
#, fuzzy
msgid "We can even ask for more octaves:"
msgstr "さらに多くのオクターブを実行することができます。"

#: 08.3-Scales.md:14
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major, num_octaves: 3), 0.125, release: 0.1"
msgstr "play_pattern_timed scale(:c3, :major, num_octaves: 3), 0.125, release: 0.1"

#: 08.3-Scales.md:18
#, fuzzy
msgid "How about all the notes in a pentatonic scale?"
msgstr "ペンタトニックスケール(オクターブに5つの音が含まれる音階のこと)のすべての音符はどうでしょう?"

#: 08.3-Scales.md:20
#, no-wrap
msgid ""
"play_pattern_timed scale(:c3, :major_pentatonic, num_octaves: 3), 0.125, relea"
"se: 0.1"
msgstr ""
"play_pattern_timed scale(:c3, :major_pentatonic, num_octaves: 3), 0.125, relea"
"se: 0.1"

#: 08.3-Scales.md:24
#, fuzzy
msgid "Random notes"
msgstr "ランダム音階"

#: 08.3-Scales.md:26
#, fuzzy
msgid ""
"Chords and scales are great ways of constraining a random choice to something "
"meaningful. Have a play with this example which picks random notes from the ch"
"ord E3 minor:"
msgstr "コードとスケールは、ランダムな選択を強いるには素晴らしい制約です。コードE3マイナーからランダムに音符を取り出すにはこの例を実行してください。"

#: 08.3-Scales.md:30
#, no-wrap
#, fuzzy
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play choose(chord(:E3, :minor)), release: 0.3, cutoff: rrand(60, 120)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"use_synth :tb303\n"
"loop do\n"
" play choose(chord(:E3, :minor)), release: 0.3, cutoff: rrand(60, 120)\n"
" sleep 0.25\n"
"end"

#: 08.3-Scales.md:38
#, fuzzy
msgid "Try switching in different chord names and cutoff ranges."
msgstr "異なる和音名やカットオフする範囲を試してみましょう。"

#: 08.3-Scales.md:40
#, fuzzy
msgid "Discovering Chords and Scales"
msgstr "コードとスケールの発見"

#: 08.3-Scales.md:42
#, fuzzy
msgid ""
"To find out which scales and chords are supported by Sonic Pi simply click the"
" Lang button on the far left of this tutorial and then choose either chord or "
"scale in the API list. In the information in the main panel, scroll down until"
" you see a long list of chords or scales (depending on which you're looking at"
")."
msgstr ""
"Sonic Piによってサポートされているスケールやコードを検索するには、チュートリアルの左にある命令ボタンをクリックし、APIリストのスケールまたはコード"
"を選びますメインパネルの情報に、スケールやコードの長いリストが現れるまで下にスクロールしてください（あなたがどれを見るかに依拠します）。"

#: 08.3-Scales.md:48
#, fuzzy
msgid "Have fun and remember: there are no mistakes, only opportunities."
msgstr "間違いではなく可能性でるということを思い出して、楽しんでください。"

#: 08.4-Rings.md:1
#, fuzzy
msgid "8.4 Rings"
msgstr "8.4 リング"

#: 08.4-Rings.md:3 A.11-beat-tracking.md:62
#, fuzzy
msgid "Rings"
msgstr "リング"

#: 08.4-Rings.md:5
#, fuzzy
msgid ""
"An interesting spin on standard lists are rings. If you know some programming,"
" you might have come across ring buffers or ring arrays. Here, we'll just go f"
"or ring - it's short and simple."
msgstr ""
"標準のリストで面白いスピンオンにリングがあります。いくつかのプログラミングを理解していれば、リングバッファやリングアレイなどをみたことがあるかもしれません。"
"ここでは、まさに`ring`(環状リスト)についてみていきます。 - それは短く、簡単です。"

#: 08.4-Rings.md:9
#, fuzzy
msgid ""
"In the previous section on lists we saw how we could fetch elements out of the"
"m by using the indexing mechanism:"
msgstr "リストの前章では、インデックスの機構を使用してリストから要素を取り出す方法を説明しました。"

#: 08.4-Rings.md:16
#, fuzzy
msgid ""
"Now, what happens if you want index `100`? Well, there's clearly no element at"
" index 100 as the list has only three elements in it. So Sonic Pi will return "
"you `nil` which means nothing."
msgstr ""
"もしインデックス100を取り出そうとしら、何が起こるでしょう？まあ、3つの要素しか持たないリストの中でインデックス100の要素は、明らかにありません。だから"
"Sonic Piは空を意味する `nil` を返すでしょう。"

#: 08.4-Rings.md:20
#, fuzzy
msgid ""
"However, consider you have a counter such as the current beat which continuall"
"y increases. Let's create our counter and our list:"
msgstr "ここでは、現在のビート（拍子）が継続的に増加する`counter`を考えてみましょう。まずはカウンターとリストを作成します。"

#: 08.4-Rings.md:23
#, no-wrap
msgid ""
"counter = 0\n"
"notes = [52, 55, 59]"
msgstr ""
"counter = 0\n"
"notes = [52, 55, 59]"

#: 08.4-Rings.md:28
#, fuzzy
msgid "We can now use our counter to access a note in our list:"
msgstr "これで、リストの音符にアクセスするためのカウンタを使用することができます。"

#: 08.4-Rings.md:30
#, no-wrap
msgid "puts notes[counter]"
msgstr "puts notes[counter]"

#: 08.4-Rings.md:34
#, fuzzy
msgid "Great, we got `52`. Now, let's increment our counter and get another note:"
msgstr "素晴らしい、`52`を取得しました。カウンターを増やして別の音符を取得してみましょう。"

#: 08.4-Rings.md:37
#, no-wrap
msgid ""
"counter = (inc counter)\n"
"puts notes[counter]"
msgstr ""
"counter = (inc counter)\n"
"puts notes[counter]"

#: 08.4-Rings.md:42
#, fuzzy
msgid ""
"Super, we now get `55` and if we do it again we get `59`. However, if we do it"
" again, we'll run out of numbers in our list and get `nil`. What if we wanted "
"to just loop back round and start at the beginning of the list again? This is "
"what rings are for."
msgstr ""
"すごいでしょう、 `55`を取得し、それを再び繰り返すならば`59を得ます。さらに繰り返す場合は、リスト内の数が不足し`nil\\`になるでしょう。では、ちょ"
"うどループのはじめに戻り、再びリストの先頭から開始したい場合はどうしたらようでしょうか？そのためにリングを使います。"

#: 08.4-Rings.md:47
#, fuzzy
msgid "Creating Rings"
msgstr "リングの作成"

#: 08.4-Rings.md:49
#, fuzzy
msgid ""
"We can create rings one of two ways. Either we use the `ring` function with th"
"e elements of the ring as parameters:"
msgstr ""
"2つの方法の内、どちらか1つの方法でリングを作成することができます。どちらもパラメータとしての環(円環構造を持つリスト)要素である`ring`関数を利用しま"
"す。"

#: 08.4-Rings.md:52
#, no-wrap
msgid "(ring 52, 55, 59)"
msgstr "(ring 52, 55, 59)"

#: 08.4-Rings.md:56
#, fuzzy
msgid ""
"Or we can take a normal list and convert it to a ring by sending it the `.ring"
"` message:"
msgstr "また、正常のリストを取得し、`.ring`メッセージをそれを送りリングに変換することができます。"

#: 08.4-Rings.md:59
#, no-wrap
msgid "[52, 55, 59].ring"
msgstr "[52, 55, 59].ring"

#: 08.4-Rings.md:63
#, fuzzy
msgid "Indexing Rings"
msgstr "リングのインデックス化"

#: 08.4-Rings.md:65
#, fuzzy
msgid ""
"Once we have a ring, you can use it in exactly the same way you would use a no"
"rmal list with the exception that you can use indexes that are negative or lar"
"ger than the size of the ring and they'll wrap round to always point at one of"
" the ring's elements:"
msgstr ""
"いったんリングを取得したら、インデックスがマイナスもしくはリングの数値より大きい場合を除いて、通常のリストを使用する場合とまったく同じ方法で使用することがで"
"きます。、そしてリングの１つの要素として括弧でくくられて表示されます。"

#: 08.4-Rings.md:70
#, no-wrap
msgid ""
"(ring 52, 55, 59)[0] #=> 52\n"
"(ring 52, 55, 59)[1] #=> 55\n"
"(ring 52, 55, 59)[2] #=> 59\n"
"(ring 52, 55, 59)[3] #=> 52\n"
"(ring 52, 55, 59)[-1] #=> 59"
msgstr ""
"(ring 52, 55, 59)[0] #=> 52\n"
"(ring 52, 55, 59)[1] #=> 55\n"
"(ring 52, 55, 59)[2] #=> 59\n"
"(ring 52, 55, 59)[3] #=> 52\n"
"(ring 52, 55, 59)[-1] #=> 59"

#: 08.4-Rings.md:78
#, fuzzy
msgid "Using Rings"
msgstr "リングを使用する"

#: 08.4-Rings.md:80
#, fuzzy
msgid ""
"Let's say we're using a variable to represent the current beat number. We can "
"use this as an index into our ring to fetch notes to play, or release times or"
" anything useful we've stored in our ring regardless of the beat number we're "
"currently on."
msgstr ""
"現在のビート（拍子）の値を表すために変数を使用しているとしましょう​​。 その変数は、現在表しているビート値に関わらず、インデックスとして音符を演奏するため"
"や、 リリースタイム（放出時間）、リングに格納されている有用な値として使うことができます。"

#: 08.4-Rings.md:85
#, fuzzy
msgid "Scales and Chords are Rings"
msgstr "スケールとコードはリング"

#: 08.4-Rings.md:87
#, fuzzy
msgid ""
"A useful thing to know is that the lists returned by `scale` and `chord` are a"
"lso rings and allow you to access them with arbitrary indexes."
msgstr ""
"知っておくと役立つこととして、`scale`（音階）と`chord` (和音)によって返されたリストもリングであり、任意のインデックスでそれらにアクセスする"
"ことを可能にします。"

#: 08.4-Rings.md:90
#, fuzzy
msgid "Ring Constructors"
msgstr "リングのコンストラクタ(構成子)"

#: 08.4-Rings.md:92
#, fuzzy
msgid ""
"In addition to `ring` there are a number of other functions which will constru"
"ct a ring for us."
msgstr "加えて、リングを構成する多くの機能があります。"

#: 08.4-Rings.md:95
#, fuzzy
msgid "`range` invites you specify a starting point, end point and step size."
msgstr "`range`は始点、終点とステップサイズを指定します。"

#: 08.4-Rings.md:96
#, fuzzy
msgid "`bools` allows you to use `1`s and `0`s to succinctly represent booleans."
msgstr "`bools`は簡単に1と0を使用するためのブール値を扱うことができます。"

#: 08.4-Rings.md:97
#, fuzzy
msgid "`knit` allows you to knit a sequence of repeated values."
msgstr "`knit`は一連の繰り返される値のために構成することを可能にします。"

#: 08.4-Rings.md:98
#, fuzzy
msgid "`spread` creates a ring of bools with a Euclidean distribution."
msgstr "`spread`はユークリッド分布に従ったブール値のリングを作成します。"

#: 08.4-Rings.md:100
#, fuzzy
msgid "Take a look at their respective documentation for more information."
msgstr "詳細については、それら個々のドキュメンテーションを見てください。"

#: 08.5-Ring-Chains.md:1
#, fuzzy
msgid "8.5 Ring Chains"
msgstr "8.5 リングのチェーン"

#: 08.5-Ring-Chains.md:3
#, fuzzy
msgid "Ring Chains"
msgstr "リングのチェーン"

#: 08.5-Ring-Chains.md:5
#, fuzzy
msgid ""
"In addition to the constructors such as `range` and `spread` another way of cr"
"eating new rings is to manipulate existing rings."
msgstr "`range`や`spread`のようなコンストラクタに加えて、別なリングの作成方法としては、作成済みのリングを操作する方法があります。"

#: 08.5-Ring-Chains.md:9
#, fuzzy
msgid "Chain Commands"
msgstr "チェーンコマンド"

#: 08.5-Ring-Chains.md:11
#, fuzzy
msgid "To explore this, take a simple ring:"
msgstr "次のような単純なリングを作成します:"

#: 08.5-Ring-Chains.md:13
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50)"
msgstr "(ring 10, 20, 30, 40, 50)"

#: 08.5-Ring-Chains.md:17
#, fuzzy
msgid ""
"What if we wanted it backwards? Well we'd use the chain command `.reverse` to "
"take the ring and turn it around:"
msgstr "リングを逆にしたいときにはどうしたらよいでしょう？リングを反転させるには、チェーンコマンドの`.reverse`を使います:"

#: 08.5-Ring-Chains.md:20
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).reverse  #=> (ring 50, 40, 30, 20, 10)"
msgstr "(ring 10, 20, 30, 40, 50).reverse  #=> (ring 50, 40, 30, 20, 10)"

#: 08.5-Ring-Chains.md:24
#, fuzzy
msgid "Now, what if we wanted the first three values from the ring?"
msgstr "では次に、リングから最初の3つの値を取得するにはどうしたらよいでしょう？"

#: 08.5-Ring-Chains.md:26
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).take(3)  #=> (ring 10, 20, 30)"
msgstr "(ring 10, 20, 30, 40, 50).take(3)  #=> (ring 10, 20, 30)"

#: 08.5-Ring-Chains.md:30
#, fuzzy
msgid "Finally, what if we wanted to shuffle the ring?"
msgstr "最後に、リングをシャッフルするにはどうしたらよいでしょう？"

#: 08.5-Ring-Chains.md:32
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).shuffle  #=> (ring 40, 30, 10, 50, 20)"
msgstr "(ring 10, 20, 30, 40, 50).shuffle  #=> (ring 40, 30, 10, 50, 20)"

#: 08.5-Ring-Chains.md:36
#, fuzzy
msgid "Multiple Chains"
msgstr "多重チェーン"

#: 08.5-Ring-Chains.md:38
#, fuzzy
msgid ""
"This is already a powerful way of creating new rings. However, the *real* powe"
"r comes when you chain a few of these commands together."
msgstr "ここまでで既に強力なリングの作成方法を見てきましたが、 これらのコマンドを一緒に用いることで本当の力を発揮します。"

#: 08.5-Ring-Chains.md:41
#, fuzzy
msgid "How about shuffling the ring, dropping 1 element and then taking the next 3?"
msgstr "リングをシャッフルし、最初の要素を削除し、次の3つの要素を得る場合にはどうでしょう？"

#: 08.5-Ring-Chains.md:43
#, fuzzy
msgid "Let's take this in stages:"
msgstr "段階的に見ていきましょう:"

#: 08.5-Ring-Chains.md:45
#, fuzzy
msgid "`(ring 10, 20, 30, 40, 50)` - our initial ring"
msgstr "`(ring 10, 20, 30, 40, 50)` - リングの最初の状態"

#: 08.5-Ring-Chains.md:46
#, fuzzy
msgid "`(ring 10, 20, 30, 40, 50).shuffle` - shuffles - `(ring 40, 30, 10, 50, 20)`"
msgstr "`(ring 10, 20, 30, 40, 50).shuffle` - シャッフルし - `(ring 40, 30, 10, 50, 20)`"

#: 08.5-Ring-Chains.md:47
#, fuzzy
msgid "`(ring 10, 20, 30, 40, 50).shuffle.drop(1)` - drop 1 - `(ring 30, 10, 50, 20)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1)` - 最初の要素を削除し - `(ring 30, 10, 50, 2"
"0)`"

#: 08.5-Ring-Chains.md:48
#, fuzzy
msgid ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1).take(3)` - take 3 - `(ring 30, 10, "
"50)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1).take(3)` - 3つの要素を得る - `(ring 30, 10"
", 50)`"

#: 08.5-Ring-Chains.md:50
#, fuzzy
msgid ""
"Can you see how we can just create a long chain of these methods by just *stic"
"king them together*. We can combine these in any order we want creating an ext"
"remely rich and powerful way of generating new rings from existing ones."
msgstr ""
"*コマンドを一緒にくっつける*だけでこれらのコマンドの長いチェーンを作ることが分かったと思います。 チェーンコマンドを好きな順序で組み合わせることができ、そ"
"れにより既に存在するリングから新しいリングを 生成するとても豊かで強力な方法を作り出しています。"

#: 08.5-Ring-Chains.md:55
#, fuzzy
msgid "Immutability"
msgstr "不変性"

#: 08.5-Ring-Chains.md:57
#, fuzzy
msgid ""
"These rings have a powerful and important property. They are immutable which m"
"eans that they can not change. This means that the chaining methods described "
"in this section *do not change rings* rather they *create new rings*. This mea"
"ns you're free to share rings across threads and start chaining them within a "
"thread knowing you won't be affecting any other thread using the same ring."
msgstr ""
"リングは強力で重要な特徴を持っています。それは不変性と言って、リングを変更できないということを 意味しています。このセクションで紹介しているチェインコマンド"
"が*リングを変更するのではなく*、 *新しいリングを作成*していることを意味しています。これにより、スレッドを跨いでリングを共有して、 同じリングを使ってい"
"る他のスレッドに影響を与えないで、チェインを開始できることを意味しています。"

#: 08.5-Ring-Chains.md:64
#, fuzzy
msgid "Available Chain Methods"
msgstr "利用可能なチェーンコマンド"

#: 08.5-Ring-Chains.md:66
#, fuzzy
msgid "Here's a list of the available chain methods for you to play with:"
msgstr "ここに利用可能なチェーンコマンドを記載しておきます。"

#: 08.5-Ring-Chains.md:68
#, fuzzy
msgid "`.reverse` - returns a reversed version of the ring"
msgstr "`.reverse` - 逆順のリングを返却します"

#: 08.5-Ring-Chains.md:69
#, fuzzy
msgid "`.sort` - creates a sorted version of the ring"
msgstr "`.sort` - ソートされたリングを作成します"

#: 08.5-Ring-Chains.md:70
#, fuzzy
msgid "`.shuffle` - creates a shuffled version of the ring"
msgstr "`.shuffle` - シャッフルされたリングを作成します"

#: 08.5-Ring-Chains.md:71
msgid "`.pick(3)` - returns a ring with the results of calling `.choose` 3 times"
msgstr ""

#: 08.5-Ring-Chains.md:72
msgid ""
"`.pick` - similar to `.pick(3)` only the size defaults to the same as the orig"
"inal ring"
msgstr ""

#: 08.5-Ring-Chains.md:73
#, fuzzy
msgid "`.take(5)` - returns a new ring containing only the first 5 elements"
msgstr "`.take(5)` - 最初の5つの要素をのみからなる新しいリングを返却します"

#: 08.5-Ring-Chains.md:74
#, fuzzy
msgid "`.drop(3)` - returns a new ring with everything but the first 3 elements"
msgstr "`.drop(3)` - 最初の3つの要素以外の要素からなる新しいリングを返却します"

#: 08.5-Ring-Chains.md:75
#, fuzzy
msgid "`.butlast` - returns a new ring with the last element missing"
msgstr "`.butlast` - 最後の要素が欠けた状態の新しいリングをを返却します"

#: 08.5-Ring-Chains.md:76
#, fuzzy
msgid "`.drop_last(3)` - returns a new ring with the last 3 elements missing"
msgstr "`.drop_last(3)` - 最後の3つの要素が欠けた状態の新しいリングをを返却します"

#: 08.5-Ring-Chains.md:77
#, fuzzy
msgid "`.take_last(6)`- returns a new ring with only the last 6 elements"
msgstr "`.take_last(6)`- 最後の6つの要素をのみからなる新しいリングを返却します"

#: 08.5-Ring-Chains.md:78
#, fuzzy
msgid "`.stretch(2)` - repeats each element in the ring twice"
msgstr "`.stretch(2)` - リングの個々の要素を2回ずつ繰り返します"

#: 08.5-Ring-Chains.md:79
#, fuzzy
msgid "`.repeat(3)` - repeats the entire ring 3 times"
msgstr "`.repeat(3)` - リング全体を3回繰り返します"

#: 08.5-Ring-Chains.md:80
#, fuzzy
msgid "`.mirror` - adds the ring to a reversed version of itself"
msgstr "`.mirror` - 逆順のリングを自分自身に追加します"

#: 08.5-Ring-Chains.md:81
#, fuzzy
msgid "`.reflect` - same as mirror but doesn't duplicate middle value"
msgstr "`.reflect` - mirrorと同様ですが、真ん中の要素を重複させないようにします"

#: 08.5-Ring-Chains.md:83
#, fuzzy
msgid ""
"Of course, those chain methods that take numbers can take other numbers too! S"
"o feel free to call `.drop(5)` instead of `.drop(3)` if you want to drop the f"
"irst 5 elements."
msgstr ""
"数字を引数に取っているチェーンコマンドは、他の数字を取ることももちろん可能です。 最初の5個の要素を削除したい場合には、`.drop(3)`の代わりに遠慮無"
"く`.drop(5)`を呼んでください。"

#: 09-Live-Coding.md:1
#, fuzzy
msgid "9 Live Coding"
msgstr "9 ライブコーディング"

#: 09-Live-Coding.md:5
#, fuzzy
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write a"
"nd modify code live to make music, just like you might perform live with a gui"
"tar. One advantage of this approach is to give you more feedback whilst compos"
"ing (get a simple loop running and keep tweaking it till it sounds just perfec"
"t). However, the main advantage is that you can take Sonic Pi on stage and gig"
" with it."
msgstr ""
"SonicPiの中で一番エキサイティングな特徴の1つは、ライブでギターをかき鳴らすのと同じように、ライブで音楽を演奏しながら、その場でコードを書き換え、音を"
"変化させていくことができることです。シンプルなループを走らせ、そのサウンドが完璧になるまで調整しつつ。この方法で優れているのは、演奏中たくさんの反応をもらう"
"ことができることです。ですが、一番の利点は、Sonic Piでステージ上でライブができることです。"

#: 09-Live-Coding.md:12
#, fuzzy
msgid ""
"In this section we'll cover the fundamentals of turning your static code compo"
"sitions into dynamic performances."
msgstr "このセクションでは、コードを書き換えながら力強いパフォーマンスにつなげることができるLiveCodingの基本を学んでいきます。"

#: 09-Live-Coding.md:15
#, fuzzy
msgid "Hold on to your seats..."
msgstr "しっかりついてきてくださいね。"

#: 09.1-Live-Coding-Fundamentals.md:1
#, fuzzy
msgid "9.1 Live Coding Fundamentals"
msgstr "9.1 ライブコーディングの基本"

#: 09.1-Live-Coding-Fundamentals.md:5
#, fuzzy
msgid ""
"Now we've learned enough to really start having some fun. In this section we'l"
"l draw from all the previous sections and show you how you can start making yo"
"ur music compositions live and turning them into a performance. For that we'll"
" need 3 main ingredients:"
msgstr ""
"実際に楽みながら演奏をする方法を十分に学んできました。この章では、 これまでのすべての章から、どの様に作曲を開始し、ライブパフォーマンスに繋げるかを紹介して"
"いきます。 そのために3つの主な要素が必要になります。"

#: 09.1-Live-Coding-Fundamentals.md:10
#, fuzzy
msgid "An ability to write code that makes sounds - CHECK!"
msgstr "チェック要素：音を作るコードを書く能力"

#: 09.1-Live-Coding-Fundamentals.md:11
#, fuzzy
msgid "An ability to write functions - CHECK!"
msgstr "チェック要素：ファンクション(関数)を作成する能力"

#: 09.1-Live-Coding-Fundamentals.md:12
#, fuzzy
msgid "An ability to use (named) threads - CHECK!"
msgstr "チェック要素：(名前付き) スレッドを使う能力"

#: 09.1-Live-Coding-Fundamentals.md:14
#, fuzzy
msgid ""
"Alrighty, let's get started. Let's live code our first sounds. We first need a"
" function containing the code we want to play. Let's start simple. We also wan"
"t to loop calls to that function in a thread:"
msgstr ""
"よーし、始めましょう。最初の音をライブコーディングしましょう。まず演奏したいコード含む関数が必要です。 簡単なところから始めましょう。スレッドでその関数を呼"
"び出すループもほしいところです。"

#: 09.1-Live-Coding-Fundamentals.md:18
#, no-wrap
#, fuzzy
msgid ""
"define :my_loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"in_thread(name: :looper) do\n"
"  loop do\n"
"    my_loop\n"
"  end\n"
"end"
msgstr ""
"define :my_loop do\n"
" play 50\n"
" sleep 1\n"
"end\n"
"in_thread(name: :looper) do\n"
" loop do\n"
"   my_loop\n"
" end\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:31
#, fuzzy
msgid ""
"If that looks a little too complicated to you, go back and re-read the section"
"s on functions and threads. It's not too complicated if you've already wrapped"
" your head around these things."
msgstr ""
"もしそれが少し複雑に見える場合は、ファンクション（関数）とスレッドのセクションに戻って 復習してください。 既にこれらを頭に焼き付けているならば、それほど複"
"雑ではありません。"

#: 09.1-Live-Coding-Fundamentals.md:35
#, fuzzy
msgid ""
"What we have here is a function definition which just plays note 50 and sleeps"
" for a beat. We then define a named thread called `:looper` which just loops a"
"round calling `my_loop` repeatedly."
msgstr ""
"ここにあるものは、単に`play 50`を演奏し、ビートのために`sleep 1`を実行するファンクション(関数)です。 そして`my_loop`を呼び出し"
"、繰り返しを実行する`:looper`という名前付きスレッドを定義しています。"

#: 09.1-Live-Coding-Fundamentals.md:39
#, fuzzy
msgid "If you run this code, you'll hear note 50 repeating again and again..."
msgstr "このコードを実行すると、音符50を何度も何度も繰り返します。"

#: 09.1-Live-Coding-Fundamentals.md:41
#, fuzzy
msgid "Changing it up"
msgstr "チェンジアップ（変化）させる"

#: 09.1-Live-Coding-Fundamentals.md:43
#, fuzzy
msgid ""
"Now, this is where the fun starts. Whilst the code is *still running* change 5"
"0 to another number, say 55, then press the Run button again. Woah! It changed"
"! Live!"
msgstr ""
"これから楽しみが始まります。コードを*実行しながら*、50を別の数値55に変更し、もう一度*Run*ボタンを押してみましょう。すごい迫力!変化しましたね!ラ"
"イブ!"

#: 09.1-Live-Coding-Fundamentals.md:47
#, fuzzy
msgid ""
"It didn't add a new layer because we're using named threads which only allow o"
"ne thread for each name. Also, the sound changed because we *redefined* the fu"
"nction. We gave `:my_loop` a new definition. When the `:looper` thread looped "
"around it simply called the new definition."
msgstr ""
"スレッドそれぞれに別の名前を使うことによって、新しいレイヤは追加されせんでした。 そのうえ、そのファンクション（関数）が再定義されることより、音が変化しまし"
"た。 `:my_loop`に新しい定義を与えると、`:looper`スレッドが新しい定義付けを繰り返します。"

#: 09.1-Live-Coding-Fundamentals.md:52
#, fuzzy
msgid ""
"Try changing it again, change the note, change the sleep time. How about addin"
"g a `use_synth` statement? For example, change it to:"
msgstr ""
"スリープ時間をや音符を変更し、再び試してみてください。どのように\\`use_synthを追加するには どうすればよいのでしょうか。たとえば、次のように変更し"
"ます。"

#: 09.1-Live-Coding-Fundamentals.md:55
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play 50, release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play 50, release: 0.3\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:63
#, fuzzy
msgid ""
"Now it sounds pretty interesting, but we can spice it up further. Instead of p"
"laying the same note again and again, try playing a chord:"
msgstr "かなり面白くなってきましたが、それをさらに盛り上げることができます。 代わりに、何度も何度も同じ音を再生する、和音を弾いてみましょう："

#: 09.1-Live-Coding-Fundamentals.md:67
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play chord(:e3, :minor), release: 0.3\n"
"  sleep 0.5\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play chord(:e3, :minor), release: 0.3\n"
"  sleep 0.5\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:75
#, fuzzy
msgid "How about playing random notes from the chord:"
msgstr "コードからランダムな音階を演奏するにはどうでしょう。"

#: 09.1-Live-Coding-Fundamentals.md:77
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.3\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:85
#, fuzzy
msgid "Or using a random cutoff value:"
msgstr "またはランダムなカットオフ値を使用してみましょう。"

#: 09.1-Live-Coding-Fundamentals.md:87
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:95
#, fuzzy
msgid "Finally, add some drums:"
msgstr "最後に、いくつかのドラムを追加しましょう。"

#: 09.1-Live-Coding-Fundamentals.md:97
#, no-wrap
msgid ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  sample :drum_bass_hard, rate: rrand(0.5, 2)\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_loop do\n"
"  use_synth :tb303\n"
"  sample :drum_bass_hard, rate: rrand(0.5, 2)\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:106
#, fuzzy
msgid "Now things are getting exciting!"
msgstr "どんどんおもしろくなってきましたね!"

#: 09.1-Live-Coding-Fundamentals.md:108
#, fuzzy
msgid ""
"However, before you jump up and start live coding with functions and threads, "
"stop what you're doing and read the next section on `live_loop` which will cha"
"nge the way you code in Sonic Pi forever..."
msgstr ""
"しかしながら、ファンクション（関数）とスレッドを使ったライブコーディングにステップアップする前に、 一息ついて、Sonic Piで永遠にコードを変える方法`"
"live_loop`について次の章を読んでいきましょう。"

#: 09.2-Live-Loops.md:1
#, fuzzy
msgid "9.2 Live Loops"
msgstr "9.2 ライブループ"

#: 09.2-Live-Loops.md:3
#, fuzzy
msgid "Live Loops"
msgstr "ライブループ"

#: 09.2-Live-Loops.md:5
#, fuzzy
msgid ""
"Ok, so this section of the tutorial is the real gem. If you only read one sect"
"ion, it should be this one. If you read the previous section on Live Coding Fu"
"ndamentals, `live_loop` is a simple way of doing exactly that but without havi"
"ng to write so much."
msgstr ""
"このチュートリアルの中でもこの章は、最も重要です。もし1つの章だけを読むのであれば、この章でしょう。 もし、前の章でライブコーディングの基礎を読んでいるので"
"あれば、live_loopは、演奏するための簡単な方法で、 あまり多くを記述することはありません。"

#: 09.2-Live-Loops.md:10
#, fuzzy
msgid ""
"If you didn't read the previous section, `live_loop` is the best way to jam wi"
"th Sonic Pi."
msgstr "前の章を読んでいない場合、`live_loop`はSonic Piでジャム(即興演奏)するための最良の方法でしょう。"

#: 09.2-Live-Loops.md:13
#, fuzzy
msgid "Let's play. Write the following in a new buffer:"
msgstr "演奏してみましょう。新しいワークスペースに次のように書いてください。"

#: 09.2-Live-Loops.md:15
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 60\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play 60\n"
"  sleep 1\n"
"end"

#: 09.2-Live-Loops.md:22
#, fuzzy
msgid ""
"Now press the Run button. You hear a basic beep every beat. Nothing fun there."
" However, don't press Stop just yet. Change the `60` to `65` and press Run aga"
"in."
msgstr ""
"*Rnn*ボタンを押してください。基本的なビープ音が数秒なります。 これでは楽しくないのですが、まだ*Stop*を押さないでください。 もう一度 `60`を"
"`65`へ変更し実行してください。"

#: 09.2-Live-Loops.md:26
#, fuzzy
msgid "Woah! It changed *automatically* without missing a beat. This is live coding."
msgstr "わー! 調子を崩さずに*自動的に*変化しました。 これがライブコーディングです。"

#: 09.2-Live-Loops.md:28
#, fuzzy
msgid ""
"Why not change it to be more bass like? Just update your code whilst it's play"
"ing:"
msgstr "いっそうベースのように変えてみましょう？演奏したままコードを更新しましょう。"

#: 09.2-Live-Loops.md:30
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:38
#, fuzzy
msgid "Then hit Run."
msgstr "ここで*Run*ボタンを押してください"

#: 09.2-Live-Loops.md:40
#, fuzzy
msgid "Let's make the cutoff move around:"
msgstr "カットオフを動かしてみましょう。"

#: 09.2-Live-Loops.md:42
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:50
#, fuzzy
msgid "Hit Run again."
msgstr "*Run*ボタンをもう一度押しましょう"

#: 09.2-Live-Loops.md:52
#, fuzzy
msgid "Add some drums:"
msgstr "いくつかのドラムを追加してみましょう。"

#: 09.2-Live-Loops.md:54
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:63
#, fuzzy
msgid "Change the note from `e1` to `c1`:"
msgstr "`e1`から`c1`に音符を変更してみましょう。"

#: 09.2-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:74
#, fuzzy
msgid "Now stop listening to me and play around yourself! Have fun!"
msgstr "このあとは私の言うことを聞くのを止めて、自由に演奏してみましょう! 楽しんでください!"

#: 09.3-Multiple-Live-Loops.md:1
#, fuzzy
msgid "9.3 Multiple Live Loops"
msgstr "9.3 マルチ・ライブループ"

#: 09.3-Multiple-Live-Loops.md:3
#, fuzzy
msgid "Multiple Live Loops"
msgstr "マルチ・ライブループ"

#: 09.3-Multiple-Live-Loops.md:5
#, fuzzy
msgid "Consider the following live loop:"
msgstr "次のライブループを考えていきましょう。"

#: 09.3-Multiple-Live-Loops.md:7
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 50\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play 50\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:14
#, fuzzy
msgid ""
"You may have wondered why it needs the name `:foo`. This name is important bec"
"ause it signifies that this live loop is different from all other live loops."
msgstr ""
"なぜ': foo’という名前をつける必要があるか疑問をもつかもしれません。この名前は、 このライブループが他のすべてのライブループと異なっていることを示すた"
"めに重要です。"

#: 09.3-Multiple-Live-Loops.md:18
#, fuzzy
msgid "*There can never be two live loops running with the same name*."
msgstr "*同じ名前で実行中の2つのライブループが存在することはできません*。"

#: 09.3-Multiple-Live-Loops.md:20
#, fuzzy
msgid ""
"This means that if we want multiple concurrently running live loops, we just n"
"eed to give them different names:"
msgstr "これは、複数同時にライブループを実行したい場合、それぞれに異なる名前を付ける必要があることを意味します。"

#: 09.3-Multiple-Live-Loops.md:23
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: 09.3-Multiple-Live-Loops.md:36
#, fuzzy
msgid ""
"You can now update and change each live loop independently and it all just wor"
"ks."
msgstr "各ライブループを個別に変更し更新できます。そしてすべてちゃんと動作します。"

#: 09.3-Multiple-Live-Loops.md:39
#, fuzzy
msgid "Syncing Live Loops"
msgstr "ライブループの同期"

#: 09.3-Multiple-Live-Loops.md:41
#, fuzzy
msgid ""
"One thing you might have already noticed is that live loops work automatically"
" with the thread cue mechanism we explored previously. Every time the live loo"
"p loops, it generates a new `cue` event with the name of the live loop. We can"
" therefore `sync` on these cues to ensure our loops are in sync without having"
" to stop anything."
msgstr ""
"既に気づいているかもしれませんが、ライブループは、以前にみてきたスレッドのcueの メカニズムを使用して自動的に動作します。 ライブループがループするたびに"
"、それが新しい名前を持つライブループの`cue`eventを生成します。 従って、`cue`をきっかけに何も停止せずにサウンドのループを同期させることができ"
"ます。"

#: 09.3-Multiple-Live-Loops.md:47
#, fuzzy
msgid "Consider this badly synced code:"
msgstr "この同期のとれたコードを考えてみましょう。"

#: 09.3-Multiple-Live-Loops.md:49
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.4\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.4\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:61
#, fuzzy
msgid ""
"Let's see if we can fix the timing and sync without stopping it. First, let's "
"fix the `:foo` loop to make the sleep a factor of 1 - something like `0.5` wil"
"l do:"
msgstr ""
"それを停止することなくタイミングと同期を修正することができるかを見てみましょう。 まずは、`foo`ループ内の`sleep`の要素を0.5に変えてみましょう"
"。"

#: 09.3-Multiple-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:77
#, fuzzy
msgid ""
"We're not quite finished yet though - you'll notice that the beats don't quite"
" line up correctly. This is because the loops are *out of phase*. Let's fix th"
"at by syncing one to the other:"
msgstr ""
"まだ終了することはできません。あなたは調子がまったく合っていないことに気付くでしょう。 これはループがずれているからです。 他と同期するように、それを修理し"
"ていきましょう。"

#: 09.3-Multiple-Live-Loops.md:81
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sync :foo\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sync :foo\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:94
#, fuzzy
msgid "Wow, everything is now perfectly in time - all without stopping."
msgstr "うわー、すべてを停止することなくすべてが完璧に同期しました。"

#: 09.3-Multiple-Live-Loops.md:96
#, fuzzy
msgid "Now, go forth and live code with live loops!"
msgstr "いまから、ライブループを使用したライブコーディングを始めましょう！"

#: 09.4-Ticking.md:1
#, fuzzy
msgid "9.4 Ticking"
msgstr "9.4 チック"

#: 09.4-Ticking.md:3
#, fuzzy
msgid "Ticking"
msgstr "チック"

#: 09.4-Ticking.md:5
#, fuzzy
msgid ""
"Something you'll likely find yourself doing a lot when live coding is looping "
"through rings. You'll be putting notes into rings for melodies, sleeps for rhy"
"thms, chord progressions, timbral variations, etc. etc."
msgstr ""
"ライブコーディングでリングをループしていて、気が付くとたくさんのことをしていたことはないでしょうか。 例えば、リングにメロディーの音符を入れたり、リズムのス"
"リープ、 コード進行や音色のバリエーションを入れたり等々。"

#: 09.4-Ticking.md:9
#, fuzzy
msgid "Ticking Rings"
msgstr "リングのチック"

#: 09.4-Ticking.md:11
#, fuzzy
msgid ""
"Sonic Pi provides a *very* handy tool for working with rings within `live_loop"
"`s. It's called the tick system. In the section about the rings we were talkin"
"g about the counter that is constantly increasing, like a current beat number."
" Tick just implements this idea. It provides you with the ability to *tick thr"
"ough rings*. Let's look at an example:"
msgstr ""
"Sonic Piは`live_loop`内でリングと共に使える*とても*手軽なツールを提供しています。 それはチックシステムと呼ばれ、*tick throu"
"gh rings（リングをチックタックと進める）* 機能を提供しています。次の例を見てください。"

#: 09.4-Ticking.md:17
#, no-wrap
msgid ""
"counter = 0\n"
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic)[counter], release: 0.1\n"
"  counter += 1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"counter = 0\n"
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic)[counter], release: 0.1\n"
"  counter += 1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:26
msgid "This is equivalent to:"
msgstr ""

#: 09.4-Ticking.md:28
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:35
#, fuzzy
msgid ""
"Here, we're just grabbing the scale E3 minor pentatonic and ticking through ea"
"ch element. This is done by adding `.tick` to the end of the scale declaration"
". This tick is local to the live loop, so each live loop can have its own inde"
"pendent tick:"
msgstr ""
"ここでは、E3マイナーペンタトニックのスケールを作成し、各要素をチックしています。これは`.tick`を スケール宣言の末尾に追加することによって実現されて"
"います。このチックはライブループ内で局所的であるため、 個々のライブループは独立したチックを持つことができます。"

#: 09.4-Ticking.md:40
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play (scale :e2, :minor_pentatonic, num_octaves: 3).tick, release: 0.25\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play (scale :e2, :minor_pentatonic, num_octaves: 3).tick, release: 0.25\n"
"  sleep 0.25\n"
"end"

#: 09.4-Ticking.md:53
#, fuzzy
msgid "Tick"
msgstr "標準関数としてのチック"

#: 09.4-Ticking.md:55
#, fuzzy
msgid "You can also call `tick` as a standard fn and use the value as an index:"
msgstr "`tick`はまた標準関数としても呼ぶことができ、その値はインデックスとして使うことができます。"

#: 09.4-Ticking.md:57
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  idx = tick\n"
"  play (scale :e3, :minor_pentatonic)[idx], release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  idx = tick\n"
"  play (scale :e3, :minor_pentatonic)[idx], release: 0.1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:65
#, fuzzy
msgid ""
"However, it is much nicer to call `.tick` at the end. The `tick` fn is for whe"
"n you want to do fancy things with the tick value and for when you want to use"
" ticks for other things than indexing into rings."
msgstr ""
"しかし、この場合は`.tick`を呼ぶほうが良いでしょう。`tick`関数の用途は、 チックの値で手の込んだことをしたかったり、リングのインデックス以外のこ"
"とにチックの値を使いたかったりする場合です。"

#: 09.4-Ticking.md:70
#, fuzzy
msgid "Look"
msgstr "ルック"

#: 09.4-Ticking.md:72
#, fuzzy
msgid ""
"The magical thing about tick is that not only does it return a new index (or t"
"he value of the ring at that index) it also makes sure that next time you call"
" tick, it's the next value. Take a look at the examples in the docs for `tick`"
" for many ways of working with this. However, for now, it's important to point"
" out that sometimes you'll want to just look at the current tick value and *no"
"t increase* it. This is available via the `look` fn. You can call `look` as a "
"standard fn or by adding `.look` to the end of a ring."
msgstr ""
"チックの魅力的なところはそれが新しいインデックス（もしくはそのインデックスにあるリングの値） を返すだけでなく、次にチックを呼んだときに必ず次の値を返すこと"
"を保証していることでしょう。 `tick`が色んな形でこのような動作をしていることをこのドキュメントの例で見てみてください。 しかし、ここでチックの現在の値"
"を見たいだけで値を*増加させたくない*の場合もあることを指摘することは重要でしょう。 これは`look`関数により実現可能です。`look`を標準関数として"
"呼んだり、リングの後ろに`.look`を付けたりできます。"

#: 09.4-Ticking.md:81
#, fuzzy
msgid "Naming Ticks"
msgstr "チックの名前付け"

#: 09.4-Ticking.md:83
#, fuzzy
msgid ""
"Finally, sometimes you'll need more than one tick per live loop. This is achie"
"ved by giving your tick a name:"
msgstr "最後に、1つのライブループに複数のチックが必要になることがあるかも しれません。これはチックに名前を付けることで実現できます。"

#: 09.4-Ticking.md:86
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick(:foo), release: 0.1\n"
"  sleep (ring 0.125, 0.25).tick(:bar)\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick(:foo), release: 0.1\n"
"  sleep (ring 0.125, 0.25).tick(:bar)\n"
"end"

#: 09.4-Ticking.md:93
#, fuzzy
msgid ""
"Here we're using two ticks one for the note to play and another for the sleep "
"time. As they're both in the same live loop, to keep them separate we need to "
"give them unique names. This is exactly the same kind of thing as naming `live"
"_loop`s - we just pass a symbol prefixed with a `:`. In the example above we c"
"alled one tick `:foo` and the other `:bar`. If we want to `look` at these we a"
"lso need to pass the name of the tick to `look`."
msgstr ""
"ここでは2つのチックを使っていて、1つは音符用に、1つはスリープ時間用にしています。 これらのチックは同じライブループにあるので、別々にしておくためにユニー"
"クな名前を与えています。 これはちょうど`live_loop`に名前を付ける（`:`から始まるシンボル名を渡すだけ）のと同じことです。 上の例では1つは`:"
"foo`でチックを呼び出し、もう1つは`:bar`で呼び出しています。 また、これらの値を`look`したい場合には、チックの名前を`look`に渡す必要が"
"あります。"

#: 09.4-Ticking.md:101
#, fuzzy
msgid "Don't make it too complicated"
msgstr "複雑にしすぎないように"

#: 09.4-Ticking.md:103
#, fuzzy
msgid ""
"Most of the power in the tick system isn't useful when you get started. Don't "
"try and learn everything in this section. Just focus on ticking through a sing"
"le ring. That'll give you most of the joy and simplicity of ticking through ri"
"ngs in your `live_loop`s."
msgstr ""
"チックシステムの能力のほどんどは、最初のうちは役に立たないでしょう。 このセクションの全ての内容を学習しようとしないでください。 一つのリングでチックするこ"
"とだけに集中するとよいでしょう。 そうすることで、`live_loop`でリングをチックする簡単さや楽しみを得ることができるでしょう。"

#: 09.4-Ticking.md:108
#, fuzzy
msgid ""
"Take a look at the documentation for `tick` where there are many useful exampl"
"es and happy ticking!"
msgstr "`tick`のドキュメントには役に立つ例がたくさんあるので、それを見て楽しくチックしてみましょう！"

#: 10-Essential-Knowledge.md:1
#, fuzzy
msgid "10 Essential Knowledge"
msgstr "10 不可欠な知識"

#: 10-Essential-Knowledge.md:3
#, fuzzy
msgid "Essential Knowledge"
msgstr "不可欠な知識"

#: 10-Essential-Knowledge.md:5
#, fuzzy
msgid ""
"This section will cover some very useful - in fact *essential* - knowledge for"
" getting the most out of your Sonic Pi experience."
msgstr "この章ではSonic Piの経験を最大限に活用するために、 いくつかの非常に便利で、実際のところ*不可欠な*知識を紹介します。"

#: 10-Essential-Knowledge.md:8
#, fuzzy
msgid ""
"We'll cover how to take advantage of the many keyboard shortcuts available to "
"you, how to share your work and some tips on performing with Sonic Pi."
msgstr ""
"用意した多くのキーボードのショートカットを活用する利点と、作品を共有する方法、そして Sonic Piでパフォーマンスするためのいくつかのヒントを見ていきま"
"す。"

#: 10.1-Using-Shortcuts.md:1
#, fuzzy
msgid "10.1 Using Shortcuts"
msgstr "10.1 ショートカットの使用"

#: 10.1-Using-Shortcuts.md:3
#, fuzzy
msgid "Using Shortcuts"
msgstr "ショートカットの使用"

#: 10.1-Using-Shortcuts.md:5
#, fuzzy
msgid ""
"Sonic Pi is as much an instrument as a coding environment. Shortcuts can there"
"fore make playing Sonic Pi much more *efficient and natural* - especially when"
" you're playing live in front of an audience."
msgstr ""
"Sonic Piはコーディング環境としての楽器です。したがって、あなたが観客の前でライブ演奏している場合は特に、 ショートカットは、はるかに*効率的で自然*"
"にSonicPiの演奏を行うことができます。"

#: 10.1-Using-Shortcuts.md:9
#, fuzzy
msgid ""
"Much of Sonic Pi can be controlled through the keyboard. As you gain more fami"
"liarity working and performing with Sonic Pi, you'll likely start using the sh"
"ortcuts more and more. *I personally touch-type* (I recommend you consider lea"
"rning too) and find myself frustrated whenever I need to reach for the mouse a"
"s it slows me down. I therefore use all of these shortcuts on a very regular b"
"asis!"
msgstr ""
"Sonic Piの多くの機能は、キーボードを介して制御することができます。 Sonic Piの演奏や作業により慣れるために、ショートカットをもっと使いこなし"
"ましょう。 個人的にはブラインドタッチの学習の検討をお勧めします。マウスを使う必要があるときに、動作が遅れ、私はいつもイライラしてしまいます。だから、普段か"
"らこれらのショートカットのすべてを使っています！"

#: 10.1-Using-Shortcuts.md:16
#, fuzzy
msgid ""
"Therefore, if you learn the shortcuts, you'll learn to use your keyboard effec"
"tively and you'll be live coding like a pro in no time."
msgstr "ショートカットを学べば、効果的にキーボードを使用でき、あなたは、間もなく、プロのようなライブコーディングができるようになるでしょう。"

#: 10.1-Using-Shortcuts.md:19
#, fuzzy
msgid ""
"However, *don't try and learn them all at once*, just try and remember the one"
"s you use most and then keep adding more to your practice."
msgstr "しかし、*一度にすべてを憶えようとしない*で、 まずはあなたが最も使うものを試しながら、実践の中で、さらに追加しながら憶えていくとよいでしょう。"

#: 10.1-Using-Shortcuts.md:22
#, fuzzy
msgid "Consistency across Platforms"
msgstr "一貫したクロスプラットフォーム"

#: 10.1-Using-Shortcuts.md:24
#, fuzzy
msgid ""
"Imagine you're learning the clarinet. You'd expect all clarinets of all makes "
"to have similar controls and fingerings. If they didn't, you'd have a tough ti"
"me switching between different clarinets and you'd be stuck to using just one "
"make."
msgstr ""
"クラリネットを習っているところを想像してみてください。すべてのクラリネットは、指使いや操作の全てが一貫してしていることを前提として作られていますが、もしそう"
"でなかったら、別のクラリネットに乗り換えるには大変な時間を費やしてしまうだろうし、一回だけの制作のためにそれを使用することについて戸惑ってしまうでしょう。"

#: 10.1-Using-Shortcuts.md:29
#, fuzzy
msgid ""
"Unfortunately the three major operating systems (Linux, Mac OS X and Windows) "
"come with their own standard defaults for actions such as cut and paste etc. S"
"onic Pi will try and honour these standards. However *priority is placed on co"
"nsistency across platforms* within Sonic Pi rather than attempting to conform "
"to a given platform's standards. This means that when you learn the shortcuts "
"whilst playing with Sonic Pi on your Raspberry Pi, you can move to the Mac or "
"PC and feel right at home."
msgstr ""
"残念なことに3つの主要なオペレーティングシステム（ Linux、 Mac OS XおよびWindowsの場合）では、カット＆ペーストなどの操作のために独自の"
"基準が用意されています。 Sonic Piは、これらの基準に準拠します。しかしながらプラットフォームの基準に対応することよりも、 *優先事項として、Soni"
"c Pi内はクロスプラットフォームとして一貫した配置がなされています*。 これは Raspberry Piで演奏したり、ショートカットを学ぶ時、 MacやP"
"Cに乗り換えても、違和感無く同じように操作できることを意味しています。"

#: 10.1-Using-Shortcuts.md:37
#, fuzzy
msgid "Control and Meta"
msgstr "Control と Meta"

#: 10.1-Using-Shortcuts.md:39
#, fuzzy
msgid ""
"Part of the notion of consistency is the naming of shortcuts. In Sonic Pi we u"
"se the names *Control* and *Meta* to refer to the two main combination keys. O"
"n all platforms *Control* is the same. However, on Linux and Windows, *Meta* i"
"s actually the *Alt* key while on Mac *Meta* is the *Command* key. For consist"
"ency we'll use the term *Meta* - just remember to map that to the appropriate "
"key on your operating system."
msgstr ""
"一貫性への考え方のひとつにショートカットの命名があります。SonicPiにおいて、主要な2つの組み合わせキーを当てはめるために、*Control キー*と*"
"Metaキー*を用います。すべてのプラットフォームでは、*Control キー*は同じです。しかし、LinuxとWindowsでは、実際の*Metaキー*は"
"Altキーで、Macの*Metaキー*は*コマンド⌘キー*です。一貫性のために、*Metaキー*を使いますが、 あなたのオペレーティングシステムにおける適切"
"なキー配置であることを憶えておいてください。"

#: 10.1-Using-Shortcuts.md:46
#, fuzzy
msgid "Abbreviations"
msgstr "短縮"

#: 10.1-Using-Shortcuts.md:48
#, fuzzy
msgid ""
"To help keep things simple and readable, we'll use the abbreviations *C-* for "
"*Control* plus another key and *M-* for *Meta* plus another key. For example, "
"if a shortcut requires you to hold down both *Meta* and *r* we'll write that a"
"s `M-r`. The *-* just means \"at the same time as.\""
msgstr ""
"シンプルで読みやすくするために、*Ctrlキー*＋その他のキーは「*C-*」、*Metaキー*＋その他のキーは「*M-*」の略語を使います。例えば、もし*M"
"etaキー*と' r 'を同時に押さえるショートカットを要求する場合、「*M-r*」と表記します。"

#: 10.1-Using-Shortcuts.md:53
#, fuzzy
msgid "The following are some of the shortcuts I find most useful."
msgstr "以下は、僕が見つけたとっても有用なショートカットのいくつかです。"

#: 10.1-Using-Shortcuts.md:55
#, fuzzy
msgid "Stopping and starting"
msgstr "停止と開始"

#: 10.1-Using-Shortcuts.md:57
#, fuzzy
msgid ""
"Instead of always reaching for the mouse to run your code, you can simply pres"
"s `M-r`. Similarly, to stop running code you can press `M-s`."
msgstr "マウスを使う代わりに、`M-r`でコードを実行することができます。同様に、`M-s`でコードを停止することができます。"

#: 10.1-Using-Shortcuts.md:60 10.2-Shortcut-Cheatsheet.md:51
#, fuzzy
msgid "Navigation"
msgstr "ナビゲーション"

#: 10.1-Using-Shortcuts.md:62
#, fuzzy
msgid ""
"I'm really lost without the navigation shortcuts. I therefore highly recommend"
" you spend the time to learn them. These shortcuts also work extremely well wh"
"en you've learned to touch type as they use the standard letters rather than r"
"equiring you to move your hand to the mouse or the arrow keys on your keyboard"
"."
msgstr ""
"ナビゲーションのショートカットを使わない操作は実にもどかしいです。そのため、ショートカットを学ぶことに時間を費やすことを強くお勧めします。マウスやキーボード"
"の矢印キーを手で移動させるより、ブラインドタッチを学ぶことで、これらのショートカットをさらに有効に活用することができます。"

#: 10.1-Using-Shortcuts.md:68
#, fuzzy
msgid ""
"You can move to the beginning of the line with `C-a`, the end of the line with"
" `C-e`, up a line with `C-p`, down a line with `C-n`, forward a character with"
" `C-f`, and back a character with `C-b`. You can even delete all the character"
"s from the cursor to the end of the line with `C-k`."
msgstr ""
"文章の先頭に移動するにはC-a、文章の末尾に移動するにはC-e、１行上はC-p、１行下がるにはC-n、一文字進むにはC-f、そして、一文字戻るにはC-b。C"
"-kでカーソルからラインの末尾まで全ての文字を消去する事ができます。"

#: 10.1-Using-Shortcuts.md:74
#, fuzzy
msgid "Tidy Code"
msgstr "コードの整形"

#: 10.1-Using-Shortcuts.md:76
#, fuzzy
msgid "To auto-align your code simply press `M-m`."
msgstr "コードを自動整形するには `M-m`を押します。"

#: 10.1-Using-Shortcuts.md:78
#, fuzzy
msgid "Help System"
msgstr "ヘルプシステム"

#: 10.1-Using-Shortcuts.md:80
#, fuzzy
msgid ""
"To toggle the help system you can press `M-i`. However, a much more useful sho"
"rtcut to know is `C-i` which will look up the word underneath the cursor and d"
"isplay the docs if it finds anything. Instant help!"
msgstr ""
"ヘルプシステムを切り替えるには、`M-i`を押します。しかし、何かを見つける場合、もっとはるかに便利なショートカットは、カーソル下の単語検索し、ドキュメント"
"を表示する`C-i`です。簡単でしょう！"

#: 10.1-Using-Shortcuts.md:84
#, fuzzy
msgid "For a full list take a look at section 10.2 Shortcut Cheatsheet."
msgstr "完全なリストについては、セクション10.2ショートカット一覧表を見てみましょう。"

#: 10.2-Shortcut-Cheatsheet.md:1
#, fuzzy
msgid "10.2 Shortcut Cheatsheet"
msgstr "10.2 ショートカット一覧表"

#: 10.2-Shortcut-Cheatsheet.md:3
#, fuzzy
msgid "Shortcut Cheatsheet"
msgstr "ショートカット一覧表"

#: 10.2-Shortcut-Cheatsheet.md:5
#, fuzzy
msgid ""
"The following is a summary of the main shortcuts available within Sonic Pi. Pl"
"ease see Section 10.1 for motivation and background."
msgstr "以下は、Sonic Piで利用可能な主なショートカットをまとめたものです。動機と背景については、セクション10.1を参照してください。"

#: 10.2-Shortcut-Cheatsheet.md:8
#, fuzzy
msgid "Conventions"
msgstr "規定"

#: 10.2-Shortcut-Cheatsheet.md:10
#, fuzzy
msgid ""
"In this list, we use the following conventions (where *Meta* is one of *Alt* o"
"n Windows/Linux or *Cmd* on Mac):"
msgstr "このリストでは下記の規定に準拠します。 (WindowsとLinuxの*Meta*キー は*Alt*キー 、そしてMacは *Cmd*キー):"

#: 10.2-Shortcut-Cheatsheet.md:13
#, fuzzy
msgid ""
"`C-a` means hold the *Control* key then press the *a* key whilst holding them "
"both at the same time, then releasing."
msgstr "`C-a` は*Control* キーを押さえながらaキー、両方を同時にを押した後に離す事を意味しています。"

#: 10.2-Shortcut-Cheatsheet.md:14
#, fuzzy
msgid ""
"`M-r` means hold the *Meta* key and then press the *r* key whilst holding them"
" both at the same time, then releasing."
msgstr "`M-r` は*Meta* キーを押さえながらrキー、両方を同時にした後に離す事を意味しています。"

#: 10.2-Shortcut-Cheatsheet.md:15
#, fuzzy
msgid ""
"`S-M-z` means hold the *Shift* key, then the *Meta* key, then finally the *z* "
"key all at the same time, then releasing."
msgstr "`M-Z` は*Meta* キーを押さえながらShiftキー、そして最後にzキー全てを同時に押した後に離す事を意味しています。"

#: 10.2-Shortcut-Cheatsheet.md:16
#, fuzzy
msgid ""
"`C-M-f` means hold the *Control* key, then press *Meta* key, finally the *f* k"
"ey all at the same time, then releasing."
msgstr "`C-M-f` は*Control* キーを押さえながらMetaキー、そして最後にfキー全てを同時に押した後に離す事を意味しています。"

#: 10.2-Shortcut-Cheatsheet.md:18
#, fuzzy
msgid "Main Application Manipulation"
msgstr "主なアプリケーションの操作"

#: 10.2-Shortcut-Cheatsheet.md:20
#, fuzzy
msgid "`M-r` - Run code"
msgstr "`M-r` - コードを実行"

#: 10.2-Shortcut-Cheatsheet.md:21
#, fuzzy
msgid "`M-s` - Stop code"
msgstr "`M-s` - コードを停止"

#: 10.2-Shortcut-Cheatsheet.md:22
#, fuzzy
msgid "`M-i` - Toggle Help System"
msgstr "`M-i` - ヘルプシステムを表示"

#: 10.2-Shortcut-Cheatsheet.md:23
#, fuzzy
msgid "`M-p` - Toggle Preferences"
msgstr "`M-p` - 設定を表示"

#: 10.2-Shortcut-Cheatsheet.md:24
msgid "`M-{` - Switch buffer to the left"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:25
msgid "`M-}` - Switch buffer to the right"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:26
#, fuzzy
msgid "`M-+` - Increase text size of current buffer"
msgstr "`M-+` - 文字サイズを大きく"

#: 10.2-Shortcut-Cheatsheet.md:27
#, fuzzy
msgid "`M--` - Decrease text size of current buffer"
msgstr "`M--` - 文字サイズを小さく"

#: 10.2-Shortcut-Cheatsheet.md:29
#, fuzzy
msgid "Selection/Copy/Paste"
msgstr "選択/コピー/張り付け"

#: 10.2-Shortcut-Cheatsheet.md:31
#, fuzzy
msgid "`M-a` - Select all"
msgstr "`M-a` - 全てを選択"

#: 10.2-Shortcut-Cheatsheet.md:32
#, fuzzy
msgid "`M-c` - Copy selection to paste buffer"
msgstr "`M-c` - 選択個箇所をコピー"

#: 10.2-Shortcut-Cheatsheet.md:33
msgid "`M-]` - Copy selection to paste buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:34
#, fuzzy
msgid "`M-x` - Cut selection to paste buffer"
msgstr "`M-x` - 選択個箇所をカット"

#: 10.2-Shortcut-Cheatsheet.md:35
msgid "`C-]` - Cut selection to paste buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:36
#, fuzzy
msgid "`C-k` - Cut to the end of the line"
msgstr "`C-k` - カーソルから行の末尾まで全ての文字を消去する"

#: 10.2-Shortcut-Cheatsheet.md:37
#, fuzzy
msgid "`M-v` - Paste from paste buffer to editor"
msgstr "`M-v` - エディターへ張り付け"

#: 10.2-Shortcut-Cheatsheet.md:38
msgid "`C-y` - Paste from paste buffer to editor"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:39
msgid ""
"`C-SPACE` - Set mark. Navigation will now manipulate highlighted region. Use `"
"C-g` to escape."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:41
#, fuzzy
msgid "Text Manipulation"
msgstr "文字の操作"

#: 10.2-Shortcut-Cheatsheet.md:43
#, fuzzy
msgid "`M-m` - Align all text"
msgstr "`M-m` - テキストを整形"

#: 10.2-Shortcut-Cheatsheet.md:44
msgid "`Tab` - Align current line or selection (or select autocompletion)"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:45
#, fuzzy
msgid "`C-l` - Centre editor"
msgstr "`C-l` - 真ん中へ移動"

#: 10.2-Shortcut-Cheatsheet.md:46
msgid "`M-/` - Comment/Uncomment current line or selection"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:47
msgid "`C-t` - Transpose/swap characters"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:48
msgid "`M-u` - Convert next word (or selection) to upper case."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:49
msgid "`M-l` - Convert next word (or selection) to lower case."
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:53
#, fuzzy
msgid "`C-a` - Move to beginning of line"
msgstr "`C-a` - 行の冒頭に移動"

#: 10.2-Shortcut-Cheatsheet.md:54
#, fuzzy
msgid "`C-e` - Move to end of line"
msgstr "`C-e` - 行の末尾に移動"

#: 10.2-Shortcut-Cheatsheet.md:55
#, fuzzy
msgid "`C-p` - Move to previous line"
msgstr "`C-p` - ひとつ前の行に移動"

#: 10.2-Shortcut-Cheatsheet.md:56
#, fuzzy
msgid "`C-n` - Move to next line"
msgstr "`C-n` - 次の行に移動"

#: 10.2-Shortcut-Cheatsheet.md:57
#, fuzzy
msgid "`C-f` - Move forward one character"
msgstr "`C-f` - 一文字進む"

#: 10.2-Shortcut-Cheatsheet.md:58
#, fuzzy
msgid "`C-b` - Move backward one character"
msgstr "`C-b` - 一文字戻る"

#: 10.2-Shortcut-Cheatsheet.md:59
#, fuzzy
msgid "`M-f` - Move forward one word"
msgstr "`M-f` - 一単語進む"

#: 10.2-Shortcut-Cheatsheet.md:60
#, fuzzy
msgid "`M-b` - Move backward one word"
msgstr "`M-b` - 一単語戻る"

#: 10.2-Shortcut-Cheatsheet.md:61
msgid "`C-M-n` - Move line or selection down"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:62
msgid "`C-M-p` - Move line or selection up"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:63
msgid "`S-M-u` - Move up 10 lines"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:64
msgid "`S-M-d` - Move down 10 lines"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:65
msgid "`M-<` - Move to beginning of buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:66
msgid "`M->` - Move to end of buffer"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:68
#, fuzzy
msgid "Deletion"
msgstr "削除"

#: 10.2-Shortcut-Cheatsheet.md:70
#, fuzzy
msgid "`C-h` - Delete previous character"
msgstr "`C-h` - 前の文字を削除"

#: 10.2-Shortcut-Cheatsheet.md:71
#, fuzzy
msgid "`C-d` - Delete next character"
msgstr "`C-d` - 次の文字を削除"

#: 10.2-Shortcut-Cheatsheet.md:73
#, fuzzy
msgid "Advanced Editor Features"
msgstr "エディタの機能"

#: 10.2-Shortcut-Cheatsheet.md:75
#, fuzzy
msgid "`C-i` - Show docs for word under cursor"
msgstr "`C-i` - カーソル以下の文字を表示"

#: 10.2-Shortcut-Cheatsheet.md:76
#, fuzzy
msgid "`M-z` - Undo"
msgstr "`M-z` - アンドゥ（行った操作を取り消し、元の状態に戻る）"

#: 10.2-Shortcut-Cheatsheet.md:77
#, fuzzy
msgid "`S-M-z` - Redo"
msgstr "\\`S-M-z - リドゥ（一旦取り消した操作をやり直す）"

#: 10.2-Shortcut-Cheatsheet.md:78
#, fuzzy
msgid "`C-g` - Escape"
msgstr "`C-g` - エスケープ"

#: 10.2-Shortcut-Cheatsheet.md:79
msgid "`S-M-f` - Toggle fullscreen mode"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:80
msgid "`S-M-b` - Toggle visibility of buttons"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:81
msgid "`S-M-l` - Toggle visibility of log"
msgstr ""

#: 10.2-Shortcut-Cheatsheet.md:82
msgid "`S-M-m` - Toggle between light/dark modes"
msgstr ""

#: 10.3-Sharing.md:1
#, fuzzy
msgid "10.3 Sharing"
msgstr "10.3 共有"

#: 10.3-Sharing.md:3
#, fuzzy
msgid "Sharing"
msgstr "共有"

#: 10.3-Sharing.md:5
#, fuzzy
msgid "Sonic Pi is all about sharing and learning with each other."
msgstr "SonicPiは、お互いに共有し学習するものです。"

#: 10.3-Sharing.md:7
#, fuzzy
msgid ""
"Once you've learned how to code music, sharing your compositions is as simple "
"as sending an email containing your code. Please do *share* your code with oth"
"ers so they can *learn* from your work and even use parts in a new *mash-up*."
msgstr ""
"いったん、どのように音楽をコード化するかを学んだら、作曲したコードを共有することは電子メールを送信するのと同じくらい簡単なことです。あなたの作品から*学び*"
"、さらに新しい*マッシュアップ*で部品を使えるように他の人とコードを共有しましょう。"

#: 10.3-Sharing.md:12
#, fuzzy
msgid ""
"If you're unsure of the best way to share your work with others I recommend pu"
"tting your code on [GitHub](https://github.com) and your music on [SoundCloud]"
"(https://soundcloud.com). That way you'll be able to easily reach a large audi"
"ence."
msgstr ""
"もしあなたの作品を他者と共有するためのよい方法が見当たらなければ、あなたの音楽を[SoundCloud](https://soundcloud.com)へ、"
"そしてコードを[GitHub](https://github.com)に置くことをお勧めします。その方法で、あなたの作品は、容易にたくさんの人に届けることが"
"できるのです。"

#: 10.3-Sharing.md:17
#, fuzzy
msgid "Code -> GitHub"
msgstr "コードをGitHubへ"

#: 10.3-Sharing.md:19
#, fuzzy
msgid ""
"[GitHub](https://github.com) is a site for sharing and working with code. It's"
" used by professional developers as well as artists for sharing and collaborat"
"ing with code. The simplest way to share a new piece of code (or even an unfin"
"ished piece) is to create a [Gist](https://gist.github.com). A [Gist](https://"
"gist.github.com) is a simple way of uploading your code in a simple way that o"
"thers can see, copy and share."
msgstr ""
"[GitHub](https://github.com)は、コードを共有し作業するためのサイトです。コードの共有や共同作業のためにプロの開発者と同じくアーテ"
"ィストも使用しています。新しい作品のコード（あるいは未完の作品）を共有する最も簡単な方法は、この[GitHub](https://github.com)で["
"Gist](https://gist.github.com)を作成することです。[Gist](https://gist.github.com)機能はあなたの"
"コードをアップロードすることで、簡単に他の人が参照、コピーし共有することができます。"

#: 10.3-Sharing.md:27
#, fuzzy
msgid "Audio -> SoundCloud"
msgstr "音をSoundCloudへ"

#: 10.3-Sharing.md:29
#, fuzzy
msgid ""
"Another important way of sharing your work is to record the audio and upload i"
"t to [SoundCloud](https://soundcloud.com). Once you've uploaded your piece, ot"
"her users can comment and discuss your work. I also recommend placing a link t"
"o a [Gist](https://gist.github.com) of your code in the track description."
msgstr ""
"作品を共有するもう一つの重要な方法は、音を録音し[SoundCloud](https://soundcloud.com)にアップロードすることです。作品をア"
"ップロードしたら、他のユーザーがコメントしあなたの作品について話し合うことができます。また、トラックの詳細にあなたのコードの[Gist](https://g"
"ist.github.com) へリンクを貼ることをお勧めします。"

#: 10.3-Sharing.md:35
#, fuzzy
msgid ""
"To record your work, hit the `Rec` button in the toolbar, and recording starts"
" immediately. Hit `Run` to start your code if it isn't already in progress. Wh"
"en you're done recording, press the flashing `Rec` button again, and you'll be"
" prompted to enter a filename. The recording will be saved as a WAV file, whic"
"h can be edited and converted to MP3 by any number of free programs (try Audac"
"ity for instance)."
msgstr ""
"作品を記録するには、ツールバーの`Rec`ボタンを押すと、すぐに録音を開始します。 もしコードがすでに進行中でなければ、開始するために`Run`を押してくだ"
"さい。録音が完了したら、 再び点滅している`Rec`ボタンを押すと、ファイル名を入力するよう求められます。 WAVファイルとして保存された録音は、無料のソフ"
"トウエア（例えば、 Audacityを試してみてください）の任意の設定によって編集したりMP3に変換することができます。"

#: 10.3-Sharing.md:43
#, fuzzy
msgid "Hope"
msgstr "希望"

#: 10.3-Sharing.md:45
#, fuzzy
msgid ""
"I encourage you to share your work and really hope that we'll all teach each o"
"ther new tricks and moves with Sonic Pi. I'm really excited by what you'll hav"
"e to show me."
msgstr ""
"私はみなさんが作った作品を共有し、Sonic Piで実際に新しいトリックや動きをお互いに教えあってもらえることを願っています。あなたが何を魅せてくれるか本当"
"に楽しみにしています。"

#: 10.4-Performing.md:1
#, fuzzy
msgid "10.4 Performing"
msgstr "10.4 パフォーマンス"

#: 10.4-Performing.md:3
#, fuzzy
msgid "Performing"
msgstr "パフォーマンス"

#: 10.4-Performing.md:5
#, fuzzy
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to use cod"
"e as a *musical instrument*. This means that writing code live can now be seen"
" as a new way of performing music."
msgstr ""
"Sonic Piの中で最もエキサイティングな側面の一つは、*楽器としてコードを使うこと*ができるということです。これは、コードをライブで書き込むことが、音楽"
"を演奏する新しい方法とみなすことができることを意味します。"

#: 10.4-Performing.md:9
#, fuzzy
msgid "We call this *Live Coding*."
msgstr "我々は、これを*ライブコーディング*と呼んでいます。"

#: 10.4-Performing.md:11
#, fuzzy
msgid "Show Your Screen"
msgstr "画面を表示しよう"

#: 10.4-Performing.md:13
#, fuzzy
msgid ""
"When you live code I recommend you *show your screen* to your audience. Otherw"
"ise it's like playing a guitar but hiding your fingers and the strings. When I"
" practice at home I use a Raspberry Pi and a little mini projector on my livin"
"g room wall. You could use your TV or one of your school/work projectors to gi"
"ve a show. Try it, it's a lot of fun."
msgstr ""
"コードをライブするとき、観客に*あなたの画面を表示する*ことをお勧めします。そうでなければ、ギターを指や弦を隠しながら演奏するようなものです。私は家で練習す"
"るときは、ラズベリーパイと小型プロジェクターでリビングルームの壁に投影します。自分のテレビや学校/職場のプロジェクターのいずれかを使ってみましょう。挑戦して"
"みてください、とても楽しいです。"

#: 10.4-Performing.md:20
#, fuzzy
msgid "Form a Band"
msgstr "バンドを結成しよう"

#: 10.4-Performing.md:22
#, fuzzy
msgid ""
"Don't just play on your own - form a live coding band! It's a lot of fun jammi"
"ng with others. One person could do beats, another ambient background, etc. Se"
"e what interesting combinations of sounds you can have together."
msgstr ""
"絶対に1人で遊ばないでください - ライブコーディングバンドを結成しましょう！他の人とのセッションはとても楽しいものです。一人はビートを担当し、他のBGMや"
"環境音など、どんな面白い音の組み合わせがつくれるか一緒に試しましょう。"

#: 10.4-Performing.md:27
msgid "TOPLAP"
msgstr ""

#: 10.4-Performing.md:29
#, fuzzy
msgid ""
"Live coding isn't completely new - a small number of people have been doing it"
" for a few years now, typically using bespoke systems they've built for themse"
"lves. A great place to go and find out more about other live coders and system"
"s is [TOPLAP](http://toplap.org)."
msgstr ""
"ライブコーディングは新しいものではありません 一部の人々は、自ら構築した特注システムを使用して、ここ数年でライヴコーディングに取り組んできました。他のライブ"
"コーダーやシステムについての詳細を知るには[TOPLAP](http://toplap.org)絶好の場所があります。"

#: 10.4-Performing.md:34
msgid "Algorave"
msgstr ""

#: 10.4-Performing.md:36
#, fuzzy
msgid ""
"Another great resource for exploring the live coding world is [Algorave](http:"
"//algorave.com). Here you can find all about a specific strand of live coding "
"for making music in nightclubs."
msgstr ""
"ライブコーディングの世界を探索するためのもう一つの偉大なリソースは[Algorave](http://algorave.com)です。ここで、クラブシーンで"
"のライブコーディングに特化した情報を見つけることができます。"

#: 11-Minecraft-Pi.md:1
msgid "11 Minecraft Pi"
msgstr ""

#: 11-Minecraft-Pi.md:3
#, fuzzy
msgid "Minecraft Pi"
msgstr "Minecraft Pi（マインクラフトパイ）"

#: 11-Minecraft-Pi.md:5
#, fuzzy
msgid ""
"Sonic Pi now supports a simple API for interacting with Minecraft Pi - the spe"
"cial edition of Minecraft which is installed by default on the Raspberry Pi's "
"Raspbian Linux-based operating system."
msgstr ""
"Sonic Piは現在、 Minecraft Piと対話するためのシンプルなAPIをサポートしています。Minecraftの特別版は、Raspberry P"
"iのLinuxベースのオペレーティングシステムRaspbianにデフォルトでインストールされています。"

#: 11-Minecraft-Pi.md:9
#, fuzzy
msgid "No need to import libraries"
msgstr "ライブラリは不必要"

#: 11-Minecraft-Pi.md:11
#, fuzzy
msgid ""
"The Minecraft Pi integration has been designed to be insanely easy to use. All"
" you need to do is to launch Minecraft Pi and create a world. You're then free"
" to use the `mc_*` fns just like you might use `play` and `synth`. There's no "
"need to import anything or install any libraries - it's all ready to go and wo"
"rks out of the box."
msgstr ""
"Minecraft Piは、とっても簡単に扱えるよう設計されています。必要なことは、Minecraft Piを起動して世界を創造するだけです。その後、`pl"
"ay` や `synth` を扱うように `mc_*`関数を自由に使います。何かのライブラリをインストールしたり、インポートする必要はありません。箱から出し"
"て動かしてみましょう。"

#: 11-Minecraft-Pi.md:17
#, fuzzy
msgid "Automatic Connection"
msgstr "自動接続"

#: 11-Minecraft-Pi.md:19
#, fuzzy
msgid ""
"The Minecraft Pi API takes care of managing your connection to the Minecraft P"
"i application. This means you don't need to worry about a thing. If you try an"
"d use the Minecraft Pi API when Minecraft Pi isn't open, Sonic Pi will politel"
"y tell you. Similarly, if you close Minecraft Pi whilst you're still running a"
" `live_loop` that uses the API, the live loop will stop and politely tell you "
"that it can't connect. To reconnect, just launch Minecraft Pi again and Sonic "
"Pi will automatically detect and re-create the connection for you."
msgstr ""
"The Minecraft Pi API はMinecraft Piアプリケーションへの接続を可能にします。あなたは何も心配をしなくてもよいということです。"
" Minecraft Piを起動せずに、Minecraft Pi APIを使おうとした場合には、Sonic Piはこれを丁寧に教えてくれます。同様に、`li"
"ve_loop`を実行する一方で、もしも、MinecraftPiを閉じてしまっても、live_loopの接続を停止し、接続できてないことを丁寧に伝えてくれま"
"す。再接続するために、再びMinecraft Piを起動して、Sonic Piが自動検出して、再接続を試みます。"

#: 11-Minecraft-Pi.md:28
#, fuzzy
msgid "Designed to be Live Coded"
msgstr "ライブコーディングのデザイン"

#: 11-Minecraft-Pi.md:30
#, fuzzy
msgid ""
"The Minecraft Pi API has been designed to work seamlessly within `live_loop`s."
" This means it's possible to synchronise modifications in your Minecraft Pi wo"
"rlds with modifications in your Sonic Pi sounds. Instant Minecraft-based music"
" videos! Note however that Minecraft Pi is alpha software and is known to be s"
"lightly buggy. If you encounter any problems simply restart Minecraft Pi and c"
"arry on as before. Sonic Pi's automatic connection functionality will take car"
"e of things for you."
msgstr ""
"Minecraft Pi APIは`live_loop`内でシームレスに動作するように設計されています。 これは、SonicPiの音に変更を加え、Minec"
"raft Piの世界の変更と同期させることが可能であることを意味します。 インスタントなMinecraftベースのミュージックビデオです！ Minecraf"
"t Piはアルファ版のソフトウェアであり、 わずかに不安定であることに注意してください。何か問題が発生した場合は、単純にMinecraft Piを再起動し、"
"以前と同様に続けましょう。Sonic Piの自動接続機能が対応します。"

#: 11-Minecraft-Pi.md:39
#, fuzzy
msgid "Requires a Raspberry Pi 2.0"
msgstr "Raspberry Pi 2.0が必要"

#: 11-Minecraft-Pi.md:41
#, fuzzy
msgid ""
"It is highly recommended that you use a Raspberry Pi 2 if you wish to run both"
" Sonic Pi and Minecraft at the same time - especially if you want to use Sonic"
" Pi's sound capabilities."
msgstr ""
"Sonic　PiとMinecraftの両方を実行したい場合は、特にSonic　Piのサウンド機能を使用したい場合は Raspberry Pi 2.0を使用す"
"ることをお勧めします。"

#: 11-Minecraft-Pi.md:45
#, fuzzy
msgid "API Support"
msgstr "APIサポート"

#: 11-Minecraft-Pi.md:47
#, fuzzy
msgid ""
"At this stage, Sonic Pi supports basic block and player manipulations which ar"
"e detailed in Section 11.1. Support for event callbacks triggered by player in"
"teractions in the world is planned for a future release."
msgstr ""
"現段階では、Sonic　Piは、次のセクション11.1に詳述されている基本ブロックとプレイヤーの操作をサポートしています。 世界の中のプレイヤーの相互作用に"
"よるトリガーされるイベントのコールバックのサポートは、 将来のリリースバージョンで予定されています。"

#: 11.1-Basic-API.md:1
#, fuzzy
msgid "11.1 Basic API"
msgstr "11.1 APIの基礎"

#: 11.1-Basic-API.md:3
#, fuzzy
msgid "Basic Minecraft Pi API"
msgstr "Minecraft Pi APIの基礎"

#: 11.1-Basic-API.md:5
#, fuzzy
msgid ""
"Sonic Pi currently supports the following basic interactions with Minecraft Pi"
":"
msgstr "Sonic Pi は現在、下記のMinecraft Piの基本インタラクションをサポートしています:"

#: 11.1-Basic-API.md:7 11.1-Basic-API.md:16
#, fuzzy
msgid "Displaying chat messages"
msgstr "チャットメッセージの表示"

#: 11.1-Basic-API.md:8 11.1-Basic-API.md:33
#, fuzzy
msgid "Setting the position of the user"
msgstr "ユーザーの位置設定"

#: 11.1-Basic-API.md:9
#, fuzzy
msgid "Getting the position of the user"
msgstr "ユーザーの位置情報の取得"

#: 11.1-Basic-API.md:10
#, fuzzy
msgid "Setting the block type at a given coordinate"
msgstr "指定した座標にブロックタイプを設定"

#: 11.1-Basic-API.md:11
#, fuzzy
msgid "Getting the block type at a given coordinate"
msgstr "指定した座標のブロック タイプを取得"

#: 11.1-Basic-API.md:14
#, fuzzy
msgid "Let's look at each of these in turn."
msgstr "これら、それぞれを順番に見てみましょう。"

#: 11.1-Basic-API.md:18
#, fuzzy
msgid ""
"Let's see just how easy it is to control Minecraft Pi from Sonic Pi. First, ma"
"ke sure you have both Minecraft Pi and Sonic Pi open at the same time and also"
" make sure you've entered a Minecraft world and can walk around."
msgstr ""
"それではSonic Pi からの Minecraft Piの制御が、どれだけ簡単か見てみましょう。まずはじめに Minecraft Pi とSonic Pi"
" が同時に起動しているかを確認し、 Minecraft の世界に入って歩くことができることを確認してください。"

#: 11.1-Basic-API.md:23
#, fuzzy
msgid "In a fresh Sonic Pi buffer simply enter the following code:"
msgstr "新しいSonicPi のワークスペースで、次のコードを入力してください。"

#: 11.1-Basic-API.md:25
#, no-wrap
#, fuzzy
msgid "mc_message \"Hello from Sonic Pi\""
msgstr "mc_message \"Hello from Sonic Jam Pi\""

#: 11.1-Basic-API.md:29
#, fuzzy
msgid ""
"When you hit the *Run* button, you'll see your message flash up on the Minecra"
"ft window. Congratulations, you've written your first Minecraft code! That was"
" easy wasn't it."
msgstr ""
"*Run*ボタンを押すと、Minecraft ウィンドウにあなたのメッセージが表示されます。おめでとう、あなたは最初の Minecraft コードを書きまし"
"た!簡単でしたね。"

#: 11.1-Basic-API.md:35
#, fuzzy
msgid ""
"Now, let's try a little magic. Let's teleport ourselves somewhere! Try the fol"
"lowing:"
msgstr "これから、小さな魔法を試してみましょう。どこかに瞬間移動してみましょう！以下を試してください。"

#: 11.1-Basic-API.md:38
#, no-wrap
msgid "mc_teleport 50, 50, 50"
msgstr "mc_teleport 50, 50, 50"

#: 11.1-Basic-API.md:42
#, fuzzy
msgid ""
"When you hit *Run* - boom! You're instantantly transported to a new place. Mos"
"t likely it was somewhere in the sky and you fell down either to dry land or i"
"nto water. Now, what are those numbers: `50, 50, 50`? They're the coordinates "
"of the location you're trying to teleport to. Let's take a brief moment to exp"
"lore what coordinates are and how they work because they're really, really imp"
"ortant for programming Minecraft."
msgstr ""
"Runを押すとボーン！新しい場所へあなたの座標が移動しました。たいていは、乾燥した土地、または水に落ちたか、空中のどこかでしょう。`50, 50, 50`、"
"これらの数字は何でしょう?これらは瞬間移動しようとしている場所の座標です。Minecraftをプログラムするにあたり、座標がどのように動作するのか、本当に重"
"要であるので、短い時間でみていきましょう。"

#: 11.1-Basic-API.md:50
#, fuzzy
msgid "Coordinates"
msgstr "座標"

#: 11.1-Basic-API.md:52
#, fuzzy
msgid ""
"Imagine a pirate's map with a big `X` marking the location of some treasure. T"
"he exact location of the `X` can be described with two numbers - how far along"
" the map from left to right and how far along the map from bottom to top. For "
"example `10cm` across and `8cm` up. These two numbers `10` and `8` are coordin"
"ates. You could easily imagine describing the locations of other stashes of tr"
"easure with other pairs of numbers. Perhaps there's a big chest of gold at `2`"
" across and `9` up..."
msgstr ""
"いくつかの宝の場所が大きな`X`でマーキングされた海賊の地図を想像してみてください。`X`の正確な位置は、左から右へ向かってどれくらい離れているか、下から上"
"へ向かってどのくらい離れているか、この二つの数字で場所を記述することができます。例えば、横へ`10cm`、上に`8cm`。これら２つの数字`10`と`8`が"
"座標です。他に隠された宝物の在処も別の２つの数字で容易に記述できることが想像できますね。おそらく、`2`つ横切り、`9`つ上には大きな金脈がありそうです.."
"."

#: 11.1-Basic-API.md:61
#, fuzzy
msgid ""
"Now, in Minecraft two numbers isn't quite enough. We also need to know how hig"
"h we are. We therefore need three numbers:"
msgstr ""
"さて、 Minecraftの中では2つの数字では十分ではありません。また、私たちがどれだけ高い所にいるのかを知る必要があります。したがって、3つの数字が必要"
"になります。"

#: 11.1-Basic-API.md:64
#, fuzzy
msgid "How far from right to left in the world - `x`"
msgstr "どのくらい右端から、左へ - `x`"

#: 11.1-Basic-API.md:65
#, fuzzy
msgid "How far from front to back in the world - `z`"
msgstr "どのくらい手前から世界の奥へ - `z`"

#: 11.1-Basic-API.md:66
#, fuzzy
msgid "How high up we are in the world - `y`"
msgstr "どのくらい高くあがったか - `y`"

#: 11.1-Basic-API.md:68
#, fuzzy
msgid ""
"One more thing - we typically describe these coordinates in this order `x`, `y"
"`, `z`."
msgstr "通常、 `x`, `y`, `z`でこれらの座標を記述します。"

#: 11.1-Basic-API.md:71
#, fuzzy
msgid "Finding your current coordinates"
msgstr "現在の座標を知る"

#: 11.1-Basic-API.md:73
#, fuzzy
msgid ""
"Let's have a play with coordinates. Navigate to a nice place in the Minecraft "
"map and then switch over to Sonic Pi. Now enter the following:"
msgstr "座標を使って遊んでみましょう。Minecraftのマップで素敵な場所に移動した後、 SonicPiに切り替え次を入力してください。"

#: 11.1-Basic-API.md:76
#, no-wrap
msgid "puts mc_location"
msgstr "puts mc_location"

#: 11.1-Basic-API.md:80
#, fuzzy
msgid ""
"When you hit the *Run* button you'll see the coordinates of your current posit"
"ion displayed in the log window. Take a note of them, then move forward in the"
" world and try again. Notice how the coordinates changed! Now, I recommend you"
" spend some time repeating exactly this - move a bit in the world, take a look"
" at the coordinates and repeat. Do this until you start to get a feel for how "
"the coordinates change when you move. Once you've understood how coordinates w"
"ork, programming with the Minecraft API will be a complete breeze."
msgstr ""
"*Run*ボタンを押すと、ログ画面に、現在位置の座標が表示されます。それらを書き留め、その後で、世界で前方に移動し、再び挑戦してください。これを正確に繰り返"
"すことに時間を使うことをお勧めします。座標がどのように変化するかに注目しましょう！座標移動を繰り返して、世界のビットを移動しましょう。あなたが移動すると座標"
"がどのように変化するか感触を得られるまで、これを行いましょう。これを調整する方法が理解できれば、MinecraftのAPIを使用したプログラミングがほぼ完了"
"します。"

#: 11.1-Basic-API.md:89
#, fuzzy
msgid "Let's Build!"
msgstr "さぁ、構築しましょう!"

#: 11.1-Basic-API.md:91
#, fuzzy
msgid ""
"Now that you know how to find the current position and to teleport using coord"
"inates, you have all the tools you need to start building things in Minecraft "
"with code. Let's say you want to make the block with coordinates `40`, `50`, `"
"60` to be glass. That's super easy:"
msgstr ""
"現在位置をどのように知り、座標を利用して瞬間移動する方法を知っているあなたは、 Mincraft内に、コードで何かを構築し始めるための必要な道具をすべて持っ"
"ています。 座標`40`, `50`, `60`にガラスのブロックを作りたかったら、それはとっても簡単ですね。"

#: 11.1-Basic-API.md:96
#, no-wrap
msgid "mc_set_block :glass, 40, 50, 60"
msgstr "mc_set_block :glass, 40, 50, 60"

#: 11.1-Basic-API.md:100
#, fuzzy
msgid ""
"Haha, it really was that easy. To see your handywork just teleport nearby and "
"take a look:"
msgstr "ハハ、それは本当に簡単でした。あなたhandyworkを表示するには ちょっと近くに瞬間移動してみましょう。"

#: 11.1-Basic-API.md:103
#, no-wrap
msgid "mc_teleport 35, 50, 60"
msgstr "mc_teleport 35, 50, 60"

#: 11.1-Basic-API.md:107
#, fuzzy
msgid ""
"Now turn around and you should see your glass block! Try changing it to diamon"
"d:"
msgstr "振り向くと、あなたのガラスのブロックが表示されるはずです！それをダイヤモンドに変更してみましょう。"

#: 11.1-Basic-API.md:110
#, no-wrap
msgid "mc_set_block :diamond, 40, 50, 60"
msgstr "mc_set_block :diamond, 40, 50, 60"

#: 11.1-Basic-API.md:114
#, fuzzy
msgid ""
"If you were looking in the right direction you might have even seen it change "
"in front of your eyes! This is the start of something exciting..."
msgstr "もし正しい方角で見れば、それがあなたの目の前で変更される可能性があります！ これはエキサイティングな何かの始まりです..."

#: 11.1-Basic-API.md:117
#, fuzzy
msgid "Looking at blocks"
msgstr "ブロックを調べる"

#: 11.1-Basic-API.md:119
#, fuzzy
msgid ""
"Let's look at one last thing before we move onto something a bit more involved"
". Given a set of coordinates we can ask Minecraft what the type of a specific "
"block is. Let's try it with the diamond block you just created:"
msgstr ""
"少し複雑なことに移る前に、最後の一つを見てみましょう。座標の集合を与え、 特定のブロックの種類が何であるかをMinecraftに訪ねることができます。 では"
"、先ほど作成したダイヤモンドブロックでそれを試してみましょう。"

#: 11.1-Basic-API.md:124
#, no-wrap
msgid "puts mc_get_block 40, 50, 60"
msgstr "puts mc_get_block 40, 50, 60"

#: 11.1-Basic-API.md:128
#, fuzzy
msgid ""
"Yey! It's `:diamond`. Try changing it back to glass and asking again - does it"
" now say `:glass`? I'm sure it does :-)"
msgstr ""
"イェイ! それは`:diamond`(ダイヤモンド）ですね。ガラスに戻して、 もう一度尋ねてみましょう。`:glass`を示しましたか？信じています(^o^"
")"

#: 11.1-Basic-API.md:131
#, fuzzy
msgid "Available block types"
msgstr "使用可能なブロックタイプ"

#: 11.1-Basic-API.md:133
#, fuzzy
msgid ""
"Before you go on a Minecraft Pi coding rampage, you might find this list of av"
"ailable block types useful:"
msgstr "Minecraft Pi コーディングへ暴れに行く前に、利用可能な ブロックタイプの便利なリストを示します:"

#: 11.1-Basic-API.md:136
#, no-wrap
#, fuzzy
msgid ""
"    :air\n"
"    :stone\n"
"    :grass\n"
"    :dirt\n"
"    :cobblestone\n"
"    :wood_plank\n"
"    :sapling\n"
"    :bedrock\n"
"    :water_flowing\n"
"    :water\n"
"    :water_stationary\n"
"    :lava_flowing\n"
"    :lava\n"
"    :lava_stationary\n"
"    :sand\n"
"    :gravel\n"
"    :gold_ore\n"
"    :iron_ore\n"
"    :coal_ore\n"
"    :wood\n"
"    :leaves\n"
"    :glass\n"
"    :lapis\n"
"    :lapis_lazuli_block\n"
"    :sandstone\n"
"    :bed\n"
"    :cobweb\n"
"    :grass_tall\n"
"    :flower_yellow\n"
"    :flower_cyan\n"
"    :mushroom_brown\n"
"    :mushroom_red\n"
"    :gold_block\n"
"    :gold\n"
"    :iron_block\n"
"    :iron\n"
"    :stone_slab_double\n"
"    :stone_slab\n"
"    :brick\n"
"    :brick_block\n"
"    :tnt\n"
"    :bookshelf\n"
"    :moss_stone\n"
"    :obsidian\n"
"    :torch\n"
"    :fire\n"
"    :stairs_wood\n"
"    :chest\n"
"    :diamond_ore\n"
"    :diamond_block\n"
"    :diamond\n"
"    :crafting_table\n"
"    :farmland\n"
"    :furnace_inactive\n"
"    :furnace_active\n"
"    :door_wood\n"
"    :ladder\n"
"    :stairs_cobblestone\n"
"    :door_iron\n"
"    :redstone_ore\n"
"    :snow\n"
"    :ice\n"
"    :snow_block\n"
"    :cactus\n"
"    :clay\n"
"    :sugar_cane\n"
"    :fence\n"
"    :glowstone_block\n"
"    :bedrock_invisible\n"
"    :stone_brick\n"
"    :glass_pane\n"
"    :melon\n"
"    :fence_gate\n"
"    :glowing_obsidian\n"
"    :nether_reactor_core"
msgstr ""
"    :air\t\t\t空気\n"
"    :stone\t\t\t石\n"
"    :grass\t\t\t草\n"
"    :dirt\t\t\t汚れ\n"
"    :cobblestone\t\t石畳\n"
"    :wood_plank\t\t木の板\n"
"    :sapling\t\t苗木\n"
"    :bedrock\t\t岩盤\n"
"    :water_flowing\t\t水流\n"
"    :water\t\t\t水\n"
"    :water_stationary\t静止した水\n"
"    :lava_flowing\t\t溶岩流\n"
"    :lava\t\t\t溶岩\n"
"    :lava_stationary\t固まった溶岩\n"
"    :sand\t\t\t砂\n"
"    :gravel\t\t\t砂利\n"
"    :gold_ore\t\t金の鉱石\n"
"    :iron_ore\t\t鉄鉱石\n"
"    :coal_ore\t\t石炭鉱石\n"
"    :wood\t\t\t木材\n"
"    :leaves\t\t\t葉\n"
"    :glass\t\t\tガラス\n"
"    :lapis\t\t\tラピス\n"
"    :lapis_lazuli_block\tラピスラズリブロック\n"
"    :sandstone\t\t砂岩\n"
"    :bed\t\t\tベッド\n"
"    :cobweb\t\t\tクモの巣\n"
"    :grass_tall\t\t背の高い草\n"
"    :flower_yellow\t\t黄色い花\n"
"    :flower_cyan\t\tシアン色の花\n"
"    :mushroom_brown\t\t茶色いキノコ\n"
"    :mushroom_red\t\t赤いキノコ\n"
"    :gold_block\t\t金のブロック\n"
"    :gold\t\t\t金\n"
"    :iron_block\t\t鉄のブロック\n"
"    :iron\t\t\t鉄\n"
"    :stone_slab_double\t石板(ダブル)\n"
"    :stone_slab\t\t石板\n"
"    :brick\t\t\tレンガ\n"
"    :brick_block\t\tレンガブロック\n"
"    :tnt\n"
"    :bookshelf\t\t本棚\n"
"    :moss_stone\t\t苔石\n"
"    :obsidian\t\t黒曜石\n"
"    :torch\t\t\tトーチ\n"
"    :fire\t\t\t火\n"
"    :stairs_wood\t\t木の階段\n"
"    :chest\t\t\tチェスト\n"
"    :diamond_ore\t\tダイアモンドの鉱石\n"
"    :diamond_block\t\tダイアモンドのブロック\n"
"    :diamond\t\tダイアモンド\n"
"    :crafting_table\t\t作業テーブル\n"
"    :farmland\t\t農地\n"
"    :furnace_inactive\t廃炉\n"
"    :furnace_active\t\t炉\n"
"    :door_wood\t\t木のドア\n"
"    :ladder\t\t\tはしご\n"
"    :stairs_cobblestone\t石畳の階段\n"
"    :door_iron\t\t鉄のドア\n"
"    :redstone_ore\t\tレッドストーン鉱石\n"
"    :snow\t\t\t雪\n"
"    :ice\t\t\t氷\n"
"    :snow_block\t\t雪のブロック\n"
"    :cactus\t\t\tサボテン\n"
"    :clay\t\t\t粘土\n"
"    :sugar_cane\t\tサトウキビ\n"
"    :fence\t\t\tフェンズ\n"
"    :glowstone_block\t光る石のブロック\n"
"    :bedrock_invisible\t目に見えない岩盤\n"
"    :stone_brick\t\t石レンガ\n"
"    :glass_pane\t\tガラス板\n"
"    :melon\t\t\tメロン\n"
"    :fence_gate\t\tフェンスゲート\n"
"    :glowing_obsidian\t輝く黒曜石\n"
"    :nether_reactor_core\t原子炉コア"

#: 12-Conclusions.md:1
#, fuzzy
msgid "12 Conclusions"
msgstr "12 おわりに"

#: 12-Conclusions.md:3
#, fuzzy
msgid "Conclusions"
msgstr "おわりに"

#: 12-Conclusions.md:5
#, fuzzy
msgid ""
"This concludes the Sonic Pi introductory tutorial. Hopefully you've learned so"
"mething along the way. Don't worry if you feel you didn't understand everythin"
"g - just play and have fun and you'll pick things up in your own time. Feel fr"
"ee to dive back in when you have a question that might be covered in one of th"
"e sections."
msgstr ""
"これでSonic Pi入門のチュートリアルを終了します。方法に沿って何かを学べたのではないでしょうか。すべてを理解していなくても心配しないでください。とにか"
"く時間を使って演奏し楽しんでください。質問があれば、気軽に戻ってチュートリアルを読み直してみてください。"

#: 12-Conclusions.md:11
#, fuzzy
msgid ""
"If you have any questions that haven't been covered in the tutorial, then plea"
"se jump onto the [Sonic Pi forums](http://groups.google.com/group/sonic-pi/) a"
"nd ask your question there. You'll find someone friendly and willing to lend a"
" hand."
msgstr ""
"もし、チュートリアルでカバーされていない疑問がある場合は、[Sonic Pi forums](http://groups.google.com/group/"
"sonic-pi/)を開き、質問をしてください。そこでは、誰かが親身に手を貸してくれるでしょう。"

#: 12-Conclusions.md:16
#, fuzzy
msgid ""
"Finally, I also invite you to take a deeper look at the rest of the documentat"
"ion in this help system. There are a number of features that haven't been cove"
"red in this tutorial that are waiting for your discovery."
msgstr ""
"最後に、このヘルプシステムのマニュアルの他の部分をより深くチェックすることをお勧めします。このチュートリアルではカバーしていない機能がいくつかあるので、新た"
"な発見が待っているでしょう。"

#: 12-Conclusions.md:21
#, fuzzy
msgid ""
"So play, have fun, share your code, perform for your friends, show your screen"
"s and remember:"
msgstr "遊んで、楽しんで、コードを共有して、そしてスクリーンをみせながら、友人のために演奏してください。 そして思い出してください。"

#: 12-Conclusions.md:24
#, fuzzy
msgid "*There are no mistakes, only opportunities.*"
msgstr "*間違いはない、あるのはただ可能性だけ*"

#: 12-Conclusions.md:26
msgid "[Sam Aaron](http://twitter.com/samaaron)"
msgstr ""

#: A-Articles.md:1
msgid "A Appendix A - MagPi Articles"
msgstr ""

#: A-Articles.md:3
msgid "MagPi Articles"
msgstr ""

#: A-Articles.md:5
msgid "Appendix A collects all the Sonic Pi articles written for the MagPi magazine."
msgstr ""

#: A-Articles.md:8
msgid "Dive into Topics"
msgstr ""

#: A-Articles.md:10
msgid ""
"These articles aren't meant to be read in any strict order and contain a lot o"
"f cross-over material from the tutorial itself. Rather than try and teach you "
"all of Sonic Pi, they instead each focus on a specific aspect of Sonic Pi and "
"cover it in a fun and accessible way."
msgstr ""

#: A-Articles.md:15
msgid "Read the MagPi"
msgstr ""

#: A-Articles.md:17
msgid ""
"You can see them in their glorious professionally typeset form in the free PDF"
" downloads of The MagPi here: https://www.raspberrypi.org/magpi/"
msgstr ""

#: A-Articles.md:20
msgid "Suggest a Topic"
msgstr ""

#: A-Articles.md:22
msgid ""
"If you don't see a topic that interests you covered in these articles - why no"
"t suggest one? The easiest way to do that is to tweet your suggestion to [@Son"
"ic_Pi](http://twitter.com/sonic_pi). You never know - your suggestion might be"
" the subject of the next article!"
msgstr ""

#: A.01-tips.md:1
msgid "A.1 Tips for Sonic Pi"
msgstr ""

#: A.01-tips.md:3
msgid "Five Top Tips"
msgstr ""

#: A.01-tips.md:5
msgid "1. There are no mistakes"
msgstr ""

#: A.01-tips.md:7
msgid ""
"The most important lesson to learn with Sonic Pi is that there really are no m"
"istakes. The best way to learn is to just try and try and try. Try lots of dif"
"ferent things out, stop worrying whether your code sounds good or not and star"
"t experimenting with as many different synths, notes, FX and opts as possible."
" You'll discover a lot of things that make you laugh because they sound just a"
"wful and some real gems that sound truly amazing. Simply drop the things you d"
"on't like and keep the things you do. The more 'mistakes' you allow yourself t"
"o make the quicker you'll learn and discover your personal coding sound."
msgstr ""

#: A.01-tips.md:18
msgid "2. Use the FX"
msgstr ""

#: A.01-tips.md:20
msgid ""
"Say you've already mastered the Sonic Pi basics of making sounds with `sample`"
", `play`? What's next? Did you know that Sonic Pi supports over 27 studio FX t"
"o change the sound of your code? FX are like fancy image filters in drawing pr"
"ograms except that instead of blurring or making something black and white, yo"
"u can add things like reverb, distortion and echo to your sound. Think of it l"
"ike sticking the cable from your guitar to an effects pedal of your choice and"
" then into the amplifier. Luckily, Sonic Pi makes using FX really easy and req"
"uires no cables! All you need to do is to choose which section of your code yo"
"u'd like the FX added to and wrap it with the FX code. Let's look at an exampl"
"e. Say you had the following code:"
msgstr ""

#: A.01-tips.md:32
#, no-wrap
msgid ""
"sample :loop_garzul\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"sample :loop_garzul\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.01-tips.md:41
msgid ""
"If you wanted to add FX to the `:loop_garzul` sample, you'd just tuck it insid"
"e a `with_fx` block like this:"
msgstr ""

#: A.01-tips.md:44
#, no-wrap
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.01-tips.md:55
msgid ""
"Now, if you wanted to add FX to the bass drum, go and wrap that with `with_fx`"
" too:"
msgstr ""

#: A.01-tips.md:58
#, no-wrap
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"with_fx :echo do\n"
"  16.times do\n"
"    sample :bd_haus\n"
"    sleep 0.5\n"
"  end\n"
"end"
msgstr ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"with_fx :echo do\n"
"  16.times do\n"
"    sample :bd_haus\n"
"    sleep 0.5\n"
"  end\n"
"end"

#: A.01-tips.md:71
msgid ""
"Remember, you can wrap *any* code within `with_fx` and any sounds created will"
" pass through that FX."
msgstr ""

#: A.01-tips.md:75
msgid "3. Parameterise your synths"
msgstr ""

#: A.01-tips.md:77
msgid ""
"In order to really discover your coding sound you'll soon want to know how to "
"modify and control synths and FX. For example, you might want to change the du"
"ration of a note, add more reverb, or change the time between echoes. Luckily,"
" Sonic Pi gives you an amazing level of control to do exactly this with specia"
"l things called optional parameters or opts for short. Let's take a quick look"
". Copy this code into a workspace and hit run:"
msgstr ""

#: A.01-tips.md:85
#, no-wrap
msgid "sample :guit_em9"
msgstr "sample :guit_em9"

#: A.01-tips.md:89
msgid ""
"Ooh, a lovely guitar sound! Now, let's start playing with it. How about changi"
"ng its rate?"
msgstr ""

#: A.01-tips.md:92
#, no-wrap
msgid "sample :guit_em9, rate: 0.5"
msgstr "sample :guit_em9, rate: 0.5"

#: A.01-tips.md:96
msgid ""
"Hey, what's that `rate: 0.5` bit I just added at the end? That's called an opt"
". All of Sonic Pi's synths and FX support them and there's loads to play aroun"
"d with. They're also available for FX too. Try this:"
msgstr ""

#: A.01-tips.md:100
#, no-wrap
msgid ""
"with_fx :flanger, feedback: 0.6 do\n"
"  sample :guit_em9\n"
"end"
msgstr ""
"with_fx :flanger, feedback: 0.6 do\n"
"  sample :guit_em9\n"
"end"

#: A.01-tips.md:106
msgid ""
"Now, try increasing that feedback to 1 to hear some crazy sounds! Read the doc"
"s for full details on all the many opts available to you."
msgstr ""

#: A.01-tips.md:110
msgid "5. Live Code"
msgstr ""

#: A.01-tips.md:112
msgid ""
"The best way to quickly experiment and explore Sonic Pi is to live code. This "
"allows you to start off some code and continually change and tweak it whilst i"
"t's still playing. For example, if you don't know what the cutoff parameter do"
"es to a sample, just play around. Let's have a try! Copy this code into one of"
" your Sonic Pi workspaces:"
msgstr ""

#: A.01-tips.md:118
#, no-wrap
msgid ""
"live_loop :experiment do\n"
"  sample :loop_amen, cutoff: 70\n"
"  sleep 1.75\n"
"end"
msgstr ""
"live_loop :experiment do\n"
"  sample :loop_amen, cutoff: 70\n"
"  sleep 1.75\n"
"end"

#: A.01-tips.md:125
msgid ""
"Now, hit run and you'll hear a slightly muffled drum break. Now, change the `c"
"utoff:` value to `80` and hit run again. Can you hear the difference? Try `90`"
", `100`, `110`..."
msgstr ""

#: A.01-tips.md:129
msgid ""
"Once you get the hang of using `live_loop`s you'll not turn back. Whenever I d"
"o a live coding gig I rely on `live_loop` as much as a drummer relies on their"
" sticks. For more information about live coding check out Section 9 of the bui"
"lt-in tutorial."
msgstr ""

#: A.01-tips.md:134
msgid "5. Surf the random streams"
msgstr ""

#: A.01-tips.md:136
msgid ""
"Finally, one thing I love doing is cheating by getting Sonic Pi to compose thi"
"ngs for me. A really great way to do this is using randomisation. It might sou"
"nd complicated but it really isn't. Let's take a look. Copy this into a spare "
"workspace:"
msgstr ""

#: A.01-tips.md:141
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :rand_surfer do\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.01-tips.md:152
msgid ""
"Now, when you play this, you'll hear a constant stream of random notes from th"
"e scale `:e2 :minor_pentatonic` played with the `:dsaw` synth. \"Wait, wait! Th"
"at's not a melody\", I hear you shout! Well, here's the first part of the magic"
" trick. Every time we go round the `live_loop` we can tell Sonic Pi to reset t"
"he random stream to a known point. This is a bit like going back in time in th"
"e TARDIS with the Doctor to a particular point in time and space. Let's try it"
" - add the line `use_random_seed 1` to the `live_loop`:"
msgstr ""

#: A.01-tips.md:161
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_random_seed 1\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :rand_surfer do\n"
"  use_random_seed 1\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.01-tips.md:173
msgid ""
"Now, every time the `live_loop` loops around, the random stream is reset. This"
" means it chooses the same 16 notes every time. Hey presto! An instant melody."
" Now, here's the really exciting bit. Change the seed value from `1` to anothe"
"r number. Say `4923`. Wow! Another melody! So, just by changing one number (th"
"e random seed), you can explore as many melodic combinations as you can imagin"
"e! Now, that's the magic of code."
msgstr ""

#: A.02-live-coding.md:1
msgid "A.2 Live Coding"
msgstr ""

#: A.02-live-coding.md:5
msgid ""
"The laser beams sliced through the wafts of smoke as the subwoofer pumped bass"
" deep into the bodies of the crowd. The atmosphere was ripe with a heady mix o"
"f synths and dancing. However something wasn't quite right in this nightclub. "
"Projected in bright colours above the DJ booth was futuristic text, moving, da"
"ncing, flashing. This wasn't fancy visuals, it was merely a projection of Soni"
"c Pi running on a Raspberry Pi. The occupant of the DJ booth wasn't spinning d"
"isks, he was writing, editing and evaluating code. Live. This is Live Coding."
msgstr ""

#: A.02-live-coding.md:14
msgid ""
"![Sam Aaron Live Coding](../images/tutorial/articles/A.02-live-coding/sam-aaro"
"n-live-coding.png)"
msgstr ""

#: A.02-live-coding.md:16
msgid ""
"This may sound like a far fetched story from a futuristic night club but codin"
"g music like this is a growing trend and is often described as Live Coding (ht"
"tp://toplap.org). One of the recent directions this approach to music making h"
"as taken is the Algorave (http://algorave.com) - events where artists like mys"
"elf code music for people to dance to. However, you don't need to be in a nigh"
"tclub to Live Code - with Sonic Pi v2.6+ you can do it anywhere you can take y"
"our Raspberry Pi and a pair of headphones or some speakers. Once you reach the"
" end of this article, you'll be programming your own beats and modifying them "
"live. Where you go afterwards will only be constrained by your imagination."
msgstr ""

#: A.02-live-coding.md:27
msgid "Live Loop"
msgstr ""

#: A.02-live-coding.md:29
msgid ""
"The key to live coding with Sonic Pi is mastering the `live_loop`. Let's look "
"at one:"
msgstr ""

#: A.02-live-coding.md:32
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.02-live-coding.md:39
msgid ""
"There are 4 core ingredients to a `live_loop`. The first is its name. Our `liv"
"e_loop` above is called `:beats`. You're free to call your `live_loop` anythin"
"g you want. Go crazy. Be creative. I often use names that communicate somethin"
"g about the music they're making to the audience. The second ingredient is the"
" `do` word which marks where the `live_loop` starts. The third is the `end` wo"
"rd which marks where the `live_loop` finishes, and finally there is the body o"
"f the `live_loop` which describes what the loop is going to repeat - that's th"
"e bit between the `do` and `end`. In this case we're repeatedly playing a bass"
" drum sample and waiting for half a beat. This produces a nice regular bass be"
"at. Go ahead, copy it into an empty Sonic Pi buffer and hit run. Boom, Boom, B"
"oom!."
msgstr ""

#: A.02-live-coding.md:52
msgid "Redefining On-the-fly"
msgstr ""

#: A.02-live-coding.md:54
msgid ""
"Ok, so what's so special about the `live_loop`? So far it just seems like a gl"
"orified `loop`! Well, the beauty of `live_loop`s is that you can redefine them"
" on-the-fly. This means that whilst they're still running, you can change what"
" they do. This is the secret to live coding with Sonic Pi. Let's have a play:"
msgstr ""

#: A.02-live-coding.md:60
#, no-wrap
msgid ""
"live_loop :choral_drone do\n"
"  sample :ambi_choir, rate: 0.4\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :choral_drone do\n"
"  sample :ambi_choir, rate: 0.4\n"
"  sleep 1\n"
"end"

#: A.02-live-coding.md:67
msgid ""
"Now press the Run button or hit `alt-r`. You're now listening to some gorgeous"
" choir sounds. Now, whilst it's still playing, change the rate from `0.4` to `"
"0.38`. Hit run again. Woah! Did you hear the choir change note? Change it back"
" up to `0.4` to return back to how it was. Now, drop it to `0.2`, down to `0.1"
"9` and then back up to `0.4`. See how changing just one parameter on the fly c"
"an give you real control of the music? Now play around with the rate yourself "
"- choose your own values. Try negative numbers, really small numbers and large"
" numbers. Have fun!"
msgstr ""

#: A.02-live-coding.md:77
msgid "Sleeping is important"
msgstr ""

#: A.02-live-coding.md:79
msgid ""
"One of the most important lessons about `live_loop`s is that they need rest. C"
"onsider the following `live_loop`:"
msgstr ""

#: A.02-live-coding.md:82
#, no-wrap
msgid ""
"live_loop :infinite_impossibilities do\n"
"  sample :ambi_choir\n"
"end"
msgstr ""
"live_loop :infinite_impossibilities do\n"
"  sample :ambi_choir\n"
"end"

#: A.02-live-coding.md:88
msgid ""
"If you try running this code, you'll immediately see Sonic Pi complaining that"
" the `live_loop` did not sleep. This is a safety system kicking in! Take a mom"
"ent to think about what this code is asking the computer to do. That's right, "
"it's asking the computer to play an infinite amount of choir samples in zero t"
"ime. Without the safety system the poor computer will try and do this and cras"
"h and burn in the process. So remember, your `live_loop`s must contain a `slee"
"p`."
msgstr ""

#: A.02-live-coding.md:97
msgid "Combining Sounds"
msgstr ""

#: A.02-live-coding.md:99
msgid ""
"Music is full of things happening at the same time. Drums at the same time as "
"bass at the same time as vocals at the same time as guitars... In computing we"
" call this concurrency and Sonic Pi provides us with an amazingly simple way o"
"f playing things at the same time. Simply use more than one `live_loop`!"
msgstr ""

#: A.02-live-coding.md:105
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :bd_tek\n"
"  with_fx :echo, phase: 0.125, mix: 0.4 do\n"
"    sample  :drum_cymbal_soft, sustain: 0, release: 0.1\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"live_loop :bass do\n"
"  use_synth :tb303\n"
"  synth :tb303, note: :e1, release: 4, cutoff: 120, cutoff_attack: 1\n"
"  sleep 4\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :bd_tek\n"
"  with_fx :echo, phase: 0.125, mix: 0.4 do\n"
"    sample  :drum_cymbal_soft, sustain: 0, release: 0.1\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"live_loop :bass do\n"
"  use_synth :tb303\n"
"  synth :tb303, note: :e1, release: 4, cutoff: 120, cutoff_attack: 1\n"
"  sleep 4\n"
"end"

#: A.02-live-coding.md:121
msgid ""
"Here, we have two `live_loop`s, one looping quickly making beats and another l"
"ooping slowly making a crazy bass sound."
msgstr ""

#: A.02-live-coding.md:124
msgid ""
"One of the interesting things about using multiple `live_loop`s is that they e"
"ach manage their own time. This means it's really easy to create interesting p"
"olyrhythmical structures and even play with phasing Steve Reich style. Check t"
"his out:"
msgstr ""

#: A.02-live-coding.md:129
#, no-wrap
msgid ""
"# Steve Reich's Piano Phase\n"
"notes = (ring :E4, :Fs4, :B4, :Cs5, :D5, :Fs4, :E4, :Cs5, :B4, :Fs4, :D5, :Cs5"
")\n"
"live_loop :slow do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.3\n"
"end\n"
"live_loop :faster do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.295\n"
"end"
msgstr ""
"# Steve Reich's Piano Phase\n"
"notes = (ring :E4, :Fs4, :B4, :Cs5, :D5, :Fs4, :E4, :Cs5, :B4, :Fs4, :D5, :Cs5"
")\n"
"live_loop :slow do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.3\n"
"end\n"
"live_loop :faster do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.295\n"
"end"

#: A.02-live-coding.md:145 A.03-coded-beats.md:155 A.04-synth-riffs.md:166
#: A.05-acid-bass.md:147 A.06-minecraft.md:156 A.07-bizet.md:138
#: A.09-randomisation.md:145 A.10-controlling-your-sound.md:149
#: A.11-beat-tracking.md:176 A.12-sample-slicing.md:137
msgid "Bringing it all together"
msgstr ""

#: A.02-live-coding.md:147
msgid ""
"In each of these tutorials, we'll end with a final example in the form of a ne"
"w piece of music which draws from all of the ideas introduced. Read this code "
"and see if you can imagine what it's doing. Then, copy it into a fresh Sonic P"
"i buffer and hit Run and actually hear what it sounds like. Finally, change on"
"e of the numbers or comment and uncomment things out. See if you can use this "
"as a starting point for a new performance, and most of all have fun! See you n"
"ext time..."
msgstr ""

#: A.02-live-coding.md:156
#, no-wrap
msgid ""
"with_fx :reverb, room: 1 do\n"
"  live_loop :time do\n"
"    synth :prophet, release: 8, note: :e1, cutoff: 90, amp: 3\n"
"    sleep 8\n"
"  end\n"
"end\n"
"live_loop :machine do\n"
"  sample :loop_garzul, rate: 0.5, finish: 0.25\n"
"  sample :loop_industrial, beat_stretch: 4, amp: 1\n"
"  sleep 4\n"
"end\n"
"live_loop :kik do\n"
"  sample :bd_haus, amp: 2\n"
"  sleep 0.5\n"
"end\n"
"with_fx :echo do\n"
"  live_loop :vortex do\n"
"    # use_random_seed 800\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 3)\n"
"    16.times do\n"
"      play notes.choose, release: 0.1, amp: 1.5\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb, room: 1 do\n"
"  live_loop :time do\n"
"    synth :prophet, release: 8, note: :e1, cutoff: 90, amp: 3\n"
"    sleep 8\n"
"  end\n"
"end\n"
"live_loop :machine do\n"
"  sample :loop_garzul, rate: 0.5, finish: 0.25\n"
"  sample :loop_industrial, beat_stretch: 4, amp: 1\n"
"  sleep 4\n"
"end\n"
"live_loop :kik do\n"
"  sample :bd_haus, amp: 2\n"
"  sleep 0.5\n"
"end\n"
"with_fx :echo do\n"
"  live_loop :vortex do\n"
"    # use_random_seed 800\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 3)\n"
"    16.times do\n"
"      play notes.choose, release: 0.1, amp: 1.5\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.03-coded-beats.md:1
msgid "A.3 Coded Beats"
msgstr ""

#: A.03-coded-beats.md:3
msgid "Coded Beats"
msgstr ""

#: A.03-coded-beats.md:5
msgid ""
"One of the most exciting and disrupting technical developments in modern music"
" was the invention of samplers. These were boxes that allowed you to record an"
"y sound into them and then manipulate and play back those sounds in many inter"
"esting ways. For example, you could take an old record, find a drum solo (or b"
"reak), record it into your sampler and then play it back on repeat at half-spe"
"ed to provide the foundation for your latest beats. This is how early hip-hop "
"music was born and today it's almost impossible to find electronic music that "
"doesn't incorporate samples of some kind. Using samples is a really great way "
"of easily introducing new and interesting elements into your live coded perfor"
"mances."
msgstr ""

#: A.03-coded-beats.md:17
msgid ""
"So where can you get a sampler? Well you already have one - it's your Raspberr"
"y Pi! The built-in live coding app Sonic Pi has an extremely powerful sampler "
"built into its core. Let's play with it!"
msgstr ""

#: A.03-coded-beats.md:21
msgid "The Amen Break"
msgstr ""

#: A.03-coded-beats.md:23
msgid ""
"One of the most classic and recognisable drum break samples is called the Amen"
" Break. It was first performed in 1969 in the song \"Amen Brother\" by the Winst"
"ons as part of a drum break. However, it was when it was discovered by early h"
"ip-hop musicians in the 80s and used in samplers that it started being heavily"
" used in a wide variety of other styles such as drum and bass, breakbeat, hard"
"core techno and breakcore."
msgstr ""

#: A.03-coded-beats.md:30
msgid ""
"I'm sure you're excited to hear that it's also built right into Sonic Pi. Clea"
"r up a buffer and throw in the following code:"
msgstr ""

#: A.03-coded-beats.md:37
msgid ""
"Hit *Run* and boom! You're listening to one of the most influential drum break"
"s in the history of dance music. However, this sample wasn't famous for being "
"played as a one-shot, it was built for being looped."
msgstr ""

#: A.03-coded-beats.md:42
msgid "Beat Stretching"
msgstr ""

#: A.03-coded-beats.md:44
msgid ""
"Let's loop the Amen Break by using our old friend the `live_loop` introduced i"
"n this tutorial last month:"
msgstr ""

#: A.03-coded-beats.md:47
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen\n"
"  sleep 2\n"
"end"
msgstr ""
"live_loop :amen_break do\n"
"  sample :loop_amen\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:54
msgid ""
"OK, so it is looping, but there's an annoying pause every time round. That is "
"because we asked it to sleep for `2` beats and with the default BPM of 60 the "
"`:loop_amen` sample only lasts for `1.753` beats. We therefore have a silence "
"of `2 - 1.753 = 0.247` beats. Even though it's short, it's still noticeable."
msgstr ""

#: A.03-coded-beats.md:60
msgid ""
"To fix this issue we can use the `beat_stretch:` opt to ask Sonic Pi to stretc"
"h (or shrink) the sample to match the specified number of beats."
msgstr ""

#: A.03-coded-beats.md:63
msgid ""
"Sonic Pi's `sample` and `synth` fns give you a lot of control via optional par"
"ameters such as `amp:`, `cutoff:` and `release:`. However, the term optional p"
"arameter is a real mouthful so we just call them *opts* to keep things nice an"
"d simple."
msgstr ""

#: A.03-coded-beats.md:68
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end  "
msgstr ""
"live_loop :amen_break do\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end  "

#: A.03-coded-beats.md:75
msgid ""
"Now we're dancing! Although, perhaps we want to speed it up or slow it down to"
" suit the mood."
msgstr ""

#: A.03-coded-beats.md:78
msgid "Playing with Time"
msgstr ""

#: A.03-coded-beats.md:80
msgid ""
"OK, so what if we want to change styles to old school hip hop or breakcore? On"
"e simple way of doing this is to play with time - or in other words mess with "
"the tempo. This is super easy in Sonic Pi - just throw in a `use_bpm` into you"
"r live loop:"
msgstr ""

#: A.03-coded-beats.md:85
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 30\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end "
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 30\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end "

#: A.03-coded-beats.md:93
msgid ""
"Whilst you're rapping over those slow beats, notice that we're still sleeping "
"for 2 and our BPM is 30, yet everything is in time. The `beat_stretch` opt wor"
"ks with the current BPM to make sure everything just works."
msgstr ""

#: A.03-coded-beats.md:97
msgid ""
"Now, here's the fun part. Whilst the loop is still live, change the `30` in th"
"e `use_bpm 30` line to `50`. Woah, everything just got faster yet *kept in tim"
"e*! Try going faster - up to 80, to 120, now go crazy and punch in 200!"
msgstr ""

#: A.03-coded-beats.md:103
msgid "Filtering"
msgstr ""

#: A.03-coded-beats.md:105
msgid ""
"Now we can live loop samples, let's look at some of the most fun opts provided"
" by the `sample` synth. First up is `cutoff:` which controls the cutoff filter"
" of the sampler. By default this is disabled but you can easily turn it on:"
msgstr ""

#: A.03-coded-beats.md:110
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  sample :loop_amen, beat_stretch: 2, cutoff: 70\n"
"  sleep 2\n"
"end  "
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  sample :loop_amen, beat_stretch: 2, cutoff: 70\n"
"  sleep 2\n"
"end  "

#: A.03-coded-beats.md:118
msgid ""
"Go ahead and change the `cutoff:` opt. For example, increase it to 100, hit *R"
"un* and wait for the loop to cycle round to hear the change in the sound. Noti"
"ce that low values like 50 sound mellow and bassy and high values like 100 and"
" 120 are more full-sounding and raspy. This is because the `cutoff:` opt will "
"chop out the high frequency parts of the sound just like a lawn-mower chops of"
"f the top of the grass. The `cutoff:` opt is like the length setting - determi"
"ning how much grass is left over."
msgstr ""

#: A.03-coded-beats.md:128
msgid "Slicing"
msgstr ""

#: A.03-coded-beats.md:130
msgid ""
"Another great tool to play with is the slicer FX. This will chop (slice) the s"
"ound up. Wrap the `sample` line with the FX code like this:"
msgstr ""

#: A.03-coded-beats.md:133
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  with_fx :slicer, phase: 0.25, wave: 0, mix: 1 do\n"
"    sample :loop_amen, beat_stretch: 2, cutoff: 100\n"
"  end\n"
"  sleep 2\n"
"end"
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  with_fx :slicer, phase: 0.25, wave: 0, mix: 1 do\n"
"    sample :loop_amen, beat_stretch: 2, cutoff: 100\n"
"  end\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:143
msgid ""
"Notice how the sound bounces up and down a little more. (You can hear the orig"
"inal sound without the FX by changing the `mix:` opt to `0`.) Now, try playing"
" around with the `phase:` opt. This is the rate (in beats) of the slicing effe"
"ct. A smaller value like `0.125` will slice faster and larger values like `0.5"
"` will slice more slowly. Notice that successively halving or doubling the `ph"
"ase:` opts val tends to always sound good. Finally, change the `wave:` opt to "
"one of 0, 1, or 2 and hear how it changes the sound. These are the various wav"
"e shapes. 0 is a saw wave, (hard in, fade out) 1 is a square wave (hard in, ha"
"rd out) and 2 is a triangle wave (fade in, fade out)."
msgstr ""

#: A.03-coded-beats.md:157
msgid ""
"Finally, let's go back in time and revisit the early Bristol drum and bass sce"
"ne with this month's example. Don't worry too much about what all this means, "
"just type it in, hit Run, then start live coding it by changing opt numbers an"
"d see where you can take it. Please do share what you create! See you next tim"
"e..."
msgstr ""

#: A.03-coded-beats.md:163
#, no-wrap
msgid ""
"use_bpm 100\n"
"live_loop :amen_break do\n"
"  p = [0.125, 0.25, 0.5].choose\n"
"  with_fx :slicer, phase: p, wave: 0, mix: rrand(0.7, 1) do\n"
"    r = [1, 1, 1, -1].choose\n"
"    sample :loop_amen, beat_stretch: 2, rate: r, amp: 2\n"
"  end\n"
"  sleep 2\n"
"end\n"
"live_loop :bass_drum do\n"
"  sample :bd_haus, cutoff: 70, amp: 1.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :landing do\n"
"  bass_line = (knit :e1, 3, [:c1, :c2].choose, 1)\n"
"  with_fx :slicer, phase: [0.25, 0.5].choose, invert_wave: 1, wave: 0 do\n"
"    s = synth :square, note: bass_line.tick, sustain: 4, cutoff: 60\n"
"    control s, cutoff_slide: 4, cutoff: 120\n"
"  end\n"
"  sleep 4\n"
"end"
msgstr ""
"use_bpm 100\n"
"live_loop :amen_break do\n"
"  p = [0.125, 0.25, 0.5].choose\n"
"  with_fx :slicer, phase: p, wave: 0, mix: rrand(0.7, 1) do\n"
"    r = [1, 1, 1, -1].choose\n"
"    sample :loop_amen, beat_stretch: 2, rate: r, amp: 2\n"
"  end\n"
"  sleep 2\n"
"end\n"
"live_loop :bass_drum do\n"
"  sample :bd_haus, cutoff: 70, amp: 1.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :landing do\n"
"  bass_line = (knit :e1, 3, [:c1, :c2].choose, 1)\n"
"  with_fx :slicer, phase: [0.25, 0.5].choose, invert_wave: 1, wave: 0 do\n"
"    s = synth :square, note: bass_line.tick, sustain: 4, cutoff: 60\n"
"    control s, cutoff_slide: 4, cutoff: 120\n"
"  end\n"
"  sleep 4\n"
"end"

#: A.04-synth-riffs.md:1
msgid "A.4 Synth Riffs"
msgstr ""

#: A.04-synth-riffs.md:3
msgid "Synth Riffs"
msgstr ""

#: A.04-synth-riffs.md:5
msgid ""
"Whether it's the haunting drift of rumbling oscillators or the detuned punch o"
"f saw waves piercing through the mix, the lead synth plays an essential role o"
"n any electronic track. In last month's edition of this tutorial series we cov"
"ered how to code our beats. In this tutorial we'll cover how to code up the th"
"ree core components of a synth riff - the timbre, melody and rhythm."
msgstr ""

#: A.04-synth-riffs.md:12
msgid ""
"OK, so power up your Raspberry Pi, crack open Sonic Pi v2.6+ and let's make so"
"me noise!"
msgstr ""

#: A.04-synth-riffs.md:16
msgid "Timbral Possibilities"
msgstr ""

#: A.04-synth-riffs.md:18
msgid ""
"An essential part of any synth riff is changing and playing with the timbre of"
" the sounds. We can control the timbre in Sonic Pi in two ways - choosing diff"
"erent synths for a dramatic change and setting the various synth opts for more"
" subtle modifications. We can also use FX, but that's for another tutorial..."
msgstr ""

#: A.04-synth-riffs.md:24
msgid "Let's create a simple live loop where we continually change the current synth:"
msgstr ""

#: A.04-synth-riffs.md:27
#, no-wrap
msgid ""
"live_loop :timbre do\n"
"  use_synth (ring :tb303, :blade, :prophet, :saw, :beep, :tri).tick\n"
"  play :e2, attack: 0, release: 0.5, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :timbre do\n"
"  use_synth (ring :tb303, :blade, :prophet, :saw, :beep, :tri).tick\n"
"  play :e2, attack: 0, release: 0.5, cutoff: 100\n"
"  sleep 0.5\n"
"end"

#: A.04-synth-riffs.md:35
msgid ""
"Take a look at the code. We're simply ticking through a ring of synth names (t"
"his will cycle through each of these in turn repeating the list over and over)"
". We pass this synth name to the `use_synth` fn (function) which will change t"
"he `live_loop`'s current synth. We also play note `:e2` (E at the second octav"
"e), with a release time of 0.5 beats (half a second at the default BPM of 60) "
"and with the `cutoff:` opt set to 100."
msgstr ""

#: A.04-synth-riffs.md:42
msgid ""
"Hear how the different synths have very different sounds even though they're a"
"ll playing the same note. Now experiment and have a play. Change the release t"
"ime to bigger and smaller values. For example, change the `attack:` and `relea"
"se:` opts to see how different fade in/out times have a huge impact on the sou"
"nd. Finally change the `cutoff:` opt to see how different cutoff values also m"
"assively influence the timbre (values between 60 and 130 are good). See how ma"
"ny different sounds you can create by just changing a few values. Once you've "
"mastered that, just head to the Synths tab in the Help system for a full list "
"of all the synths and all the available opts each individual synth supports to"
" see just how much power you have under your coding fingertips."
msgstr ""

#: A.04-synth-riffs.md:55
msgid "Timbre"
msgstr ""

#: A.04-synth-riffs.md:57
msgid ""
"Timbre is just a fancy word describing the sound of a sound. If you play the s"
"ame note with different instruments such as a violin, guitar, or piano, the pi"
"tch (how high or low it sounds) would be the same, but the sound quality would"
" be different. That sound quality - the thing which allows you to tell the dif"
"ference between a piano and a guitar is the timbre."
msgstr ""

#: A.04-synth-riffs.md:65
msgid "Melodic Composition"
msgstr ""

#: A.04-synth-riffs.md:67
msgid ""
"Another important aspect to our lead synth is the choice of notes we want to p"
"lay. If you already have a good idea, then you can simply create a ring with y"
"our notes in and tick through them:"
msgstr ""

#: A.04-synth-riffs.md:71
#, no-wrap
msgid ""
"live_loop :riff do\n"
"  use_synth :prophet\n"
"  riff = (ring :e3, :e3, :r, :g3, :r, :r, :r, :a3)\n"
"  play riff.tick, release: 0.5, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :riff do\n"
"  use_synth :prophet\n"
"  riff = (ring :e3, :e3, :r, :g3, :r, :r, :r, :a3)\n"
"  play riff.tick, release: 0.5, cutoff: 80\n"
"  sleep 0.25\n"
"end"

#: A.04-synth-riffs.md:80
msgid ""
"Here, we've defined our melody with a ring which includes both notes such as `"
":e3` and rests represented by `:r`. We're then using `.tick` to cycle through "
"each note to give us a repeating riff."
msgstr ""

#: A.04-synth-riffs.md:84
msgid "Auto Melody"
msgstr ""

#: A.04-synth-riffs.md:86
msgid ""
"It's not always easy to come up with a nice riff from scratch. Instead it's of"
"ten easier to ask Sonic Pi for a selection of random riffs and to choose the o"
"ne you like the best. To do that we need to combine three things: rings, rando"
"misation and random seeds. Let's look at an example:"
msgstr ""

#: A.04-synth-riffs.md:91
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 3\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  play notes.tick, release: 0.25, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 3\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  play notes.tick, release: 0.25, cutoff: 80\n"
"  sleep 0.25\n"
"end"

#: A.04-synth-riffs.md:101
msgid ""
"There's a few things going on - let's look at them in turn. First, we specify "
"that we're using random seed 3. What does this mean? Well, the useful thing is"
" that when we set the seed, we can predict what the next random value is going"
" to be - it's the same as it was last time we set the seed to 3! Another usefu"
"l thing to know is that shuffling a ring of notes works in the same way. In th"
"e example above we're essentially asking for the 'third shuffle' in the standa"
"rd list of shuffles - which is also the same every time as we're always settin"
"g the random seed to the same value right before the shuffle. Finally we're ju"
"st ticking through our shuffled notes to play the riff."
msgstr ""

#: A.04-synth-riffs.md:112
msgid ""
"Now, here's where the fun starts. If we change the random seed value to anothe"
"r number, say 3000, we get an entirely different shuffling of the notes. So no"
"w it's extremely easy to explore new melodies. Simply choose the list of notes"
" we want to shuffle (scales are a great starting point) and then choose the se"
"ed we want to shuffle with. If we don't like the melody, just change one of th"
"ose two things and try again. Repeat until you like what you hear!"
msgstr ""

#: A.04-synth-riffs.md:121
msgid "Pseudo Randomisation"
msgstr ""

#: A.04-synth-riffs.md:123
msgid ""
"Sonic Pi's randomisation is not actually random it's what's called pseudo rand"
"om. Imagine if you were to roll a dice 100 times and write down the result of "
"each roll onto a piece of paper. Sonic Pi has the equivalent of this list of r"
"esults which it uses when you ask for a random value. Instead of rolling an ac"
"tual dice, it just picks the next value from the list. Setting the random seed"
" is just jumping to a specific point in that list."
msgstr ""

#: A.04-synth-riffs.md:131
msgid "Finding your Rhythm"
msgstr ""

#: A.04-synth-riffs.md:133
msgid ""
"Another important aspect to our riff is the rhythm - when to play a note and w"
"hen not to. As we saw above we can use `:r` in our rings to insert rests. Anot"
"her very powerful way is to use spreads which we'll cover in a future tutorial"
". Today we'll use randomisation to help us find our rhythm. Instead of playing"
" every note we can use a conditional to play a note with a given probability. "
"Let's take a look:"
msgstr ""

#: A.04-synth-riffs.md:140
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 30\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  16.times do\n"
"    play notes.tick, release: 0.2, cutoff: 90 if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 30\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  16.times do\n"
"    play notes.tick, release: 0.2, cutoff: 90 if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.04-synth-riffs.md:152
msgid ""
"A really useful fn to know is `one_in` which will give us a `true` or `false` "
"value with the specified probability. Here, we're using a value of 2 so on ave"
"rage one time every two calls to `one_in` it will return `true`. In other word"
"s, 50% of the time it will return `true`. Using higher values will make it ret"
"urn `false` more often introducing more space into the riff."
msgstr ""

#: A.04-synth-riffs.md:159
msgid ""
"Notice that we've added some iteration in here with `16.times`. This is becaus"
"e we only want to reset our random seed value every 16 notes so our rhythm rep"
"eats every 16 times. This doesn't affect the shuffling as that is still done i"
"mmediately after the seed is set. We can use the iteration size to alter the l"
"ength of the riff. Try changing the 16 to 8 or even 4 or 3 and see how it affe"
"cts the rhythm of the riff."
msgstr ""

#: A.04-synth-riffs.md:168
msgid ""
"OK, so let's combine everything we've learned together into one final example."
" See you next time!"
msgstr ""

#: A.04-synth-riffs.md:171
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  #  uncomment to bring in:\n"
"  #  synth :blade, note: :e4, release: 4, cutoff: 100, amp: 1.5\n"
"  use_synth :dsaw\n"
"  use_random_seed 43\n"
"  notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle.take(8)\n"
"  8.times do\n"
"    play notes.tick, release: rand(0.5), cutoff: rrand(60, 130) if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  use_random_seed 500\n"
"  16.times do\n"
"    sample :bd_haus, rate: 2, cutoff: 110 if rand < 0.35\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :bd do\n"
"  sample :bd_haus, cutoff: 100, amp: 3\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  #  uncomment to bring in:\n"
"  #  synth :blade, note: :e4, release: 4, cutoff: 100, amp: 1.5\n"
"  use_synth :dsaw\n"
"  use_random_seed 43\n"
"  notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle.take(8)\n"
"  8.times do\n"
"    play notes.tick, release: rand(0.5), cutoff: rrand(60, 130) if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  use_random_seed 500\n"
"  16.times do\n"
"    sample :bd_haus, rate: 2, cutoff: 110 if rand < 0.35\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :bd do\n"
"  sample :bd_haus, cutoff: 100, amp: 3\n"
"  sleep 0.5\n"
"end"

#: A.05-acid-bass.md:1
msgid "A.5 Acid Bass"
msgstr ""

#: A.05-acid-bass.md:3
msgid "Acid Bass"
msgstr ""

#: A.05-acid-bass.md:5
msgid ""
"It's impossible to look through the history of electronic dance music without "
"seeing the enormous impact of the tiny Roland TB-303 synthesiser. It's the sec"
"ret sauce behind the original acid bass sound. Those classic squealing and squ"
"elching TB-303 bass riffs can be heard from the early Chicago House scene thro"
"ugh to more recent electronic artists such as Plastikman, Squarepusher and Aph"
"ex Twin."
msgstr ""

#: A.05-acid-bass.md:12
msgid ""
"Interestingly, Roland never intended for the TB-303 to be used in dance music."
" It was originally created as a practice aid for guitarists. They imagined tha"
"t people would program them to play bass lines to jam along to. Unfortunately "
"there were a number of problems: they were a little fiddly to program, didn't "
"sound particularly good as a bass-guitar replacement and were pretty expensive"
" to buy. Deciding to cut their losses, Roland stopped making them after 10,000"
" units were sold and after a number of years sitting on guitarist's shelves, t"
"hey soon could be found in the windows of second hand shops. These lonely disc"
"arded TB-303s were waiting to be discovered by a new generation of experimente"
"rs who started using them in ways that Roland didn't imagine to create new cra"
"zy sounds. Acid House was born."
msgstr ""

#: A.05-acid-bass.md:25
msgid ""
"Although getting your hands on an original TB-303 is not so easy you will be p"
"leased to know that you can turn your Raspberry Pi into one using the power of"
" Sonic Pi. Behold, fire up Sonic Pi and throw this code into an empty buffer a"
"nd hit Run:"
msgstr ""

#: A.05-acid-bass.md:30
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play :e1"
msgstr ""
"use_synth :tb303\n"
"play :e1"

#: A.05-acid-bass.md:35
msgid "Instant acid bass! Let's play around..."
msgstr ""

#: A.05-acid-bass.md:37
msgid "Squelch that Bass"
msgstr ""

#: A.05-acid-bass.md:39
msgid ""
"First, let's build a live arpeggiator to make things fun. In the last tutorial"
" we looked at how riffs can just be a ring of notes that we tick through one a"
"fter another, repeating when we get to the end. Let's create a live loop that "
"does exactly that:"
msgstr ""

#: A.05-acid-bass.md:44
#, no-wrap
msgid ""
"use_synth :tb303\n"
"live_loop :squelch do\n"
"  n = (ring :e1, :e2, :e3).tick\n"
"  play n, release: 0.125, cutoff: 100, res: 0.8, wave: 0\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_synth :tb303\n"
"live_loop :squelch do\n"
"  n = (ring :e1, :e2, :e3).tick\n"
"  play n, release: 0.125, cutoff: 100, res: 0.8, wave: 0\n"
"  sleep 0.125\n"
"end"

#: A.05-acid-bass.md:53
msgid "Take a look at each line."
msgstr ""

#: A.05-acid-bass.md:55
msgid ""
"On the first line we set the default synth to be `tb303` with the `use_synth` "
"fn."
msgstr ""

#: A.05-acid-bass.md:58
msgid ""
"On line two we create a live loop called `:squelch` which will just loop round"
" and round."
msgstr ""

#: A.05-acid-bass.md:61
msgid ""
"Line three is where we create our riff - a ring of notes (E in octaves 1, 2, a"
"nd 3) which we simply tick through with `.tick`. We define `n` to represent th"
"e current note in the riff. The equals sign just means to assign the value on "
"the right to the name on the left. This will be different every time round the"
" loop. The first time round, `n` will be set to `:e1`. The second time round i"
"t will be `:e2`, followed by `:e3`, and then back to `:e1`, cycling round fore"
"ver."
msgstr ""

#: A.05-acid-bass.md:70
msgid ""
"Line four is where we actually trigger our `:tb303` synth. We're passing a few"
" interesting opts here: `release:`, `cutoff:`, `res:` and `wave:` which we'll "
"discuss below."
msgstr ""

#: A.05-acid-bass.md:74
msgid ""
"Line five is our `sleep` - we're asking the live loop to loop round every `0.1"
"25`s or 8 times a second at the default BPM of 60."
msgstr ""

#: A.05-acid-bass.md:77
msgid ""
"Line six is the `end` to the live loop. This just tells Sonic Pi where the end"
" of the live loop is."
msgstr ""

#: A.05-acid-bass.md:80
msgid ""
"Whilst you're still figuring out what's going on, type in the code above and h"
"it the Run button. You should hear the `:tb303` kick into action. Now, this is"
" where the action is: let's start live coding."
msgstr ""

#: A.05-acid-bass.md:84
msgid ""
"Whilst the loop is still live, change the `cutoff:` opt to `110`. Now hit the "
"Run button again. You should hear the sound become a little harsher and more s"
"quelchy. Dial in `120` and hit run. Now `130`. Listen how higher cutoff values"
" make it sound more piercing and intense. Finally, drop it down to `80` when y"
"ou feel like a rest. Then repeat as many times as you want. Don't worry, I'll "
"still be here..."
msgstr ""

#: A.05-acid-bass.md:91
msgid ""
"Another opt worth playing with is `res:`. This controls the level of resonance"
" of the filter. A high resonance is characteristic of acid bass sounds. We cur"
"rently have our `res:` set to `0.8`. Try cranking it up to `0.85`, then `0.9`,"
" and finally `0.95`. You might find that a cutoff such as `110` or higher will"
" make the differences easier to hear. Finally go crazy and dial in `0.999` for"
" some insane sounds. At a `res` this high, you're hearing the cutoff filter re"
"sonate so much it starts to make sounds of its own!"
msgstr ""

#: A.05-acid-bass.md:100
msgid ""
"Finally, for a big impact on the timbre try changing the `wave:` opt to `1`. T"
"his is the choice of source oscillator. The default is `0` which is a sawtooth"
" wave. `1` is a pulse wave and `2` is a triangle wave."
msgstr ""

#: A.05-acid-bass.md:104
msgid ""
"Of course, try different riffs by changing the notes in the ring or even picki"
"ng notes from scales or chords. Have fun with your first acid bass synth."
msgstr ""

#: A.05-acid-bass.md:108
msgid "Deconstructing the TB-303"
msgstr ""

#: A.05-acid-bass.md:110
msgid ""
"The design of the original TB-303 is actually pretty simple. As you can see fr"
"om the following diagram there's only 4 core parts."
msgstr ""

#: A.05-acid-bass.md:113
msgid "![TB-303 Design](../images/tutorial/articles/A.05-acid-bass/tb303-design.png)"
msgstr ""

#: A.05-acid-bass.md:115
msgid ""
"First is the oscillator wave - the raw ingredients of the sound. In this case "
"we have a square wave. Next there's the oscillator's amplitude envelope which "
"controls the amp of the square wave through time. These are accessed in Sonic "
"Pi by the `attack:`, `decay:`, `sustain:` and `release:` opts along with their"
" level counterparts. For more information read Section 2.4 'Duration with Enve"
"lopes' in the built-in tutorial. We then pass our enveloped square wave throug"
"h a resonant low pass filter. This chops off the higher frequencies as well as"
" having that nice resonance effect. Now this is where the fun starts. The cuto"
"ff value of this filter is also controlled by its own envelope! This means we "
"have amazing control over the timbre of the sound by playing with both of thes"
"e envelopes. Let's take a look:"
msgstr ""

#: A.05-acid-bass.md:128
#, no-wrap
msgid ""
"use_synth :tb303\n"
"with_fx :reverb, room: 1 do\n"
"  live_loop :space_scanner do\n"
"    play :e1, cutoff: 100, release: 7, attack: 1, cutoff_attack: 4, cutoff_rel"
"ease: 4\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""
"use_synth :tb303\n"
"with_fx :reverb, room: 1 do\n"
"  live_loop :space_scanner do\n"
"    play :e1, cutoff: 100, release: 7, attack: 1, cutoff_attack: 4, cutoff_rel"
"ease: 4\n"
"    sleep 8\n"
"  end\n"
"end"

#: A.05-acid-bass.md:138
msgid ""
"For each standard envelope opt, there's a `cutoff_` equivalent opt in the `:tb"
"303` synth. So, to change the cutoff attack time we can use the `cutoff_attack"
":` opt. Copy the code above into an empty buffer and hit Run. You'll hear a cr"
"azy sound warble in and out. Now start to play. Try changing the `cutoff_attac"
"k:` time to `1` and then `0.5`. Now try `8`."
msgstr ""

#: A.05-acid-bass.md:144
msgid ""
"Notice that I've passed everything through a `:reverb` FX for extra atmosphere"
" - try other FX to see what works!"
msgstr ""

#: A.05-acid-bass.md:149
msgid ""
"Finally, here's a piece I composed using the ideas in this tutorial. Copy it i"
"nto an empty buffer, listen for a while and then start live coding your own ch"
"anges. See what crazy sounds you can make with it! See you next time..."
msgstr ""

#: A.05-acid-bass.md:154
#, no-wrap
msgid ""
"use_synth :tb303\n"
"use_debug false\n"
" \n"
"with_fx :reverb, room: 0.8 do\n"
"  live_loop :space_scanner do\n"
"    with_fx :slicer, phase: 0.25, amp: 1.5 do\n"
"      co = (line 70, 130, steps: 8).tick\n"
"      play :e1, cutoff: co, release: 7, attack: 1, cutoff_attack: 4, cutoff_re"
"lease: 4\n"
"      sleep 8\n"
"    end\n"
"  end\n"
" \n"
"  live_loop :squelch do\n"
"    use_random_seed 3000\n"
"    16.times do\n"
"      n = (ring :e1, :e2, :e3).tick\n"
"      play n, release: 0.125, cutoff: rrand(70, 130), res: 0.9, wave: 1, amp: "
"0.8\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"use_synth :tb303\n"
"use_debug false\n"
" \n"
"with_fx :reverb, room: 0.8 do\n"
"  live_loop :space_scanner do\n"
"    with_fx :slicer, phase: 0.25, amp: 1.5 do\n"
"      co = (line 70, 130, steps: 8).tick\n"
"      play :e1, cutoff: co, release: 7, attack: 1, cutoff_attack: 4, cutoff_re"
"lease: 4\n"
"      sleep 8\n"
"    end\n"
"  end\n"
" \n"
"  live_loop :squelch do\n"
"    use_random_seed 3000\n"
"    16.times do\n"
"      n = (ring :e1, :e2, :e3).tick\n"
"      play n, release: 0.125, cutoff: rrand(70, 130), res: 0.9, wave: 1, amp: "
"0.8\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.06-minecraft.md:1
msgid "A.6 Musical Minecraft"
msgstr ""

#: A.06-minecraft.md:3
msgid "Musical Minecraft"
msgstr ""

#: A.06-minecraft.md:7
msgid ""
"Hello and welcome back! In the previous tutorials we've focussed purely on the"
" music possibilities of Sonic Pi - (turning your Raspberry Pi into a performan"
"ce ready musical instrument). So far we've learned how to:"
msgstr ""

#: A.06-minecraft.md:11
msgid "Live Code - changing the sounds on-the-fly,"
msgstr ""

#: A.06-minecraft.md:12
msgid "Code some huge beats,"
msgstr ""

#: A.06-minecraft.md:13
msgid "Generate powerful synth leads,"
msgstr ""

#: A.06-minecraft.md:14
msgid "Re-create the famous TB-303 acid-bass sound."
msgstr ""

#: A.06-minecraft.md:16
msgid ""
"There's so much more to show you (which we will explore in future editions). H"
"owever, this month, let's look at something Sonic Pi can do that you probably "
"didn't realise: control Minecraft."
msgstr ""

#: A.06-minecraft.md:20
msgid "Hello Minecraft World"
msgstr ""

#: A.06-minecraft.md:22
msgid ""
"OK, let's get started. Boot up your Raspberry Pi, fire up Minecraft Pi and cre"
"ate a new world. Now start up Sonic Pi and re-size and move your windows so yo"
"u can see both Sonic Pi and Minecraft Pi at the same time."
msgstr ""

#: A.06-minecraft.md:26
msgid "In a fresh buffer type the following:"
msgstr ""

#: A.06-minecraft.md:28
#, no-wrap
msgid "mc_message \"Hello Minecraft from Sonic Pi!\""
msgstr "mc_message \"Hello Minecraft from Sonic Pi!\""

#: A.06-minecraft.md:32
msgid ""
"Now, hit Run. Boom! Your message appeared in Minecraft! How easy was that? Now"
", stop reading this for a moment and play about with your own messages. Have f"
"un!"
msgstr ""

#: A.06-minecraft.md:36
msgid ""
"![Screen 0](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-0-sma"
"ll.png)"
msgstr ""

#: A.06-minecraft.md:38
msgid "Sonic Teleporter"
msgstr ""

#: A.06-minecraft.md:40
msgid ""
"Now let's do some exploring. The standard option is to reach for the mouse and"
" keyboard and start walking around. That works, but it's pretty slow and borin"
"g. It would be far better if we had some sort of teleport machine. Well, thank"
"s to Sonic Pi, we have one. Try this:"
msgstr ""

#: A.06-minecraft.md:45
#, no-wrap
msgid "mc_teleport 80, 40, 100"
msgstr "mc_teleport 80, 40, 100"

#: A.06-minecraft.md:49
msgid ""
"Crikey! That was a long way up. If you weren't in flying-mode then you would h"
"ave fallen back down all the way to the ground. If you double-tap space to ent"
"er flying-mode and teleport again, you'll stay hovering at the location you za"
"p to."
msgstr ""

#: A.06-minecraft.md:54
msgid ""
"Now, what do those numbers mean? We have three numbers which describe the coor"
"dinates of where in the world we want to go. We give each number a name - x, y"
" and z:"
msgstr ""

#: A.06-minecraft.md:58
msgid "x - how far left and right (80 in our example)"
msgstr ""

#: A.06-minecraft.md:59
msgid "y - how high we want to be (40 in our example)"
msgstr ""

#: A.06-minecraft.md:60
msgid "z - how far forward and back (100 in our example)"
msgstr ""

#: A.06-minecraft.md:62
msgid ""
"By choosing different values for x, y and z we can teleport *anywhere* in our "
"world. Try it! Choose different numbers and see where you can end up. If the s"
"creen goes black it's because you've teleported yourself under the ground or i"
"nto a mountain. Just choose a higher y value to get back out above land. Keep "
"on exploring until you find somewhere you like..."
msgstr ""

#: A.06-minecraft.md:69
msgid ""
"Using the ideas so far, let's build a Sonic Teleporter which makes a fun telep"
"ort sound whilst it whizzes us across the Minecraft world:"
msgstr ""

#: A.06-minecraft.md:72
#, no-wrap
msgid ""
"mc_message \"Preparing to teleport....\"\n"
"sample :ambi_lunar_land, rate: -1\n"
"sleep 1\n"
"mc_message \"3\"\n"
"sleep 1\n"
"mc_message \"2\"\n"
"sleep 1\n"
"mc_message \"1\"\n"
"sleep 1\n"
"mc_teleport 90, 20, 10\n"
"mc_message \"Whoooosh!\""
msgstr ""
"mc_message \"Preparing to teleport....\"\n"
"sample :ambi_lunar_land, rate: -1\n"
"sleep 1\n"
"mc_message \"3\"\n"
"sleep 1\n"
"mc_message \"2\"\n"
"sleep 1\n"
"mc_message \"1\"\n"
"sleep 1\n"
"mc_teleport 90, 20, 10\n"
"mc_message \"Whoooosh!\""

#: A.06-minecraft.md:86
msgid ""
"![Screen 1](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-1-sma"
"ll.png)"
msgstr ""

#: A.06-minecraft.md:88
msgid "Magic Blocks"
msgstr ""

#: A.06-minecraft.md:90
msgid ""
"Now you've found a nice spot, let's start building. You could do what you're u"
"sed to and start clicking the mouse furiously to place blocks under the cursor"
". Or you could use the magic of Sonic Pi. Try this:"
msgstr ""

#: A.06-minecraft.md:94
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :melon, x, y + 5, z"
msgstr ""
"x, y, z = mc_location\n"
"mc_set_block :melon, x, y + 5, z"

#: A.06-minecraft.md:99
msgid ""
"Now look up! There's a melon in the sky! Take a moment to look at the code. Wh"
"at did we do? On line one we grabbed the current location of Steve as the vari"
"ables x, y and z. These correspond to our coordinates described above. We use "
"these coordinates in the fn `mc_set_block` which will place the block of your "
"choosing at the specified coordinates. In order to make something higher up in"
" the sky we just need to increase the y value which is why we add 5 to it. Let"
"'s make a long trail of them:"
msgstr ""

#: A.06-minecraft.md:107
#, no-wrap
msgid ""
"live_loop :melon_trail do\n"
"  x, y, z = mc_location\n"
"  mc_set_block :melon, x, y-1, z\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :melon_trail do\n"
"  x, y, z = mc_location\n"
"  mc_set_block :melon, x, y-1, z\n"
"  sleep 0.125\n"
"end"

#: A.06-minecraft.md:115
msgid ""
"Now, jump over to Minecraft, make sure you're in flying-mode (double tap space"
" if not) and fly all around the world. Look behind you to see a pretty trail o"
"f melon blocks! See what kind of twisty patterns you can make in the sky."
msgstr ""

#: A.06-minecraft.md:120
msgid "Live Coding Minecraft"
msgstr ""

#: A.06-minecraft.md:122
msgid ""
"Those of you that have been following this tutorial over the last few months w"
"ill probably have your minds blown at this point. The trail of melons is prett"
"y cool, but the most exciting part of the previous example is that you can use"
" `live_loop` with Minecraft! For those that don't know, `live_loop` is Sonic P"
"i's special magic ability that no other programming language has. It lets you "
"run multiple loops at the same time and allows you to change them whilst they "
"run. They are incredibly powerful and amazing fun. I use `live_loop`s to perfo"
"rm music in nightclubs with Sonic Pi - DJs use discs and I use `live_loop`s :-"
") However, today we're going to live code both music and Minecraft."
msgstr ""

#: A.06-minecraft.md:133
msgid ""
"Let's get started. Run the code above and start making your melon trail again."
" Now, without stopping the code, just simply change `:melon` to `:brick` and h"
"it run. Hey presto, you're now making a brick trail. How simple was that! Fanc"
"y some music to go with it? Easy. Try this:"
msgstr ""

#: A.06-minecraft.md:138
#, no-wrap
msgid ""
"live_loop :bass_trail do\n"
"  tick\n"
"  x, y, z = mc_location\n"
"  b = (ring :melon, :brick, :glass).look\n"
"  mc_set_block b, x, y -1, z\n"
"  note = (ring :e1, :e2, :e3).look\n"
"  use_synth :tb303\n"
"  play note, release: 0.1, cutoff: 70\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :bass_trail do\n"
"  tick\n"
"  x, y, z = mc_location\n"
"  b = (ring :melon, :brick, :glass).look\n"
"  mc_set_block b, x, y -1, z\n"
"  note = (ring :e1, :e2, :e3).look\n"
"  use_synth :tb303\n"
"  play note, release: 0.1, cutoff: 70\n"
"  sleep 0.125\n"
"end"

#: A.06-minecraft.md:151
msgid ""
"Now, whilst that's playing start changing the code. Change the block types - t"
"ry `:water`, `:grass` or your favourite block type. Also, try changing the cut"
"off value from `70` to `80` and then up to `100`. Isn't this fun?"
msgstr ""

#: A.06-minecraft.md:158
msgid ""
"![Screen 2](../images/tutorial/articles/A.06-minecraft/Musical-Minecraft-2-sma"
"ll.png)"
msgstr ""

#: A.06-minecraft.md:160
msgid ""
"Let's combine everything we've seen so far with a little extra magic. Let's co"
"mbine our teleportation ability with block placing and music to make a Minecra"
"ft Music Video. Don't worry if you don't understand it all, just type it in an"
"d have a play by changing some of the values whilst it's running live. Have fu"
"n and see you next time..."
msgstr ""

#: A.06-minecraft.md:166
#, no-wrap
msgid ""
"live_loop :note_blocks do\n"
"  mc_message \"This is Sonic Minecraft\"\n"
"  with_fx :reverb do\n"
"    with_fx :echo, phase: 0.125, reps: 32 do\n"
"      tick\n"
"      x = (range 30, 90, step: 0.1).look\n"
"      y = 20\n"
"      z = -10\n"
"      mc_teleport x, y, z\n"
"      ns = (scale :e3, :minor_pentatonic)\n"
"      n = ns.shuffle.choose\n"
"      bs = (knit :glass, 3, :sand, 1)\n"
"      b = bs.look\n"
"      synth :beep, note: n, release: 0.1\n"
"      mc_set_block b, x+20, n-60+y, z+10\n"
"      mc_set_block b, x+20, n-60+y, z-10\n"
"      sleep 0.25\n"
"    end\n"
"  end\n"
"end\n"
"live_loop :beats do\n"
"  sample :bd_haus, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :note_blocks do\n"
"  mc_message \"This is Sonic Minecraft\"\n"
"  with_fx :reverb do\n"
"    with_fx :echo, phase: 0.125, reps: 32 do\n"
"      tick\n"
"      x = (range 30, 90, step: 0.1).look\n"
"      y = 20\n"
"      z = -10\n"
"      mc_teleport x, y, z\n"
"      ns = (scale :e3, :minor_pentatonic)\n"
"      n = ns.shuffle.choose\n"
"      bs = (knit :glass, 3, :sand, 1)\n"
"      b = bs.look\n"
"      synth :beep, note: n, release: 0.1\n"
"      mc_set_block b, x+20, n-60+y, z+10\n"
"      mc_set_block b, x+20, n-60+y, z-10\n"
"      sleep 0.25\n"
"    end\n"
"  end\n"
"end\n"
"live_loop :beats do\n"
"  sample :bd_haus, cutoff: 100\n"
"  sleep 0.5\n"
"end"

#: A.07-bizet.md:1
msgid "A.7 Bizet Beats"
msgstr ""

#: A.07-bizet.md:3
msgid "Bizet Beats"
msgstr ""

#: A.07-bizet.md:5
msgid ""
"After our brief excursion to the fantastic world of coding Minecraft with Soni"
"c Pi last month, let's get musical again. Today we're going to bring a classic"
"al operatic dance piece straight into the 21st century using the awesome power"
" of code."
msgstr ""

#: A.07-bizet.md:10
msgid "Outrageous and Disruptive"
msgstr ""

#: A.07-bizet.md:12
msgid ""
"Let's jump into a time machine back to the year 1875. A composer called Bizet "
"had just finished his latest opera Carmen. Unfortunately like many exciting an"
"d disruptive new pieces of music people initially didn't like it at all becaus"
"e it was too outrageous and different. Sadly Bizet died ten years before the o"
"pera gained huge international success and became one of the most famous and f"
"requently performed operas of all time. In sympathy with this tragedy let's ta"
"ke one of the main themes from Carmen and convert it to a modern format of mus"
"ic that is also too outrageous and different for most people in our time - liv"
"e coded music!"
msgstr ""

#: A.07-bizet.md:23
msgid "Decoding the Habanera"
msgstr ""

#: A.07-bizet.md:25
msgid ""
"Trying to live code the whole opera would be a bit of a challenge for this tut"
"orial, so let's focus on one of the most famous parts - the bass line to the H"
"abanera:"
msgstr ""

#: A.07-bizet.md:29
msgid "![Habanera Riff](../images/tutorial/articles/A.07-bizet/habanera.png)"
msgstr ""

#: A.07-bizet.md:31
msgid ""
"This may look extremely unreadable to you if you haven't yet studied music not"
"ation. However, as programmers we see music notation as just another form of c"
"ode - only it represents instructions to a musician instead of a computer. We "
"therefore need to figure out a way of decoding it."
msgstr ""

#: A.07-bizet.md:36
msgid "Notes"
msgstr ""

#: A.07-bizet.md:38
msgid ""
"The notes are arranged from left to right like the words in this magazine but "
"also have different heights. *The height on the score represents the pitch of "
"the note.* The higher the note on the score, the higher the pitch of the note."
msgstr ""

#: A.07-bizet.md:43
msgid ""
"In Sonic Pi we already know how to change the pitch of a note - we either use "
"high or low numbers such as `play 75` and `play 80` or we use the note names: "
"`play :E` and `play :F`. Luckily each of the vertical positions of the musical"
" score represents a specific note name. Take a look at this handy look up tabl"
"e:"
msgstr ""

#: A.07-bizet.md:49
msgid "![Notes](../images/tutorial/articles/A.07-bizet/notes.png)"
msgstr ""

#: A.07-bizet.md:51
msgid "Rests"
msgstr ""

#: A.07-bizet.md:53
msgid ""
"Music scores are an extremely rich and expressive kind of code capable of comm"
"unicating many things. It therefore shouldn't come as much of a surprise that "
"musical scores can not only tell you what notes to play but also when *not* to"
" play notes. In programming this is pretty much equivalent to the idea of `nil"
"` or `null` - the absence of a value. In other words not playing a note is lik"
"e the absence of a note."
msgstr ""

#: A.07-bizet.md:60
msgid ""
"If you look closely at the score you'll see that it's actually a combination o"
"f black dots with lines which represent notes to play and squiggly things whic"
"h represent the rests. Luckily Sonic Pi has a very handy representation for a "
"rest: `:r`, so if we run: `play :r` it actually plays silence! We could also w"
"rite `play :rest`, `play nil` or `play false` which are all equivalent ways of"
" representing rests."
msgstr ""

#: A.07-bizet.md:67
msgid "Rhythm"
msgstr ""

#: A.07-bizet.md:69
msgid ""
"Finally, there's one last thing to learn how to decode in the notation - the t"
"imings of the notes. In the original notation you'll see that the notes are co"
"nnected with thick lines called beams. The second note has two of these beams "
"which means it lasts for a 16th of a beat. The other notes have a single beam "
"which means they last for an 8th of a beat. The rest has two squiggly beams wh"
"ich means it also represents a 16th of the beat."
msgstr ""

#: A.07-bizet.md:77
msgid ""
"When we attempt to decode and explore new things a very handy trick is to make"
" everything as similar as possible to try and see any relationships or pattern"
"s. For example, when we re-write our notation purely in 16ths you can see that"
" our notation just turns into a nice sequence of notes and rests."
msgstr ""

#: A.07-bizet.md:83
msgid "![Habanera Riff 2](../images/tutorial/articles/A.07-bizet/habanera2.png)"
msgstr ""

#: A.07-bizet.md:85
msgid "Re-coding the Habanera"
msgstr ""

#: A.07-bizet.md:87
msgid ""
"We're now in a position to start translating this bass line to Sonic Pi. Let's"
" encode these notes and rests in a ring:"
msgstr ""

#: A.07-bizet.md:90
#, no-wrap
msgid "(ring :d, :r, :r, :a, :f5, :r, :a, :r)"
msgstr "(ring :d, :r, :r, :a, :f5, :r, :a, :r)"

#: A.07-bizet.md:94
msgid "Let's see what this sounds like. Throw it in a live loop and tick through it:"
msgstr ""

#: A.07-bizet.md:97
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :habanera do\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end"

#: A.07-bizet.md:104
msgid ""
"Fabulous, that instantly recognisable riff springs to life through your speake"
"rs. It took a lot of effort to get here, but it was worth it - high five!"
msgstr ""

#: A.07-bizet.md:108
msgid "Moody Synths"
msgstr ""

#: A.07-bizet.md:110
msgid ""
"Now we have the bass line, let's re-create some of the ambience of the operati"
"c scene. One synth to try out is `:blade` which is a moody 80s style synth lea"
"d. Let's try it with the starting note `:d` passed through a slicer and reverb"
":"
msgstr ""

#: A.07-bizet.md:115
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  use_synth :fm\n"
"  use_transpose -12\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end\n"
"with_fx :reverb do\n"
"  live_loop :space_light do\n"
"    with_fx :slicer, phase: 0.25 do\n"
"      synth :blade, note: :d, release: 8, cutoff: 100, amp: 2\n"
"    end\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""
"live_loop :habanera do\n"
"  use_synth :fm\n"
"  use_transpose -12\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end\n"
"with_fx :reverb do\n"
"  live_loop :space_light do\n"
"    with_fx :slicer, phase: 0.25 do\n"
"      synth :blade, note: :d, release: 8, cutoff: 100, amp: 2\n"
"    end\n"
"    sleep 8\n"
"  end\n"
"end"

#: A.07-bizet.md:133
msgid ""
"Now, try the other notes in the bass line: `:a` and `:f5`. Remember, you don't"
" need to hit stop, just modify the code whilst the music is playing and hit ru"
"n again. Also, try different values for the slicer's `phase:` opt such as `0.5"
"`, `0.75` and `1`."
msgstr ""

#: A.07-bizet.md:140
msgid ""
"Finally, let's combine all the ideas so far into a new remix of the Habanera. "
"You might notice that I've included another part of the bass line as a comment"
". Once you've typed it all into a fresh buffer hit Run to hear the composition"
". Now, without hitting stop, *uncomment* the second line by removing the `#` a"
"nd hit run again - how marvellous is that! Now, start mashing it around yourse"
"lf and have fun."
msgstr ""

#: A.07-bizet.md:147
#, no-wrap
msgid ""
"use_debug false\n"
"bizet_bass = (ring :d, :r, :r, :a, :f5, :r, :a, :r)\n"
"#bizet_bass = (ring :d, :r, :r, :Bb, :g5, :r, :Bb, :r)\n"
" \n"
"with_fx :reverb, room: 1, mix: 0.3 do\n"
"  live_loop :bizet do\n"
"    with_fx :slicer, phase: 0.125 do\n"
"      synth :blade, note: :d4, release: 8,\n"
"        cutoff: 100, amp: 1.5\n"
"    end\n"
"    16.times do\n"
"      tick\n"
"      play bizet_bass.look, release: 0.1\n"
"      play bizet_bass.look - 12, release: 0.3\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end\n"
" \n"
"live_loop :ind do\n"
"  sample :loop_industrial, beat_stretch: 1,\n"
"    cutoff: 100, rate: 1\n"
"  sleep 1\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  sample :bd_haus, cutoff: 110\n"
"  synth :beep, note: 49, attack: 0,\n"
"    release: 0.1\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_debug false\n"
"bizet_bass = (ring :d, :r, :r, :a, :f5, :r, :a, :r)\n"
"#bizet_bass = (ring :d, :r, :r, :Bb, :g5, :r, :Bb, :r)\n"
" \n"
"with_fx :reverb, room: 1, mix: 0.3 do\n"
"  live_loop :bizet do\n"
"    with_fx :slicer, phase: 0.125 do\n"
"      synth :blade, note: :d4, release: 8,\n"
"        cutoff: 100, amp: 1.5\n"
"    end\n"
"    16.times do\n"
"      tick\n"
"      play bizet_bass.look, release: 0.1\n"
"      play bizet_bass.look - 12, release: 0.3\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end\n"
" \n"
"live_loop :ind do\n"
"  sample :loop_industrial, beat_stretch: 1,\n"
"    cutoff: 100, rate: 1\n"
"  sleep 1\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  sample :bd_haus, cutoff: 110\n"
"  synth :beep, note: 49, attack: 0,\n"
"    release: 0.1\n"
"  sleep 0.5\n"
"end"

#: A.08-minecraft-vj.md:1
msgid "A.8 Become a Minecraft VJ"
msgstr ""

#: A.08-minecraft-vj.md:3
msgid "Become a Minecraft VJ"
msgstr ""

#: A.08-minecraft-vj.md:5
msgid ""
"![Screen 0](../images/tutorial/articles/A.08-minecraft-vj/minecraft-vj-0-small"
".png)"
msgstr ""

#: A.08-minecraft-vj.md:7
msgid ""
"Everyone has played Minecraft. You will all have built amazing structures, des"
"igned cunning traps and even created elaborate cart lines controlled by redsto"
"ne switches. How many of you have performed with Minecraft? We bet you didn't "
"know that you could use Minecraft to create amazing visuals just like a profes"
"sional VJ."
msgstr ""

#: A.08-minecraft-vj.md:13
msgid ""
"If your only way of modifying Minecraft was with the mouse, you'd have a tough"
" time changing things fast enough. Luckily for you your Raspberry Pi comes wit"
"h a version of Minecraft that can be controlled with code. It also comes with "
"an app called Sonic Pi which makes coding Minecraft not only easy but also inc"
"redibly fun."
msgstr ""

#: A.08-minecraft-vj.md:19
msgid ""
"In today's article we'll be showing you some of the tips and tricks that we've"
" used to create performances in night clubs and music venues around the world."
msgstr ""

#: A.08-minecraft-vj.md:23
msgid "Let's get started..."
msgstr ""

#: A.08-minecraft-vj.md:25
msgid "Getting Started"
msgstr ""

#: A.08-minecraft-vj.md:27
msgid ""
"Let's start with a simple warm up exercise to refresh ourselves with the basic"
"s. First up, crack open your Raspberry Pi and then fire up both Minecraft and "
"Sonic Pi. In Minecraft, create a new world, and in Sonic Pi choose a fresh buf"
"fer and write in this code:"
msgstr ""

#: A.08-minecraft-vj.md:32
#, no-wrap
msgid "mc_message \"Let's get started...\""
msgstr "mc_message \"Let's get started...\""

#: A.08-minecraft-vj.md:36
msgid ""
"Hit the Run button and you'll see the message over in the Minecraft window. OK"
", we're ready to start, let's have some fun......"
msgstr ""

#: A.08-minecraft-vj.md:39
msgid "Sand Storms"
msgstr ""

#: A.08-minecraft-vj.md:41
msgid ""
"When we're using Minecraft to create visuals we try and think about what will "
"both look interesting and also be easy to generate from code. One nice trick i"
"s to create a sand storm by dropping sand blocks from the sky. For that all we"
" need are a few basic fns:"
msgstr ""

#: A.08-minecraft-vj.md:46
msgid "`sleep` - for inserting a delay between actions"
msgstr ""

#: A.08-minecraft-vj.md:47
msgid "`mc_location` - to find our current location"
msgstr ""

#: A.08-minecraft-vj.md:48
msgid "`mc_set_block`- to place sand blocks at a specific location"
msgstr ""

#: A.08-minecraft-vj.md:49
msgid "`rrand` - to allow us to generate random values within a range"
msgstr ""

#: A.08-minecraft-vj.md:50
msgid "`live_loop` - to allow us to continually make it rain sand"
msgstr ""

#: A.08-minecraft-vj.md:52
msgid ""
"If you're unfamiliar with any of the built-in fns such as `rrand`, just type t"
"he word into your buffer, click on it and then hit the keyboard combo `Control"
"-i` to bring up the built-in documentation. Alternatively you can navigate to "
"the *lang* tab in the Help system and then look up the fns directly along with"
" all the other exciting things you can do."
msgstr ""

#: A.08-minecraft-vj.md:58
msgid ""
"Let's make it rain a little first before unleashing the full power of the stor"
"m. Grab your current location and use it to create a few sand blocks up in the"
" sky nearby:"
msgstr ""

#: A.08-minecraft-vj.md:62
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :sand, x, y + 20, z + 5\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 6\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 7\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 8"
msgstr ""
"x, y, z = mc_location\n"
"mc_set_block :sand, x, y + 20, z + 5\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 6\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 7\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 8"

#: A.08-minecraft-vj.md:73
msgid ""
"When you hit Run, you might have to look around a little as the blocks may sta"
"rt falling down behind you depending on which direction you're currently facin"
"g. Don't worry, if you missed them just hit Run again for another batch of san"
"d rain - just make sure you're looking the right way!"
msgstr ""

#: A.08-minecraft-vj.md:79
msgid ""
"Let's quickly review what's going on here. On the first line we grabbed Steve'"
"s location as coordinates with the fn `mc_location` and placed them into the v"
"ars `x`, `y`, and `z`. Then on the next lines we used the `mc_set_block` fn to"
" place some sand at the same coordinates as Steve but with some modifications."
" We chose the same x coordinate, a y coordinate 20 blocks higher and then succ"
"essively larger z coordinates so the sand dropped in a line away from Steve."
msgstr ""

#: A.08-minecraft-vj.md:87
msgid ""
"Why don't you take that code and start playing around with it yourself? Try ad"
"ding more lines, changing the sleep times, try mixing `:sand` with `:gravel` a"
"nd choose different coordinates. Just experiment and have fun!"
msgstr ""

#: A.08-minecraft-vj.md:91
msgid "Live Loops Unleashed"
msgstr ""

#: A.08-minecraft-vj.md:93
msgid ""
"OK, it's time to get the storm raging by unleashing the full power of the `liv"
"e_loop` - Sonic Pi's magical ability which unleashes the full power of live co"
"ding - changing code on-the-fly whilst it's running!"
msgstr ""

#: A.08-minecraft-vj.md:97
#, no-wrap
msgid ""
"live_loop :sand_storm do\n"
"  x, y, z = mc_location\n"
"  xd = rrand(-10, 10)\n"
"  zd = rrand(-10, 10)\n"
"  co = rrand(70, 130)\n"
"  synth :cnoise, attack: 0, release: 0.125, cutoff: co\n"
"  mc_set_block :sand, x + xd, y+20, z+zd\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :sand_storm do\n"
"  x, y, z = mc_location\n"
"  xd = rrand(-10, 10)\n"
"  zd = rrand(-10, 10)\n"
"  co = rrand(70, 130)\n"
"  synth :cnoise, attack: 0, release: 0.125, cutoff: co\n"
"  mc_set_block :sand, x + xd, y+20, z+zd\n"
"  sleep 0.125\n"
"end"

#: A.08-minecraft-vj.md:109
msgid ""
"What fun! We're looping round pretty quickly (8 times a second) and during eac"
"h loop we're finding Steve's location like before but then generating 3 random"
" values:"
msgstr ""

#: A.08-minecraft-vj.md:113
msgid "`xd` - the difference for x which will be between -10 and 10"
msgstr ""

#: A.08-minecraft-vj.md:114
msgid "`zd` - the difference for z also between -10 and 10"
msgstr ""

#: A.08-minecraft-vj.md:115
msgid "`co` - a cutoff value for the low pass filter between 70 and 130"
msgstr ""

#: A.08-minecraft-vj.md:117
msgid ""
"We then use those random values in the fns `synth` and `mc_set_block` giving u"
"s sand falling in random locations around Steve along with a percussive rain-l"
"ike sound from the `:cnoise` synth."
msgstr ""

#: A.08-minecraft-vj.md:121
msgid ""
"For those of you new to live loops - this is where the fun really starts with "
"Sonic Pi. Whilst the code is running and the sand is pouring down, try changin"
"g one of the values, perhaps the sleep time to `0.25` or the `:sand` block typ"
"e to `:gravel`. Now hit run *again*. Hey Presto! Things changed without the co"
"de stopping. This is your gateway to performing like a real VJ. Keep practisin"
"g and changing things around. How different can you make the visuals without s"
"topping the code?"
msgstr ""

#: A.08-minecraft-vj.md:129
msgid "Epic Block Patterns"
msgstr ""

#: A.08-minecraft-vj.md:131
msgid ""
"![Screen 1](../images/tutorial/articles/A.08-minecraft-vj/minecraft-vj-1-small"
".png)"
msgstr ""

#: A.08-minecraft-vj.md:133
msgid ""
"Finally, another great way of generating interesting visuals is to generate hu"
"ge patterned walls to fly towards and close by. For this effect we'll need to "
"move from placing the blocks randomly to placing them in an ordered manner. We"
" can do this by nesting two sets of iteration (hit the Help button and navigat"
"e to section 5.2 of the tutorial \"Iteration and Loops\" for more background on "
"iteration). The funny `|xd|` after the do means that `xd` will be set for each"
" value of the iteration. So the first time it will be 0, then 1, then 2... etc"
". By nesting two lots of iteration together like this we can generate all the "
"coordinates for a square. We can then randomly choose block types from a ring "
"of blocks for an interesting effect:"
msgstr ""

#: A.08-minecraft-vj.md:145
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"bs = (ring :gold, :diamond, :glass)\n"
"10.times do |xd|\n"
"  10.times do |yd|\n"
"    mc_set_block bs.choose, x + xd, y + yd, z\n"
"  end\n"
"end"
msgstr ""
"x, y, z = mc_location\n"
"bs = (ring :gold, :diamond, :glass)\n"
"10.times do |xd|\n"
"  10.times do |yd|\n"
"    mc_set_block bs.choose, x + xd, y + yd, z\n"
"  end\n"
"end"

#: A.08-minecraft-vj.md:155
msgid ""
"Pretty neat. Whilst we're having fun here, try changing `bs.choose` to `bs.tic"
"k` to move from a random pattern to a more regular one. Try changing the block"
" types and the more adventurous of you might want to try sticking this within "
"a `live_loop` so that the patterns keep changing automatically."
msgstr ""

#: A.08-minecraft-vj.md:161
msgid ""
"Now, for the VJ finale - change the two `10.times` to `100.times` and hit Run."
" Kaboom! A Huge gigantic wall of randomly placed bricks. Imagine how long it w"
"ould take you to build that manually with your mouse! Double-tap space to ente"
"r fly-mode and start swooping by for some great visual effects. Don't stop her"
"e though - use your imagination to conjure up some cool ideas and then use the"
" coding power of Sonic Pi to make it real. When you've practised enough dim th"
"e lights and put on a VJ show for your friends!"
msgstr ""

#: A.09-randomisation.md:1
msgid "A.9 Randomisation"
msgstr ""

#: A.09-randomisation.md:3
msgid "Surfing Random Streams"
msgstr ""

#: A.09-randomisation.md:5
msgid ""
"Back in episode 4 of this tutorial series we took a brief look at randomisatio"
"n whilst coding up some sizzling synth riffs. Given that randomisation is such"
" an important part of my live coding DJ sets I thought it would be useful to c"
"over the fundamentals in much greater detail. So, get your lucky hat on and le"
"t's surf some random streams!"
msgstr ""

#: A.09-randomisation.md:11
msgid "There is no random"
msgstr ""

#: A.09-randomisation.md:13
msgid ""
"The first thing to learn which might really surprise you when playing with Son"
"ic Pi's randomisation functions is that they're not actually really random. Wh"
"at does this actually mean? Well, let's try a couple of tests. First, imagine "
"a number in your head between 0 and 1. Keep it there and don't tell me. Now le"
"t me guess... was it `0.321567`? No? Bah, I'm clearly no good at this. Let me "
"have another go, but let's ask Sonic Pi to choose a number this time. Fire up "
"Sonic Pi v2.7+ and ask it for a random number but again don't tell me:"
msgstr ""

#: A.09-randomisation.md:22
#, no-wrap
msgid "print rand"
msgstr "print rand"

#: A.09-randomisation.md:26
msgid ""
"Now for the reveal... was it `0.75006103515625`? Yes! Ha, I can see you're a l"
"ittle sceptical. Perhaps it was just a lucky guess. Let's try again. Press the"
" Run button again and see what we get... What? `0.75006103515625` again? This "
"clearly can't be random! You're right, it's not."
msgstr ""

#: A.09-randomisation.md:32
msgid ""
"What's going on here? The fancy computer science word here is determinism. Thi"
"s just means that nothing is by chance and everything is destined to be. Your "
"version of Sonic Pi is destined to always return `0.75006103515625` in the pro"
"gram above. This might sound pretty useless, but let me assure you that it's o"
"ne of the most powerful parts of Sonic Pi. If you stick at it you'll learn how"
" to rely on the deterministic nature of Sonic Pi's randomisation as a fundamen"
"tal building block for your compositions and live coded DJ sets."
msgstr ""

#: A.09-randomisation.md:41
msgid "A Random Melody"
msgstr ""

#: A.09-randomisation.md:43
msgid ""
"When Sonic Pi boots it actually loads into memory a sequence of 441,000 pre-ge"
"nerated random values. When you call a random function such as `rand` or `rran"
"d`, this random stream is used to generate your result. Each call to a random "
"function consumes a value from this stream. Therefore the 10th call to a rando"
"m function will use the 10th value from the stream. Also, every time you press"
" the Run button, the stream is reset for that run. This is why I could predict"
" the result to `rand` and why the 'random' melody was the same every time. Eve"
"rybody's version of Sonic Pi uses the exact same random stream which is very i"
"mportant when we start sharing our pieces with each other."
msgstr ""

#: A.09-randomisation.md:54
msgid "Let's use this knowledge to generate a repeatable random melody:"
msgstr ""

#: A.09-randomisation.md:56
#, no-wrap
msgid ""
"8.times do\n"
" play rrand_i(50, 95)\n"
" sleep 0.125\n"
"end"
msgstr ""
"8.times do\n"
" play rrand_i(50, 95)\n"
" sleep 0.125\n"
"end"

#: A.09-randomisation.md:63
msgid ""
"Type this into a spare buffer and hit Run. You'll hear a melody consisting of "
"'random' notes between 50 and 95. When it's finished, hit Run again to hear ex"
"actly the same melody again."
msgstr ""

#: A.09-randomisation.md:67
msgid "Handy Randomisation Functions"
msgstr ""

#: A.09-randomisation.md:69
msgid ""
"Sonic Pi comes with a number of useful functions for working with the random s"
"tream. Here's a list of some of the most useful:"
msgstr ""

#: A.09-randomisation.md:72
msgid "`rand` - Simply returns the next value in the random stream"
msgstr ""

#: A.09-randomisation.md:73
msgid "`rrand` - Returns a random value within a range"
msgstr ""

#: A.09-randomisation.md:74
msgid "`rrand_i` - Returns a random whole number within a range"
msgstr ""

#: A.09-randomisation.md:75
msgid "`one_in` - Returns true or false with the given probability"
msgstr ""

#: A.09-randomisation.md:76
msgid "`dice` - Imitates rolling a dice and returns a value between 1 and 6"
msgstr ""

#: A.09-randomisation.md:77
msgid "`choose` - Chooses a random value from a list"
msgstr ""

#: A.09-randomisation.md:79
msgid ""
"Check out their documentation in the Help system for detailed information and "
"examples."
msgstr ""

#: A.09-randomisation.md:82
msgid "Resetting the Stream"
msgstr ""

#: A.09-randomisation.md:84
msgid ""
"Whilst the ability to repeat a sequence of chosen notes is essential to allow "
"you to replay a riff on the dance floor, it might not be exactly the riff you "
"want. Wouldn't it be great if we could try a number of different riffs and cho"
"ose the one we liked best? This is where the real magic starts."
msgstr ""

#: A.09-randomisation.md:90
msgid ""
"We can manually set the stream with the fn `use_random_seed`. In Computer Scie"
"nce, a random seed is the starting point from which a new stream of random val"
"ues can sprout out and blossom. Let's try it:"
msgstr ""

#: A.09-randomisation.md:94
#, no-wrap
msgid ""
"use_random_seed 0\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_random_seed 0\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"

#: A.09-randomisation.md:102
msgid ""
"Great, we get the first three notes of our random melody above: `84`, `83` and"
" `71`. However, we can now change the seed to something else. How about this:"
msgstr ""

#: A.09-randomisation.md:106
#, no-wrap
msgid ""
"use_random_seed 1\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_random_seed 1\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"

#: A.09-randomisation.md:114
msgid ""
"Interesting, we get `83`, `71` and `61` . You might notice that the first two "
"numbers here are the same as the last two numbers before - this isn't a coinci"
"dence."
msgstr ""

#: A.09-randomisation.md:118
msgid ""
"Remember that the random stream is just a giant list of 'pre-rolled' values. U"
"sing a random seed simply jumps us to a point in that list. Another way of thi"
"nking about it is to imagine a huge deck of pre-shuffled cards. Using a random"
" seed is cutting the deck at a particular point. The fabulous part of this is "
"that it's precisely this ability to jump around the random stream which gives "
"us huge power when making music."
msgstr ""

#: A.09-randomisation.md:126
msgid ""
"Let's revisit our random melody of 8 notes with this new stream resetting powe"
"r, but let's also throw in a live loop so we can experiment live whilst it's p"
"laying:"
msgstr ""

#: A.09-randomisation.md:130
#, no-wrap
msgid ""
"live_loop :random_riff do    \n"
"  use_random_seed 0\n"
"  8.times do\n"
"    play rrand_i(50, 95), release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do    \n"
"  use_random_seed 0\n"
"  8.times do\n"
"    play rrand_i(50, 95), release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.09-randomisation.md:140
msgid ""
"Now, whilst it's still playing, change the seed value from `0` to something el"
"se. Try `100`, what about `999`. Try your own values, experiment and play arou"
"nd - see which seed generates the riff you like best."
msgstr ""

#: A.09-randomisation.md:147
msgid ""
"This month's tutorial has been quite a technical dive into the workings of Son"
"ic Pi's randomisation functionality. Hopefully it has given you some insight i"
"nto how it works and how you can start using randomisation in a reliable way t"
"o create repeatable patterns within your music. It's important to stress that "
"you can use repeatable randomisation *anywhere* you want. For example, you can"
" randomise the amplitude of notes, the timing of the rhythm, the amount of rev"
"erb, the current synth, the mix of an FX, etc. etc. In the future we'll take a"
" close look at some of these applications, but for now let me leave you with a"
" short example."
msgstr ""

#: A.09-randomisation.md:157
msgid ""
"Type the following into a spare buffer, hit Run, and then start changing the s"
"eeds around, hit Run again (whilst it's still playing) and explore the differe"
"nt sounds, rhythms and melodies you can make. When you find a nice one, rememb"
"er the seed number so you can get back to it. Finally, when you've found a few"
" seeds you like, put on a live coded performance for your friends by simply sw"
"itching between your favourite seeds to create a full piece."
msgstr ""

#: A.09-randomisation.md:165
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_random_seed 10300\n"
"  use_synth :prophet\n"
"  s = [0.125, 0.25, 0.5].choose\n"
"  8.times do\n"
"    r = [0.125, 0.25, 1, 2].choose\n"
"    n = (scale :e3, :minor).choose\n"
"    co = rrand(30, 100)\n"
"    play n, release: r, cutoff: co\n"
"    sleep s\n"
"  end\n"
"end\n"
"live_loop :drums do\n"
"  use_random_seed 2001\n"
"  16.times do\n"
"    r = rrand(0.5, 10)\n"
"    sample :drum_bass_hard, rate: r, amp: rand\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_random_seed 10300\n"
"  use_synth :prophet\n"
"  s = [0.125, 0.25, 0.5].choose\n"
"  8.times do\n"
"    r = [0.125, 0.25, 1, 2].choose\n"
"    n = (scale :e3, :minor).choose\n"
"    co = rrand(30, 100)\n"
"    play n, release: r, cutoff: co\n"
"    sleep s\n"
"  end\n"
"end\n"
"live_loop :drums do\n"
"  use_random_seed 2001\n"
"  16.times do\n"
"    r = rrand(0.5, 10)\n"
"    sample :drum_bass_hard, rate: r, amp: rand\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.10-controlling-your-sound.md:1
msgid "A.10 Control"
msgstr ""

#: A.10-controlling-your-sound.md:3
msgid "Controlling Your Sound"
msgstr ""

#: A.10-controlling-your-sound.md:5
msgid ""
"So far during this series we've focussed on triggering sounds. We've discovere"
"d that we can trigger the many synths built into Sonic Pi with `play` or `synt"
"h` and how to trigger pre-recorded samples with `sample`. We've also looked at"
" how we can wrap these triggered sounds within studio FX such as reverb and di"
"stortion using the `with_fx` command. Combine this with Sonic Pi's incredibly "
"accurate timing system and you can produce a vast array of sounds, beats and r"
"iffs. However, once you've carefully selected a particular sound's options and"
" triggered it, there's no ability to mess with it whilst it's playing right? W"
"rong! Today you're going to learn something very powerful - how to control run"
"ning synths."
msgstr ""

#: A.10-controlling-your-sound.md:17
msgid "A Basic Sound"
msgstr ""

#: A.10-controlling-your-sound.md:19
msgid ""
"Let's create a nice simple sound. Fire up Sonic Pi and in a fresh buffer type "
"the following:"
msgstr ""

#: A.10-controlling-your-sound.md:22
#, no-wrap
msgid "synth :prophet, note: :e1, release: 8, cutoff: 100"
msgstr "synth :prophet, note: :e1, release: 8, cutoff: 100"

#: A.10-controlling-your-sound.md:26
msgid ""
"Now press the Run button at the top left to hear a lovely rumbling synth sound"
". Go ahead, press it again a few times to get a feel for it. OK, done? Let's s"
"tart controlling it!"
msgstr ""

#: A.10-controlling-your-sound.md:30
msgid "Synth Nodes"
msgstr ""

#: A.10-controlling-your-sound.md:32
msgid ""
"A little known feature in Sonic Pi is that the fns `play`, `synth` and `sample"
"`, return something called a `SynthNode` which represents a running sound. You"
" can capture one of these `SynthNode`s using a standard variable and then **co"
"ntrol** it at a later point in time. For example, let's change the value of th"
"e `cutoff:` opt after 1 beat:"
msgstr ""

#: A.10-controlling-your-sound.md:38
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"control sn, cutoff: 130"

#: A.10-controlling-your-sound.md:44
msgid "Let's look at each line in turn:"
msgstr ""

#: A.10-controlling-your-sound.md:46
msgid ""
"Firstly we trigger the `:prophet` synth using the `synth` fn as normal. Howeve"
"r we also capture the result in a variable called `sn`. We could have called t"
"his variable something completely different such as `synth_node` or `jane` - t"
"he name doesn't matter. However, it's important to choose a name that's meanin"
"gful to you for your performances and for people reading your code. I chose `s"
"n` as it's a nice short mnemonic for synth node."
msgstr ""

#: A.10-controlling-your-sound.md:54
msgid ""
"On line 2 we have a standard `sleep` command. This does nothing special - it j"
"ust asks the computer to wait for 1 beat before moving onto the next line."
msgstr ""

#: A.10-controlling-your-sound.md:58
msgid ""
"Line 3 is where the control fun starts. Here, we use the `control` fn to tell "
"our running `SynthNode` to change the cutoff value to `130`. If you hit the **"
"Run** button, you'll hear the `:prophet` synth start playing as before, but af"
"ter 1 beat it will shift to sound a lot brighter."
msgstr ""

#: A.10-controlling-your-sound.md:63
msgid "Modulatable Options"
msgstr ""

#: A.10-controlling-your-sound.md:65
msgid ""
"Most of Sonic Pi's synths and FX opts may be changed after being triggered. Ho"
"wever, this isn't the case for all of them. For example, the envelope opts `at"
"tack:`, `decay:`, `sustain:` and `release:` can only be set when triggering th"
"e synth. Figuring out which opts can and can't be changed is simple - just hea"
"d to the documentation for a given synth or FX and then scroll down to the ind"
"ividual option documentation and look for the phrases \"May be changed whilst p"
"laying\" or \"Can not be changed once set\". For example, the documentation for t"
"he `:beep` synth's `attack:` opt makes it clear that it's not possible to chan"
"ge it:"
msgstr ""

#: A.10-controlling-your-sound.md:76
msgid "Default: 0"
msgstr ""

#: A.10-controlling-your-sound.md:77
msgid "Must be zero or greater"
msgstr ""

#: A.10-controlling-your-sound.md:78
msgid "Can not be changed once set"
msgstr ""

#: A.10-controlling-your-sound.md:79
msgid "Scaled with current BPM value"
msgstr ""

#: A.10-controlling-your-sound.md:81
msgid "Multiple Changes"
msgstr ""

#: A.10-controlling-your-sound.md:83
msgid ""
"Whilst a synth is running you're not limited to changing it only once - you're"
" free to change it as many times as you like. For example, we can turn our `:p"
"rophet` into a mini arpeggiator with the following:"
msgstr ""

#: A.10-controlling-your-sound.md:87
#, no-wrap
msgid ""
"notes = (scale :e3, :minor_pentatonic)\n"
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"16.times do\n"
"  control sn, note: notes.tick\n"
"  sleep 0.125\n"
"end"
msgstr ""
"notes = (scale :e3, :minor_pentatonic)\n"
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"16.times do\n"
"  control sn, note: notes.tick\n"
"  sleep 0.125\n"
"end"

#: A.10-controlling-your-sound.md:97
msgid ""
"In this snippet of code we just added a couple of extra things. First we defin"
"ed a new variable called `notes` which contains the notes we'd like to cycle t"
"hrough (an arpeggiator is just a fancy name for something that cycles through "
"a list of notes in order). Secondly we replaced our single call to `control` w"
"ith an iteration calling it 16 times. In each call to `control` we `.tick` thr"
"ough our ring of `notes` which will automatically repeat once we get to the en"
"d (thanks to the fabulous power of Sonic Pi's rings). For a bit of variety try"
" replacing `.tick` with `.choose` and see if you can hear the difference."
msgstr ""

#: A.10-controlling-your-sound.md:107
msgid ""
"Note that we can change multiple opts simultaneously. Try changing the control"
" line to the following and listen for the difference:"
msgstr ""

#: A.10-controlling-your-sound.md:110
#, no-wrap
msgid "control sn, note: notes.tick, cutoff: rrand(70, 130)"
msgstr "control sn, note: notes.tick, cutoff: rrand(70, 130)"

#: A.10-controlling-your-sound.md:114
msgid "Sliding"
msgstr ""

#: A.10-controlling-your-sound.md:116
msgid ""
"When we control a `SynthNode`, it responds exactly on time and instantly chang"
"es the value of the opt to the new one as if you'd pressed a button or flicked"
" a switch requesting the change. This can sound rhythmical and percussive - es"
"pecially if the opt controls an aspect of the timbre such as `cutoff:`. Howeve"
"r, sometimes you don't want the change to happen instantaneously. Instead, you"
" might want to smoothly move from the current value to the new one as if you'd"
" moved a slider or dial. Of course, Sonic Pi can also do this too using the `_"
"slide:` opts."
msgstr ""

#: A.10-controlling-your-sound.md:125
msgid ""
"Each opt that can be modified also has a special corresponding `_slide:` opt t"
"hat allows you to specify a slide time. For example, `amp:` has `amp_slide:` a"
"nd `cutoff:` has `cutoff_slide:`. These slide opts work slightly differently t"
"han all the other opts in that they tell the synth note how to behave **next t"
"ime they are controlled**. Let's take a look:"
msgstr ""

#: A.10-controlling-your-sound.md:131
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 2\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 2\n"
"sleep 1\n"
"control sn, cutoff: 130"

#: A.10-controlling-your-sound.md:137
msgid ""
"Notice how this example is exactly the same as before except with the addition"
" of `cutoff_slide:`. This is saying that next time this synth has its `cutoff:"
"` opt controlled, it will take 2 beats to slide from the current value to the "
"new one. Therefore, when we use `control` you can hear the cutoff slide from 7"
"0 to 130. It creates an interesting dynamic feel to the sound. Now, try changi"
"ng the `cutoff_slide:` time to a shorter value such as 0.5 or a longer value s"
"uch as 4 to see how it changes the sound. Remember, you can slide any of the m"
"odifiable opts in exactly this way and each `_slide:` value can be totally dif"
"ferent so you can have the cutoff sliding slowly, the amp sliding fast and the"
" pan sliding somewhere in between if that's what you're looking to create..."
msgstr ""

#: A.10-controlling-your-sound.md:151
msgid ""
"Let's look at a short example which demonstrates the power of controlling synt"
"hs after they've been triggered. Notice that you can also slide FX just like s"
"ynths although with a slightly different syntax. Check out section 7.2 of the "
"built-in tutorial for more information on controlling FX."
msgstr ""

#: A.10-controlling-your-sound.md:157
msgid ""
"Copy the code into a spare buffer and take a listen. Don't stop there though -"
" play around with the code. Change the slide times, change the notes, the synt"
"h, the FX and the sleep times and see if you can turn it into something comple"
"tely different!"
msgstr ""

#: A.10-controlling-your-sound.md:162
#, no-wrap
msgid ""
"live_loop :moon_rise do\n"
"  with_fx :echo, mix: 0, mix_slide: 8 do |fx|\n"
"    control fx, mix: 1\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n"
"    sn = synth :prophet , sustain: 8, note: :e1, cutoff: 70, cutoff_slide: 8\n"
"    control sn, cutoff: 130\n"
"    sleep 2\n"
"    32.times do\n"
"      control sn, note: notes.tick, pan: rrand(-1, 1)\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"live_loop :moon_rise do\n"
"  with_fx :echo, mix: 0, mix_slide: 8 do |fx|\n"
"    control fx, mix: 1\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n"
"    sn = synth :prophet , sustain: 8, note: :e1, cutoff: 70, cutoff_slide: 8\n"
"    control sn, cutoff: 130\n"
"    sleep 2\n"
"    32.times do\n"
"      control sn, note: notes.tick, pan: rrand(-1, 1)\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.11-beat-tracking.md:1
msgid "A.11 Tick Tock"
msgstr ""

#: A.11-beat-tracking.md:3
msgid "Tracking the Beat"
msgstr ""

#: A.11-beat-tracking.md:5
msgid ""
"Last month in this series we took a deep technical dive into the randomisation"
" system underpinning Sonic Pi. We explored how we can use it to deterministica"
"lly add new levels of dynamic control over our code. This month we're going to"
" continue our technical dive and turn our attention to Sonic Pi's unique tick "
"system. By the end of this article you'll be ticking your way through rhythms "
"and riffs on your way to being a live coding DJ."
msgstr ""

#: A.11-beat-tracking.md:13
msgid "Beat Counting"
msgstr ""

#: A.11-beat-tracking.md:15
msgid ""
"When making music we often want to do a different thing depending on which bea"
"t it is. Sonic Pi has a special beat counting system called `tick` to give you"
" precise control over when a beat actually occurs and even supports multiple b"
"eats with their own tempos."
msgstr ""

#: A.11-beat-tracking.md:20
msgid ""
"Let's have a play - to advance the beat we just need to call `tick`. Open up a"
" fresh buffer, type in the following and hit Run:"
msgstr ""

#: A.11-beat-tracking.md:23
#, no-wrap
msgid "puts tick #=> 0"
msgstr "puts tick #=> 0"

#: A.11-beat-tracking.md:27
msgid ""
"This will return the current beat: `0`. Notice that even if you press the Run "
"button a few times it will always return `0`. This is because each run starts "
"a fresh beat counting from 0. However, whilst the run is still active, we can "
"advance the beat as many times as we want:"
msgstr ""

#: A.11-beat-tracking.md:32
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts tick #=> 2"
msgstr ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts tick #=> 2"

#: A.11-beat-tracking.md:38
msgid ""
"Whenever you see the symbol `#=>` at the end of a line of code it means that t"
"hat line will log the text on the right-hand-side. For example, `puts foo #=> "
"0` means the code `puts foo` prints `0` to the log at that point in the progra"
"m."
msgstr ""

#: A.11-beat-tracking.md:43
msgid "Checking the Beat"
msgstr ""

#: A.11-beat-tracking.md:45
msgid ""
"We've seen that `tick` does two things. It increments (adds one) and returns t"
"he current beat. Sometimes we just want to look at the current beat without ha"
"ving to increment it which we can do via `look`:"
msgstr ""

#: A.11-beat-tracking.md:49
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts look #=> 1\n"
"puts look #=> 1"
msgstr ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts look #=> 1\n"
"puts look #=> 1"

#: A.11-beat-tracking.md:56
msgid ""
"In this code we tick the beat up twice and then call `look` twice. We'll see t"
"he following values in the log: `0`, `1`, `1`, `1`. The first two `tick`s retu"
"rned `0`, then `1` as expected, then the two `look`s just returned the last be"
"at value twice which was `1`."
msgstr ""

#: A.11-beat-tracking.md:64
msgid ""
"So now we can advance the beat with `tick` and check the beat with `look`. Wha"
"t next? We need something to tick over. Sonic Pi uses rings for representing r"
"iffs, melodies and rhythms and the tick system has been specifically designed "
"to work very closely with them. In fact, rings have their own dot version of `"
"tick` which does two things. Firstly, it acts like a regular tick and incremen"
"ts the beat. Secondly it looks up the ring value using the beat as the index. "
"Let's take a look:"
msgstr ""

#: A.11-beat-tracking.md:72
#, no-wrap
msgid "puts (ring :a, :b, :c).tick #=> :a"
msgstr "puts (ring :a, :b, :c).tick #=> :a"

#: A.11-beat-tracking.md:76
msgid ""
"`.tick` is a special dot version of `tick` which will return the first value o"
"f the ring `:a`. We can grab each of the values in the ring by calling `.tick`"
" multiple times:"
msgstr ""

#: A.11-beat-tracking.md:80
#, no-wrap
msgid ""
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts (ring :a, :b, :c).tick #=> :b\n"
"puts (ring :a, :b, :c).tick #=> :c\n"
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts look                   #=> 3"
msgstr ""
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts (ring :a, :b, :c).tick #=> :b\n"
"puts (ring :a, :b, :c).tick #=> :c\n"
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts look                   #=> 3"

#: A.11-beat-tracking.md:88
msgid ""
"Take a look at the log and you'll see `:a`, `:b`, `:c` and then `:a` again. No"
"tice that `look` returns `3`. Calls to `.tick` act just like they are regular "
"calls to `tick` - they increment the local beat."
msgstr ""

#: A.11-beat-tracking.md:93
msgid "A Live Loop Arpeggiator"
msgstr ""

#: A.11-beat-tracking.md:95
msgid ""
"The real power comes when you mix `tick` with rings and `live_loop`s. When com"
"bined we have all the tools we need to both build and understand a simple arpe"
"giator. We need just four things:"
msgstr ""

#: A.11-beat-tracking.md:99
msgid "A ring containing the notes we want to loop over."
msgstr ""

#: A.11-beat-tracking.md:100
msgid "A means of incrementing and obtaining the beat."
msgstr ""

#: A.11-beat-tracking.md:101
msgid "The ability to play a note based on the current beat."
msgstr ""

#: A.11-beat-tracking.md:102
msgid "A loop structure to keep the arpegiator repeating."
msgstr ""

#: A.11-beat-tracking.md:104
msgid "These concepts can all be found in the following code:"
msgstr ""

#: A.11-beat-tracking.md:106
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"live_loop :arp do\n"
"  use_synth :dpulse\n"
"  play notes.tick, release: 0.2\n"
"  sleep 0.125\n"
"end"
msgstr ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"live_loop :arp do\n"
"  use_synth :dpulse\n"
"  play notes.tick, release: 0.2\n"
"  sleep 0.125\n"
"end"

#: A.11-beat-tracking.md:116
msgid ""
"Let's look at each of these lines. First we define our ring of notes which we'"
"ll continually play. We then create a `live_loop` called `:arp` which loops ro"
"und for us. Each time round the `live_loop` we set our synth to `:dpulse` and "
"then play the next note in our ring using `.tick`. Remember that this will inc"
"rement our beat counter and use the latest beat value as an index into our not"
"es ring. Finally, we wait for an eighth of a beat before looping round again."
msgstr ""

#: A.11-beat-tracking.md:124
msgid "Multiple Simultaneous Beats"
msgstr ""

#: A.11-beat-tracking.md:126
msgid ""
"A really important thing to know is that `tick`s are local to the `live_loop`."
" This means that each `live_loop` has its own independent beat counter. This i"
"s much more powerful than having a global metronome and beat. Let's take a loo"
"k at this in action:"
msgstr ""

#: A.11-beat-tracking.md:131
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"with_fx :reverb do\n"
"  live_loop :arp do\n"
"    use_synth :dpulse\n"
"    play notes.tick + 12, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play notes.tick - 12, release: 0.2\n"
"  sleep 0.75\n"
"end"
msgstr ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"with_fx :reverb do\n"
"  live_loop :arp do\n"
"    use_synth :dpulse\n"
"    play notes.tick + 12, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play notes.tick - 12, release: 0.2\n"
"  sleep 0.75\n"
"end"

#: A.11-beat-tracking.md:149
msgid "Clashing Beats"
msgstr ""

#: A.11-beat-tracking.md:151
msgid ""
"A big cause of confusion with Sonic Pi's tick system is when people want to ti"
"ck over multiple rings in the same `live_loop`:"
msgstr ""

#: A.11-beat-tracking.md:154
#, no-wrap
msgid ""
"use_bpm 300\n"
"use_synth :blade\n"
"live_loop :foo do\n"
"  play (ring :e1, :e2, :e3).tick\n"
"  play (scale :e3, :minor_pentatonic).tick\n"
"  sleep 1\n"
"end"
msgstr ""
"use_bpm 300\n"
"use_synth :blade\n"
"live_loop :foo do\n"
"  play (ring :e1, :e2, :e3).tick\n"
"  play (scale :e3, :minor_pentatonic).tick\n"
"  sleep 1\n"
"end"

#: A.11-beat-tracking.md:164
msgid ""
"Even though each `live_loop` has its own independent beat counter, we're calli"
"ng `.tick` twice within the same `live_loop`. This means that the beat will be"
" incremented twice every time round. This can produce some interesting polyrhy"
"thms but is often not what you want. There are two solutions to this problem. "
"One option is to manually call `tick` at the start of the `live_loop` and then"
" use `.look` to look up the current beat in each `live_loop`. The second solut"
"ion is to pass a unique name to each call to `.tick` such as `.tick(:foo)`. So"
"nic Pi will then create and track a separate beat counter for each named tick "
"you use. That way you can work with as many beats as you need! See the section"
" on named ticks in 9.4 of the built-in tutorial for more information."
msgstr ""

#: A.11-beat-tracking.md:178
msgid ""
"Let's bring all this knowledge of `tick`s, `ring`s and `live_loop`s together f"
"or a final fun example. As usual, don't treat this as a finished piece. Start "
"changing things and play around with it and see what you can turn it into. See"
" you next time..."
msgstr ""

#: A.11-beat-tracking.md:183
#, no-wrap
msgid ""
"use_bpm 240\n"
"notes = (scale :e3, :minor_pentatonic).shuffle\n"
"live_loop :foo do\n"
"  use_synth :blade\n"
"  with_fx :reverb, reps: 8, room: 1 do\n"
"    tick\n"
"    co = (line 70, 130, steps: 32).tick(:cutoff)\n"
"    play (octs :e3, 3).look, cutoff: co, amp: 2\n"
"    play notes.look, amp: 4\n"
"    sleep 1\n"
"  end\n"
"end\n"
"live_loop :bar do\n"
"  tick\n"
"  sample :bd_ada if (spread 1, 4).look\n"
"  use_synth :tb303\n"
"  co = (line 70, 130, steps: 16).look\n"
"  r = (line 0.1, 0.5, steps: 64).mirror.look\n"
"  play notes.look, release: r, cutoff: co\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_bpm 240\n"
"notes = (scale :e3, :minor_pentatonic).shuffle\n"
"live_loop :foo do\n"
"  use_synth :blade\n"
"  with_fx :reverb, reps: 8, room: 1 do\n"
"    tick\n"
"    co = (line 70, 130, steps: 32).tick(:cutoff)\n"
"    play (octs :e3, 3).look, cutoff: co, amp: 2\n"
"    play notes.look, amp: 4\n"
"    sleep 1\n"
"  end\n"
"end\n"
"live_loop :bar do\n"
"  tick\n"
"  sample :bd_ada if (spread 1, 4).look\n"
"  use_synth :tb303\n"
"  co = (line 70, 130, steps: 16).look\n"
"  r = (line 0.1, 0.5, steps: 64).mirror.look\n"
"  play notes.look, release: r, cutoff: co\n"
"  sleep 0.5\n"
"end"

#: A.12-sample-slicing.md:1
msgid "A.12 Sample Slicing"
msgstr ""

#: A.12-sample-slicing.md:3
msgid "Sample Slicing"
msgstr ""

#: A.12-sample-slicing.md:5
msgid ""
"Way back in episode 3 of this Sonic Pi series we looked at how to loop, stretc"
"h and filter one of the most famous drum breaks of all time - the Amen Break. "
"In this tutorial we're going to take this one step further and learn how to sl"
"ice it up, shuffle the slices and glue it back together in a completely new or"
"der. If that sounds a bit crazy to you, don't worry, it will all become clear "
"and you'll soon master a powerful new tool for your live coded sets."
msgstr ""

#: A.12-sample-slicing.md:13
msgid "Sound as Data"
msgstr ""

#: A.12-sample-slicing.md:15
msgid ""
"Before we get started let's just take a brief moment to understand how to work"
" with samples. By now, you've all hopefully played with Sonic Pi's powerful sa"
"mpler. If not, there's no time like the present! Boot up your Raspberry Pi, la"
"unch Sonic Pi from the Programming menu, type the following into a fresh buffe"
"r and then hit the Run button to hear a pre-recorded drum beat:"
msgstr ""

#: A.12-sample-slicing.md:26
msgid ""
"A recording of a sound is simply represented as data - lots of numbers between"
" -1 and 1 which represent the peaks and troughs of the sound wave. If we play "
"those numbers back in order, we get the original sound. However, what's to sto"
"p us from playing them back in a different order and creating a new sound?"
msgstr ""

#: A.12-sample-slicing.md:32
msgid ""
"How are samples actually recorded? It's actually pretty simple once you unders"
"tand the basic physics of sound. When you make a sound - for example by hittin"
"g a drum, the noise travels through the air in a similar fashion to how the su"
"rface of a lake ripples when you throw a pebble into it. When those ripples re"
"ach your ears, your eardrum moves sympathetically and converts those movements"
" into the sound you hear. If we wish to record and play back the sound, we the"
"refore need a way of capturing, storing and reproducing those ripples. One way"
" is to use a microphone which acts like an eardrum and moves back and forth as"
" the sound ripples hit it. The microphone then converts its position into a ti"
"ny electric signal which is then measured many times a second. These measureme"
"nts are then represented as a series of numbers between -1 and 1."
msgstr ""

#: A.12-sample-slicing.md:46
msgid ""
"If we were to plot a visualisation of the sound it would be a simple graph of "
"data with time on the x axis and microphone/speaker position as a value betwee"
"n -1 and 1 on the y axis. You can see an example of such a graph at the top of"
" the diagram."
msgstr ""

#: A.12-sample-slicing.md:51
msgid "Playing Part of a Sample"
msgstr ""

#: A.12-sample-slicing.md:53
msgid ""
"So, how do we code Sonic Pi to play a sample back in a different order? To ans"
"wer this question we need to take a look at the `start:` and `finish:` opts fo"
"r `sample`. These let us control the start and finish positions of our playbac"
"k of the numbers which represent the sound. The values for both of these opts "
"are represented as a number between `0` and `1` where `0` represents the start"
" of the sample and `1` is the end. So, to play the first half of the Amen Brea"
"k, we just need to specify a `finish:` of `0.5`:"
msgstr ""

#: A.12-sample-slicing.md:66
msgid "We can add in a `start:` value to play an even smaller section of the sample:"
msgstr ""

#: A.12-sample-slicing.md:68
#, no-wrap
msgid "sample :loop_amen, start: 0.25, finish: 0.5"
msgstr "sample :loop_amen, start: 0.25, finish: 0.5"

#: A.12-sample-slicing.md:72
msgid ""
"For fun, you can even have the `finish:` opt's value be *before* `start:` and "
"it will play the section backwards:"
msgstr ""

#: A.12-sample-slicing.md:75
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.25"
msgstr "sample :loop_amen, start: 0.5, finish: 0.25"

#: A.12-sample-slicing.md:79
msgid "Re-ordering Sample Playback"
msgstr ""

#: A.12-sample-slicing.md:81
msgid ""
"Now that we know that a sample is simply a list of numbers that can be played "
"back in any order and also how to play a specific part of a sample we can now "
"start having fun playing a sample back in the 'wrong' order."
msgstr ""

#: A.12-sample-slicing.md:86
msgid "![Amen Slices](../images/tutorial/articles/A.12-sample-slicing/amen_slice.png)"
msgstr ""

#: A.12-sample-slicing.md:88
msgid ""
"Let's take our Amen Break and chop it up into 8 equally-sized slices and then "
"shuffle the pieces around. Take a look at the diagram: at the top A) represent"
"s the graph of our original sample data. Chopping it into 8 slices gives us B)"
" - notice that we've given each slice a different colour to help distinguish t"
"hem. You can see each slice's start and finish values at the top. Finally C) i"
"s one possible re-ordering of the slices. We can then play this back to create"
" a new beat. Take a look at the code to do this:"
msgstr ""

#: A.12-sample-slicing.md:97
#, no-wrap
msgid ""
"live_loop :beat_slicer do\n"
"  slice_idx = rand_i(8)\n"
"  slice_size = 0.125\n"
"  s = slice_idx * slice_size\n"
"  f = s + slice_size\n"
"  sample :loop_amen, start: s, finish: f\n"
"  sleep sample_duration :loop_amen, start: s, finish: f\n"
"end"
msgstr ""
"live_loop :beat_slicer do\n"
"  slice_idx = rand_i(8)\n"
"  slice_size = 0.125\n"
"  s = slice_idx * slice_size\n"
"  f = s + slice_size\n"
"  sample :loop_amen, start: s, finish: f\n"
"  sleep sample_duration :loop_amen, start: s, finish: f\n"
"end"

#: A.12-sample-slicing.md:108
msgid ""
"we choose a random slice to play which should be a random number between 0 and"
" 7 (remember that we start counting at 0). Sonic Pi has a handy function for e"
"xactly this: `rand_i(8)`. We then store this random slice index in the variabl"
"e `slice_idx`."
msgstr ""

#: A.12-sample-slicing.md:113
msgid ""
"We define our `slice_size` which is 1/8 or 0.125. The `slice_size` is necessar"
"y for us to convert our `slice_idx` into a value between 0 and 1 so we can use"
" it as our `start:` opt."
msgstr ""

#: A.12-sample-slicing.md:117
msgid ""
"We calculate the start position `s` by multiplying the `slice_idx` by the `sli"
"ce_size`."
msgstr ""

#: A.12-sample-slicing.md:120
msgid ""
"We calculate the finish position `f` by adding the `slice_size` to the start p"
"osition `s`."
msgstr ""

#: A.12-sample-slicing.md:123
msgid ""
"We can now play the sample slice by plugging in the `s` and `f` values into th"
"e `start:` and `finish:` opts for `sample`."
msgstr ""

#: A.12-sample-slicing.md:126
msgid ""
"Before we play the next slice we need to know how long to `sleep` which should"
" be the duration of the sample slice. Luckily, Sonic Pi has us covered with `s"
"ample_duration` which accepts all the same opts as `sample` and simply returns"
" the duration. Therefore, by passing `sample_duration` our `start:` and `finis"
"h:` opts, we can find out the duration of a single slice."
msgstr ""

#: A.12-sample-slicing.md:133
msgid ""
"We wrap all of this code in a `live_loop` so that we continue to pick new rand"
"om slices to play."
msgstr ""

#: A.12-sample-slicing.md:139
msgid ""
"Let's combine everything we've seen so far into a final example which demonstr"
"ates how we can take a similar approach to combine randomly sliced beats with "
"some bass to create the start of an interesting track. Now it's your turn - ta"
"ke the code below as a starting point and see if you can take it in your own d"
"irection and create something new..."
msgstr ""

#: A.12-sample-slicing.md:145
#, no-wrap
msgid ""
"live_loop :sliced_amen do\n"
"  n = 8\n"
"  s =  line(0, 1, steps: n).choose\n"
"  f = s + (1.0 / n)\n"
"  sample :loop_amen, beat_stretch: 2, start: s, finish: f\n"
"  sleep 2.0  / n\n"
"end\n"
"live_loop :acid_bass do\n"
"  with_fx :reverb, room: 1, reps: 32, amp: 0.6 do\n"
"    tick\n"
"    n = (octs :e0, 3).look - (knit 0, 3 * 8, -4, 3 * 8).look\n"
"    co = rrand(70, 110)\n"
"    synth :beep, note: n + 36, release: 0.1, wave: 0, cutoff: co\n"
"    synth :tb303, note: n, release: 0.2, wave: 0, cutoff: co\n"
"    sleep (ring 0.125, 0.25).look\n"
"  end\n"
"end"
msgstr ""
"live_loop :sliced_amen do\n"
"  n = 8\n"
"  s =  line(0, 1, steps: n).choose\n"
"  f = s + (1.0 / n)\n"
"  sample :loop_amen, beat_stretch: 2, start: s, finish: f\n"
"  sleep 2.0  / n\n"
"end\n"
"live_loop :acid_bass do\n"
"  with_fx :reverb, room: 1, reps: 32, amp: 0.6 do\n"
"    tick\n"
"    n = (octs :e0, 3).look - (knit 0, 3 * 8, -4, 3 * 8).look\n"
"    co = rrand(70, 110)\n"
"    synth :beep, note: n + 36, release: 0.1, wave: 0, cutoff: co\n"
"    synth :tb303, note: n, release: 0.2, wave: 0, cutoff: co\n"
"    sleep (ring 0.125, 0.25).look\n"
"  end\n"
"end"
